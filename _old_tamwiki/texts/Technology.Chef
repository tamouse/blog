>>comment<<
Summary:Chef is an application/server deployment facility profided by Ops Code both as a hosted and a standalone version
Parent:(Technology.)Tools
IncludeMe:[[(Technology.)Tools]]
Categories:[[!Links]]
Tags: tools, deployment, server administration, devops
(:tags-hide tools, deployment, server administration, devops :)
>><<

[[#excerpt]]
If you have an application that has several moving parts, authentication credentials, and uses various services and daemons on the target environment, and possibly several target environments (i.e. production, staging, testing, etc), [[Chef -> http://www.opscode.com/chef/]] is a tool that can help tremendously. 
[[#excerptend]]

>>quote<<
!! Reality-Based automation for the Cloud.

Chef is an open-source systems integration framework built specifically for automating the cloud. No matter how complex the realities of your business, Chef makes it easy to deploy servers and scale applications throughout your entire infrastructure. Because it combines the fundamental elements of configuration management and service oriented architectures with the full power of Ruby, Chef makes it easy to create an elegant, fully automated infrastructure.
>><<

!! Quick hits


!!! Editing a secure data bag:

(:source lang=bash -getcode:)
$ knife data bag edit secure ENV --secret-file PATH/TO/Data_Key
(:sourceend:)



!!! Changing an environment with knife:

(:source lang=bash -getcode:)
$ knife environment from file environments/$ENVIRONMENT.rb 
(:sourceend:)

!!! Uploading a new cookbook with knife:

(:source lang=bash -getcode:)
$ knife cookbook upload $COOKBOOKNAME
(:sourceend:)

!! Making an update to a cookbook, but only using it in some environments

Each cookbook has a [@metadata.rb@] file that contains the revision of the cookbook:

(:source lang=ruby header="metadata.rb file for the myapp cookbook":)
maintainer "tamouse"
maintainer_email "tamouse@gmail.com"
license "MIT"
description "Installs/Configures MyApp"
long_description IO.read(File.join(File.dirname(__FILE__), 'README.md'))
version "0.2.6" # <---- this is where you manage the version number
depends "unicorn"
depends "application"
depends "application_ruby"
depends "nodejs"
depends "mysql"
depends "rbenv"
depends "database"
depends "logrotate"
(:sourceend:)

the [@version@] line is set to the latest version of a cookbook. Hosted Chef keeps track of versions of cookbooks, so environments can choose which one they want to use. In the environment file, you specify the set of cookbooks to include using the "cookbooks" JSON object:

(:source lang=ruby header="Partial contents of an environment file in chef":)
cookbook_versions({
                      "apache2" => "= 1.1.10",
                      "application" => "= 1.0.1",
                      "application_java" => "= 1.0.0",
                      "application_ruby" => "= 1.0.8",
                      "apt" => "= 1.4.2",
                      "aws" => "= 0.100.0",
                      "bind9" => "= 0.1.3",
                      "bluepill" => "= 1.0.4",
                      "build-essential" => "= 1.0.2",
                      "chef-client" => "= 1.1.3",
                      "chef_handler" => "= 1.0.6",
                      "database" => "= 1.2.0",
                      "dmg" => "= 1.0.0",
                      "erlang" => "= 1.0.0",
                      "git" => "= 1.0.0",
                      "gpg" => "= 0.0.1",
                      "gunicorn" => "= 1.0.0",
                      "haproxy" => "= 1.0.5",
                      "iptables" => "= 0.10.0",
                      "java" => "= 1.5.0",
                      "jetty" => "= 0.0.1",
                      "jpackage" => "= 0.10.0",
                      "keepalived" => "= 0.8.2",
                      "logrotate" => "= 0.8.2",
                      "memcached" => "= 1.0.3",
                      "myapp" => "= 0.2.6", # <--- this is where you say which version of the myapp cookbook to use
                      "mysql" => "= 1.2.6",
                      "newrelic" => "= 0.2.6",
                      "nginx" => "= 0.101.6",
                      "nodejs" => "= 1.0.1",
                      "ohai" => "= 1.0.2",
                      "openssl" => "= 1.0.0",
                      "passenger_apache2" => "= 0.99.4",
                      "php" => "= 1.0.2",
                      "postfix" => "= 1.2.0",
                      "postgresql" => "= 0.99.4",
                      "python" => "= 1.0.6",
                      "rabbitmq" => "= 1.4.2",
                      "rbenv" => "= 1.4.0",
                      "rubygems" => "= 0.2.0",
                      "runit" => "= 0.15.0",
                      "rvm" => "= 0.9.1",
                      "scout-agent" => "= 1.0.0",
                      "solr-jetty" => "= 0.0.1",
                      "solr-tomcat" => "= 0.0.3",
                      "sudo" => "= 1.1.0",
                      "tomcat" => "= 0.10.4",
                      "unicorn" => "= 1.0.4",
                      "users" => "= 1.1.2",
                      "windows" => "= 1.3.0",
                      "wordpress" => "= 0.8.8",
                      "xfs" => "= 1.0.0",
                      "xml" => "= 1.0.4",
                      "yum" => "= 0.6.0",
                      "common" => "= 0.0.2"

                  })
(:sourceend:)

If you have multiple environments, then you can rev the myapp cookbook, and specify the version string for only those environments that need the new aspects of the cookbook, and leave the others alone. For example, you may have a handful of testing environments for various reasons, and you can have a testing envrionment that is the only one that gets the new version bump for you app until it's tested adequately. As the features of your app are promoted from development to testing to staging to production, you can modify each of the corresponding environment files as necessary.

