[[#excerpt]]
Pop-up meta links or windows are all the rage. They let you hide away and then expose additional content at the click of a button. The [[#onclick|first example]] is very old school, just tieing the onClick event of the link to a JavaScript call to open a window. Very crude and very Web 1.0. The [[#javascriptex|second example]] is a bit better, using JavaScript to add an event handler to a link which opens the window based on the href attribute in the link. The [[#jqueryex|third example]] goes all the way to Web 2.0 utilizing [[jQuery]] to assign the event handlers to the link elements and to cause a hidden &lt;div&gt; to float out in front of the window. Very sexy!
[[#excerptend]]


----

[[#onclick]]
!! Example 1: Use of `onClick to directly call a some javascript with the new window to open

(:source lang=html4strict:)
  <A
     window.status='status bar text on rollover'
     onClick='window.open("url", "name", 
 "toolbar=no, location=no, directories=no, menubar=no, scrollbars=auto, status=no, RESIZE, width=300, height=300")'
     href='javascript:void(0)'
  >blah blah</A>
(:sourceend:)

NOTE the use of the @@javascript:void(0)@@ in the @@href=@@ to basically do nothing!!  cool idea. Example of use:

(:source lang=html4strict:)
 <p>While it's true that science hasn't yet created a Stepford Society, 
 it's not for lack of trying. Our age might have once 
 qualified as a scary Sci-Fi vision:  Boomermen assert their  
 Viagra-pumped sexuality, age-defiant women subject themselves to poison 
 <A window.status='MetaLink' onClick="window.open('http://www.feedmag.com/html/filter/98.06cruz/98.06cruz_margin4.html', 
 'margin', 'toolbar=no, location=no, directories=no, menubar=no, scrollbars=auto, status=no, RESIZE, width=300, height=300')" 
 href="javascript:void(0)">Botox</A> 
 injections, hyperactive children and neurotic adults get Ritalin to 
 calm down, and dieters surrender to a gleaming array of liposculpture 
 devices. If Dr. Plomin and germline genetic engineering prove successful, 
 the old saying may well  become obsolete. There will, in fact,  be a 
 cure for stupidity. Maybe they'll find one for scientific hubris along 
 the way.</p>
(:sourceend:)

>>note<<
There are better ways to do this with javascript and invisible <div>'s, mouse-over events. See [[#jqueryex|jQuery example]] below.
>><<

----

[[#javascriptex]]
!!Example 2: Using javascript to modify the behavior of a link element

The following uses stock javascript in order to make the links in the container become pop-up links instead of jumping to the page directly.

(:source lang=css:)
  <style type="text/css">
  * {
	margin:0px;
	padding:0px;
  }
  #container {
 	color:#555;
 	font-size:10pt;
 	font-family:"Trebuchet MS", Arial, Verdana, Tahoma;
 	width:630px;
 	height:530px;
 	margin-top:-215px;
 	margin-left:-315px;
 	margin:20px auto;
  } 
  ul {
 	list-style-type:none;
  }
  ul li {
 	float:left;
 	margin:10px 3px;
  } 
  ul li a img {
 	width:200px;
 	height:150px;
 	padding:1px;
 	border:1px solid #999;
  }
  </style>

(:sourceend:)

First, we add the event listener to the load event of the window. This will cause the openNewWin function to execute once the document is loaded. This is so the function does execute prematurely before there is html to act upon. Note requirement to be compliant with both Firefox and Internet Explorer.

(:source lang=javascript:)
  <script type="text/javascript">
     /* <[CDATA[ */
       window.addEventListener ? 
              window.addEventListener('load',
                    function () {
 	                openNewWin();
 	            },
                    false) // FF
        :
              window.attachEvent('onload',
                    function () {
                    	openNewWin();
                     }); //  IE
(:sourceend:)
	
Here is the function that runs at load time and attaches an event to every &lt;a&gt; element inside container.

(:source lang=javascript:)
function openNewWin() {
(:sourceend:)

Get an array of &lt;a&gt; elements inside the container &lt;div&gt;

(:source lang=javascript:)
    var imgA = document.getElementById('container').getElementsByTagName('a');

/* Cycle through each &lt;a&gt; element */

    for (var i = 0 ; i < imgA.length; i++) {
    /* Assign an event handler to the click event of each &lt;a&gt; element */
        imgA[i].onclick = function () {
            /* when clicked, the window will open with the url set to 
             * the href attribute of the given &lt;a&gt; tag */
            window.open(this.getAttribute('href'),'mywin','width=500,height=400');
            /* negate the remainder of the &lt;a&gt; tags function */
            return false;
        } // end function
     } // end for
} // end openNewWin
/* ]]> */
</script>
(:sourceend:)

Nothing spectacular here, it's all done with CSS and JavaScript.

(:source lang=html4strict:)
 <div id="container">
 	<ul>
 	<li><a href="Picture1.jpg"> <img src="Picture1.jpg" alt="MyPics"> </a> </li>
	<li><a href="Picture2.jpg"> <img src="Picture2.jpg" alt="MyPics"> </a> </li>
	<li><a href="Picture3.jpg"> <img src="Picture3.jpg" alt="MyPics"> </a> </li>
	<li><a href="Picture4.jpg"> <img src="Picture4.jpg" alt="MyPics"> </a> </li>
	<li><a href="Picture5.jpg"> <img src="Picture5.jpg" alt="MyPics"> </a> </li>
	<li><a href="Picture6.jpg"> <img src="Picture6.jpg" alt="MyPics"> </a> </li>
	<li><a href="Picture7.jpg"> <img src="Picture7.jpg" alt="MyPics"> </a> </li>
	<li><a href="Picture8.jpg"> <img src="Picture8.jpg" alt="MyPics"> </a> </li>
	<li><a href="Picture9.jpg"> <img src="Picture9.jpg" alt="MyPics"> </a> </li>
	</ul>
 </div>
(:sourceend:)

This example is implemented [[http://portfolio.tamaratemple.com/javascriptexamples/popupwindow1.html|here]].

----

[[#jqueryex]]
!! Example 3: jQuery Example!

Same example as above only implemented using [[jQuery]] and a pop-up &lt;div&gt;.

(:source lang=css:)
	 <style type="text/css">
	 * {
		margin:0px;
		padding:0px;
	 }
	 #container {
	 	color:#555;
	 	font-size:10pt;
	 	font-family:"Trebuchet MS", Arial, Verdana, Tahoma;
	 	width:60%;
	 	margin:20px auto;
	 } 
	 ul {
	 	list-style-type:none;
	 }
	 ul li {
	 	float:left;
	 	margin:10px 3px;
	 } 
	 ul li a img {
	 	width:100px;
	 	height:100px;
	 	padding:1px;
	 	border:1px solid #999;
	 }
(:sourceend:)

Here we set up the CSS attributes for the viewer &lt;div&gt;. Of note, z-index is set to a very high value to ensure that this &lt;div&gt; always floats on top. We position it absolutely, then set it to be centered in the viewport. Also important is that display:none be set so that the &lt;div&gt; doesn't render immediately upon loading. We want to wait to render it when the user clicks on one of the thumbnails.

Continuing:
(:source lang=css:)
	#viewer {
		z-index: 99;
		width: 500px;
		height: 500px;
		position: absolute;
		display: none;
		left: 50%;
		top: 50%;
		margin-left: -250px;
		margin-top: -250px;
		text-align: center;
		background-color: #999900;
	}
(:sourceend:)

This sets up the CSS for the &lt;img&gt; tab inside the viewer &lt;div&gt;. Nothing really remarkable here.

(:source lang=css:)
	#viewer img {
		width: 400px;
		height: 400px;
		margin: auto;
		padding: 10px;
		border: 1px solid #999;
	}
	</style>
(:sourceend:)

This is all the jQuery that is needed to render the functionality we want. Much simpler and shorter than the JavaScript above!

(:source lang=javascript:)
	<script type="text/javascript" charset="utf-8">
	/* <![CDATA[ */
		$(document).ready(function(){
(:sourceend:)

First, tell the viewer to hide. This should already be true, but it's best to make sure.

(:source lang=javascript:)
			$("#viewer").hide();
(:sourceend:)

This goes through every &lt;a&gt; tag in container and binds an event handler to the click event of each tag. The event handler changes the viewer's &lt;img&gt; tag src attribute to be that of the &lt;a&gt; tags href attribute, then causes the viewer to appear in a nice sweeping motion.

(:source lang=javascript:)
			$("a","#container").click(function(event){
				$("img","#viewer").attr("src", $(this).attr("href"));
				$("#viewer").show(200);
				event.preventDefault();
			});
(:sourceend:)

This binds an event to the input button on the viewer &lt;div&gt; that causes the viewer to shrink down and disappear in a nice animation.

(:source lang=javascript:)
			$("input:button","#viewer").click(function(){
				$("#viewer").hide(200);
			});
		});
	/* ]]> */
	</script>
(:sourceend:)

Same container structure as before.

(:source lang=html4strict:)
<div id="container">
<ul>
<li><a href="images/Picture1.jpg"> <img src="images/Picture1.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture2.jpg"> <img src="images/Picture2.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture3.jpg"> <img src="images/Picture3.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture4.jpg"> <img src="images/Picture4.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture5.jpg"> <img src="images/Picture5.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture6.jpg"> <img src="images/Picture6.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture7.jpg"> <img src="images/Picture7.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture8.jpg"> <img src="images/Picture8.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture9.jpg"> <img src="images/Picture9.jpg" alt="MyPics"/> </a> </li>
<li><a href="images/Picture10.jpg"> <img src="images/Picture10.jpg" alt="MyPics"/> </a> </li>
</ul>
<div style="clear:both"></div>
</div>
(:sourceend:)

Here is the viewer &lt;div&gt; which is pretty simple, Just an image and a button to display.

(:source lang=html4strict:)
<div id="viewer">
<img/>
<br />
<input type="button" name="close" value="Close" />
</div>
(:sourceend:)

A demo of this is available [[http://portfolio.tamaratemple.com/javascriptexamples/popupwindow2.html|here]].

----

[[#jqueryuiex]]
!! Example 4: A jQuery UI example

'''Update:''' From a commenter on facebook, comes the following utilitizing jQueryUI, an extention to jQuery:

Kate wrote:\\
btw...  Including jQueryUI and popups are even simpler.

(:source lang=javascript:)
  $( 'button#somebutton' ).click( function() { 

     $( '<div title="Popup Title">Popup Text</div>' ).dialog( {

        buttons: { 
           'Done' : function() { $( this ).dialog( 'close' ); } 
        } 

     } ); 

  } );"
(:sourceend:)

Here below is the example above reworked to use jQuery UI widgets:

First the css:

(:source lang=css:)
<style type="text/css">
* {
   margin:0px;
   padding:0px;
}
#container {
   color:#555;
   font-size:10pt;
   font-family:"Trebuchet MS", Arial, Verdana, Tahoma;
   width:60%;
   margin:20px auto;
} 
ul {
   list-style-type:none;
}
ul li {
   float:left;
   margin:10px 3px;
} 
ul li a img {
   width:100px;
   height:100px;
   padding:1px;
   border:1px solid #999;
}
</style>
(:sourceend:)

Next, the jQuery to set up the dialog box:

(:source lang=javascript:)
<script type="text/javascript" charset="utf-8">
/* <![CDATA[ */
$(document).ready(function(){
  $("a","#container").click(function(event){
  $("img","#viewer").attr("src", $(this).attr("href"));
  $("#viewer").dialog('open');
  event.preventDefault();
});

var dialogOpts = {
  autoOpen: false,
  modal: true,
  show: 'fold',
  hide: 'fold',
  height: 600,
  width: 450,
  buttons: {"Close" : 
    function({$(this).dialog('close')}}}
$("#viewer").dialog(dialogOpts);
});
/* ]]> */
</script>
(:sourceend:)

The body of the document is mostly unchanged, except for the viewer <div>:

(:source lang=html4strict:)
<div id="viewer" title="Image Viewer">
  <p><img/ style="width: 400px; height: 400px; border: 1pt solid #DDD; padding: 10px;"></p>
</div>
(:sourceend:)

An example of this is shown [[http://portfolio.tamaratemple.com/javascriptexamples/popupwindow3.html|here]].

There's not a whole lot of difference between the two jQuery examples, but the it's possibly simpler to use the jQuery UI dialog function as it is styled according to the jquery ui style sheet. jQuery styles can be created and downloaded via the `ThemeRoller application on the [[http://www.jqueryui.com|jQuery UI web site]].

----

So there you have it. Pop-ups in four different flavours. I know which one I'll be using from now on.

!![[How to create a stunning and smooth popup using jQuery - yensdesign - Tutorials, Web Design and Coding -> http://yensdesign.com/2008/09/how-to-create-a-stunning-and-smooth-popup-using-jquery/]]

>>quote<<
Nowadays, websites are more and more rich and interactive and users are becoming more and more critical with all things in websites. Using windows popup to show important information are in the air and We are going to learn how to create a stunning and great window popup from the scratch using jQuery in a simple and clean tutorial, the first one of this new blog. 
>><<



>>comment<<
Summary:a javascript web programming example showing how to make a popup link
Parent:(Technology.)JavaScript
IncludeMe:[[(Technology.)JavaScript]]
Categories:[[!Articles]]
Tags: javascript, web development popups
(:tags-hide javascript, web development popups :)
>><<

