>>comment<<
Summary:A solution to a question that came up in the [[php-db mailing list->http://lists.php.net/php.db]].
Parent:(Technology.)PHP
IncludeMe:[[(Technology.)PHP]]
Categories:[[!Articles]]
Tags: php, mysql, file uploads, table creation
(:tags-hide php, mysql, file uploads, table creation :)
>><<

[[#excerpt]]
A question[^[[http://news.php.net/php.db/48331 | Stuck trying to upload and grab file name]]^] came up about how to create and load a table from an uploaded CSV file directly from the temporary file rather than moving the temporary file to a permanent location first. This shows it can be done.
[[#excerptend]]

!! The problem.

A developer wanted to allow the user to upload a comma separated file (CSV) that contains various data they want available in a table. This is not as difficult as it seemed to be, one just needs a good understanding of how the [[MySQL @@LOAD DATA@@ -> http://dev.mysql.com/doc/refman/5.1/en/load-data.html]][^[[MySQL :: MySQL 5.1 Reference Manual :: 13.2.6 LOAD DATA INFILE Syntax-> http://dev.mysql.com/doc/refman/5.1/en/load-data.html]]^] statement works.

!! The solution.

!!! Example upload file

For the purposes of this article, we'll use the following file, @@table1.csv@@ to upload:

[@
a,b,c,d,e
f,g,h,i,j
k,l,m,n,o
@]

!!! Given a file upload form:

(:source lang=html4strict:)
<form enctype="multipart/form-data" method="POST">
    <input type="hidden" name="MAX_FILE_SIZE" value="30000" />
    Send this file: <input name="userfile" type="file"/>
    <input type="submit" value="Send File" />
</form>
(:sourceend:)

we can see that the resulting @@$_FILES@@ array will have an entry for @@userfile@@ in it with the particulars of the file uploaded, @@table1.csv@@.

For the above form, when a file @@table1.csv@@ is submitted, the @@$_FILES@@ array looks like:
[@
  array(1) {
  ["userfile"]=>
    array(5) {
      ["name"]=>string(10) "table1.csv"
      ["type"]=>string(8) "text/csv"
      ["tmp_name"]=>string(14) "/tmp/php6jIEPm"
      ["error"]=>int(0)
      ["size"]=>int(30)
    }
  }
@]


!!! Check if there is a file uploaded

Before attempting to process files, check that there are files to process:

(:source lang=php:)
   if (count($_FILES)<0) {
      // process uploaded files
      .
      .
      .
   }
(:sourceend:)

As you would if you were processing any other form submission, you should verify that the data is useful and not harmful.

!!! Assign some working variables

Inside the if above,

(:source lang=php:)
$table_name = preg_replace('/[^[:alnum:]_]+/','',$_FILES['userfile']['name']);
$temp_file = $_FILES['userfile']['tmp_name'];
(:sourceend:)

@@userfile@@ corresponds to the field in the form above.

Note the we munge the file name of the uploaded file (not the temporary file!) to make sure it will only contain characters valid for a MySQL table.

!!! How many fields will be in the table?

To use the @@LOAD DATA@@ statement, one has to know the fields that will be going in in order to create the table correctly. To do this, one can simply read the first line off the file and split it into fields, and count them. Given this is a CSV file, that might be more difficult than it sounds, as field items can contain commas if wrapped in double quotes. However, PHP comes to our rescue with the [[fgetcsv() -> http://php.net/manual/en/function.fgetcsv.php]][^[[PHP: fgetcsv - Manual ->http://php.net/manual/en/function.fgetcsv.php]]^] function. A rather simple function will do:

(:source lang=php:)
function csv_field_count($fn) {
  $fh = fopen($fn,'r') or die("Could not open $fn");
  $line = fgetcsv($fh);
  fclose($fh);
  $count = count($line);
  return $count;
}
(:sourceend:)

We will need to create a field for each field in the CSV file. 

>>important<<
Note that this method '''only''' works when the first line contains the '''maximum''' number of fields that ever appear in the file, otherwise you will lose data from the CSV file (MySQL silently drops the excess data.)
>><<

!!! Creating the table

Creating the table is now a matter of generating fields to hold the data. In this case, all data is assumed to simply be strings of undifferentiated text (i.e. no interpretation of integers, floats, and so on). Thus each field will by a @@VARCHAR@@ of length 255, which is a limit in Excel.

(:source lang=php:)
$count = csv_field_count($temp_name); // call our function from above
$sql = 'create table if not exists `'.$table_name.'` (';
for ($i=0; $i < $count; $i++) { 
  $sql_fields[] = "field{$i} varchar(255)";
}
// this goes last so as not to perturb any data from the CSV file
$sql_fields[] =   'id integer not null auto_increment primary key';
$sql .= implode(', ',$sql_fields);
$sql .= ')';
(:sourceend:)

If you want your table to have an autoincrementing index, such as shown here for field @@id@@, you need to put it '''last''' in order for it to be treated as @@NULL@@ by @@LOAD DATA@@ (and thus be autoincremented for each record).

Executing the above SQL statement will create a table for the CSV file that is derived from the CSV upload file name and its contents. When you run the query, ensure that no errors occured during it's execution.

(:source lang=php:)
$r = $db->query($sql) or die(sprintf("SQL error: %s [%d] %s",$sql,$db->errno,$db->error));
(:sourceend:)

Is the idiom when using @@mysqli@@.

!!! Loading the data.

The [[MySQL @@LOAD DATA@@ -> http://dev.mysql.com/doc/refman/5.1/en/load-data.html]] statement can be a little tricky. In order to get this to work easily, the main key is to use the @@LOCAL@@ option. Creating the SQL for the @@LOAD DATA@@ statement is basically:

(:source lang=php:)
$sql = "load data local infile '".$temp_file."' " .
  "into table `".$table_name."` " .
  "fields terminated by ',' optionally enclosed by '\"' " .
  "lines terminated by '\\n'";
(:sourceend:)

If you don't use the @@local@@ option, you have to deal with MySQL's shennanigans about file permissions based on the location of the temporary file, and using @@local@@ just makes everything a lot easier. (Note that if the file is really large, though, it can be a problem as this will send the contents of the file through the mysql pipe.)

[^#^]

!! Working example source code

(Note, you will need to create the database, assign permissions, and put the credentials in the source for this to work.)


(:source lang=php:)
<?php 
error_reporting(-1);
ini_set('display_errors',true);
ini_set('display_startup_errors',true);



?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html><head><title>file upload example</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<h1>file upload example</h1>

<h2>$_FILES</h2>
<pre>
  <?php var_dump($_FILES); ?>
</pre>

<?php
   if (count($_FILES)>0) {
     $table_name = preg_replace('/[^[:alnum:]_]+/','',$_FILES['userfile']['name']);
     $temp_file = $_FILES['userfile']['tmp_name'];


     $lscmd = 'ls -l '.$temp_file;
     echo '<h2>ls -l '.$temp_file.'</h2>'.PHP_EOL;
     echo '<pre>'.`$lscmd`.'</pre>'.PHP_EOL;

?>

<?php
   $db = new mysqli(DBHOST,DBUSER,DBPASS,DBNAME);
if (mysqli_connect_errno()) {
  die('Connection failure: ['.mysqli_connect_errno().'] '.mysqli_connect_error());
}

     $fields = explode(',',read_first_line($temp_file));
     $sql = 'create table if not exists `'.$table_name.'` (';
     for ($i=0; $i < count($fields); $i++) { 
       $sql_fields[] = "field{$i} varchar(50)";
     }
     $sql_fields[] =   'id integer not null auto_increment primary key';
     $sql .= implode(', ',$sql_fields);
     $sql .= ')';
?>
<h2>$sql for create table</h2>
<pre><?php var_dump($sql); ?></pre>

<?php
     $r = $db->query($sql) or die("SQL error: $sql [".$db->errno.'] '.$db->error);
     unset($sql);

$sql = "load data local infile '".$temp_file."' " .
  "into table `".$table_name."` " .
  "fields terminated by ',' optionally enclosed by '\"' " .
  "lines terminated by '\\n'";
?>
<h2>$sql for load data</h2>
<pre><?php var_dump($sql); ?></pre>
<?php
     $r = $db->query($sql) or die("SQL Error: $sql [".$db->errno."] ".$db->error);
?>

<h2>Verify data contents</h2>
     <p>Table <?php echo $table_name; ?></p>

<?php
     unset($sql);
     $sql = 'select * from `'.$table_name.'`';
     echo '<pre>$sql=';
     var_dump($sql);
     echo '</pre>';
     $r = $db->query($sql) or die("SQL Error: $sql [".$db->errno."] ".$db->error);
     echo '<p>data</p><pre>';
     while ($row = $r->fetch_row()) {
       echo var_dump($row);
     }
     echo '</pre>';
?>

     <?php } // end if count($_FILES)>0 ?>

<form enctype="multipart/form-data" method="POST">
    <input type="hidden" name="MAX_FILE_SIZE" value="30000" />
    Send this file: <input name="userfile" type="file"/>
    <input type="submit" value="Send File" />
</form>

</body>
</html><?php

function csv_field_count($fn) {
  $fh = fopen($fn,'r') or die("Could not open $fn");
  $line = fgetcsv($fh);
  fclose($fh);
  $count = count($line);
  return $count;
}


(:sourceend:)

!! TODO

* Verify data truncation if 2-n lines of the CSV file contain more fields than the first line.
* Ensure that the file uploaded is a CSV file.
* Ensure that the file name won't otherwise corrupt the MySQL data base.
* If the table already exists, decide what to do (truncate and load, replace, append, fail and inform).
* Verify that field data that exceeds the field length is truncated and does not produce an error.

