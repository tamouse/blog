>>comment<<
Summary: A set of notes on working with Rails' `ActionMailer
Parent: (Technology.)Rails
IncludeMe: [[(Technology.)Rails]]
Categories: [[!HowTos]], [[!Technology]], [[!Ruby]], [[!Rails]]
Tags: ruby, rails, actionmailer, howtos, notes, testing
(:tags-hide ruby, rails, actionmailer, howtos, notes, testing:)
Source: 
Posted: Sat Aug 24 10:39:09 2013
>><<
[[#excerpt]]
>>lead<<
[[ActionMailer -> http://guides.rubyonrails.org/action_mailer_basics.html]] allows a
Rails application to send and receive emails in a fashion similar to a
Rails controller. You can have multi-part bodies, templates,
attachments, and so on. It isn't quite a complete ecosystem, as you
need to have a transport for sending and recieving mail, and you need
to have a way of accurately testing your emails, so I'm going to write
some notes to complete that view.
>><<
[[#excerptend]]

!! First, read the documentation

[[The Rails Guides -> http://guides.rubyonrails.org/]] provide the
basics for getting up and running using 
[[ActionMailer -> #excerpt]].

In addition, the [[api -> http://api.rubyonrails.org/classes/ActionMailer/Base.html]]
provides more details on the usage of the methods in `ActionMailer.

!! Testing Considerations

Since we are all good TDD/BDD -ers (we are, right?), I'm going to
start with how you can set up your Rails environment for testing your
mailers.

The Rails Guides provide a section on 
[[testing your mailers->http://guides.rubyonrails.org/testing.html#testing-your-mailers]],
which you should go off and read right now.

!!! Delivery Mode @@:test@@

The simplest setup for this, especially useful for unit and functional
testing, is to set the delivery mode for action mailer to @@:test@@ in
your @@config/environments/test.rb@@ file:

(:source lang=ruby linenum tabwidth=2 header="config/environments/test.rb" :)
  # Tell Action Mailer not to deliver emails to the real world.
  # The :test delivery method accumulates sent emails in the
  # ActionMailer::Base.deliveries array.
  config.action_mailer.delivery_method = :test
(:sourceend:)

In a new Rails app, this is the default setting, so you don't really need to do anything in particular.

!!! `MailCatcher For Round-Trip Testing

While it is often the case that you should not bother to test the underlying delivery mechanisms, sometimes you really want to see what your email is going to look like in the eyes of the receiver. [[MailCatcher->http://mailcatcher.me/]] to the rescue. `MailCatcher is a nice utility that emulates an SMTP connection and provides a webmail view of the mails it catches. To use `MailCatcher, after you've installed it according to the instructions, is to set up your environments files appropriately. In this case, I'm going to set it in the @@development@@ environment.

(:source lang=ruby linenum tabwidth=2 header="config/environments/development.rb" :)
  config.action_mailer.deliver_method = :smtp
  config.action_mailer.smtp_settings = { :address => 'localhost', :port => 1025 }
(:sourceend:)

>>alert.alert-info<<
For feature or integration testing, using [[Technology.Cucumber|cucumber]] for example, it is better to set up a separate environment for that testing, different from unit testing that uses the @@test@@ environment. I add a @@cucumber@@ environment to the various configuration files (@@config/environments/cucumber.rb@@, @@config/database.yml@@, and so on) that lets me set up specific configuration variables like the above, without disturbing my unit test environment.
>><<

When you cause mails to be sent with your mailer, the mails can be seen by pointing your browser at [@http://localhost:1080@] and it works like your typical web mail reader. (You can't reply or forward, obviously.)

