>>comment<<
Summary: A Simple Way to Handle Multiple Checkboxes In a Form in PHP: Gathering, Storing and Retrieving Sets of Values, a Simple Approach
Parent:(Technology.)PHP
IncludeMe:[[(Technology.)PHP]]
Categories: [[!HowTos]], [[!Articles]]
Tags: php, forms, checkboxes, howtos
(:tags-hide php, forms, checkboxes, howtos :)
>><<

[[#excerpt]]
From a recent correspondence with someone on the PHP-DB list, the question of how to handle checkboxes in forms in PHP is something that comes up fairly often. This is a simple method that will work for very simple relationships.
[[#excerptend]]

!! The original email request

(:source lang=email -getcode header="The Original Email Request":)
From: Tamara Temple <tamouse.lists----->
To: -----
Subject: Re: Writing multi-checkbox values to MySQL
Date: Fri, 28 Jun 2013 06:21:16 -0500

> Hello,

> You were a tremendous help to me a few months ago when I was
> floundering with a PHP question.  Well, I thought I knew form
> processing until I got to multiple checkbox inputs and writing the
> values to a MySQL table.  The form I'm working on has three separate
> multi-checkbox fields and I'm having a bit of trouble writing the
> values to a table.  I've done some searching to find an example that
> matches what I'm trying to do but so far I haven't turned anything up.

This is one of the places things can get more complicated, and it's
often a source of confusion.

> Here's an abbreviated version of my form code:
>
> __________________________________________________________

(:sourcend:)

(:source lang=html4strict linenum tabwidth=4 header="html form":)
<html>
<head>
<title>Example Outreach Form</title>
<meta charset="utf-8" />
</head>
<body>
<h1>Example Outreach Form</h1>


<form method="post" action="outreach_activity_process.php">
<p><label for="your_name">Your Name:</label><br>
<input type="text" name="your_name" id="your_name" size="50" maxlength="255"></p>

<p><label for="proj_title">1. NLM Project Title (<i>if applicable</i>):</label><br>
<input type="text" name="proj_title" id="proj_title" size="50" maxlength="255"></p>
<p>6. Type(s) of Organization(s) Involved in Activity:
<br>
<input type="checkbox" name="org_type[]" value="Health Sciences Library"> Health Sciences Library
<br>
<input type="checkbox" name="org_type[]" value="Public Library"> Public Library
<br />
<input type="checkbox" name="org_type[]" value="Government Agency"> Government Agency
<br />
<input type="checkbox" name="org_type[]" value="Public Health"> Public Health
</p>
<p>7. Session Content:
<br />
<input type="checkbox" name="session_content[]" value="PubMed"> PubMed
<br />
<input type="checkbox" name="session_content[]" value="MedlinePlus"> MedlinePlus
<br />
<input type="checkbox" name="session_content[]" value="ClinicalTrials.gov"> ClinicalTrials.gov
<br />
<input type="checkbox" name="session_content[]" value="NCBI"> NCBI
</p>
<p><input type="submit" name="submit" value="Submit Activity Data" />
<input type="reset" name="reset" value="Clear the Form" /></p>
</form>

</body> </html>
(:sourceend:)

(:source lang=email -getcode:)
> Here's the corresponding processing code that I have so far:
(:sourceend:)

(:source lang=php linenum tabwidth=4 header="outreach_activity_process.php":)
<?php

include 'db.inc.php';

$fields = array('your_name','proj_title','org_type',’session_content’);

foreach ($fields as $field) {
        if (isset($_POST[$field])) $$field = mysqli_real_escape_string($link, $_POST[$field]);
}
        $sql = 'INSERT INTO
my_table(your_name,proj_title,org_type,session_content) VALUES("' . $your_name . '","' . $proj_title . '","' . $org_type . ‘”,”’ .
$session_content . ‘”)’;

        if (!mysqli_query($link, $sql))
        {
                $error = 'Error adding submitted Outreach activity details: ' . mysqli_error($link);
                include 'error.html.php';
                exit();
        }
        header('Location: .');
        exit();
?>
(:sourceend:)

(:source lang=email -getcode:)
> This code works well enough if only one box is checked but if I
> check more tha n one, only one value gets passed to the table.  I
> understand that in my form code I need to have the name values as
> 'org_type[]' and 'session_content[]' but beyond that I don't know what
> I'm doing. Shouldn't the foreach in the processing code pull in all
> the checkbox values?  How can I pass all checked values to the table?

There is both a "simple" and a "useful" way of addressing this, but they
aren't the same.

(:sourceend:)


!! The Simple Method

The simple one, is, as you have seen, to add the [@[]@] to your field
names. This will get you all the checked items. However, this is where
simple falls down: how will you usefull store and extract that info?
Some people answer this by packing all the info stored into a string in
a single field in the table. This works, and may be the way you choose
to go, but using this method tends to fall down when you have anything
even a bit more complex.

It will probably be instructive for you to make a simple html page
with the form you have above, and a simple script to receive the form
submission. In the simple script, just dump [@$_POST@] and examine the
contents to get an understanding of what gets returned. In your
[@outreach_activity_process.php@] file, at the top, after the opening
[@<?php@], put:

(:source lang=php linenum tabwidth=4 header="dump $_POST contents":)
header("Content-type: text/plain;");
var_dump($_POST);
exit();
(:sourceend:)

Then submit the form with different values checked and unchecked and you
can see what you're getting:

(:source lang=text linenum tabwidth=4 -getcode header="output from form submission":)
array(5) {
  ["your_name"]=>
  string(6) "glithc"
  ["proj_title"]=>
  string(4) "asdf"
  ["org_type"]=>
  array(2) {
    [0]=>
    string(23) "Health Sciences Library"
    [1]=>
    string(17) "Government Agency"
  }
  ["session_content"]=>
  array(2) {
    [0]=>
    string(11) "MedlinePlus"
    [1]=>
    string(18) "ClinicalTrials.gov"
  }
  ["submit"]=>
  string(20) "Submit Activity Data"
}
(:sourceend:)


So you can now see that [@$_POST['org_type']@] is an array that contains
[@"['Health Sciences Library', 'Government Agency']"@] (and similar for
session content). The question is how to store that usefully.

Some people simply pack the array values into a string with a separator
and save that in the table. That's usually dead simple:

(:source lang=php:)
$org_type = implode("|",$org_type);
$session_content = implode("|",$session_content);
(:sourceend:)

Then when you pull it out, do the opposite. Say you have your data
record that you've retrieved from the database in a variable $row, using
column keys as indexes:

(:source lang=php:)
$org_type = explode("|",$row['org_type']);
$session_content = explode("|",$row['session_content]');
(:sourceend:)

However, this breaks if you ever have an org_type or session_content
with the separator symbol ("|") in it. Instead of that, I would suggest
converting the array into a JSON data object and storing that, as it
makes getting the info back out in a more usable form easier:

(:source lang=php:)
$org_type = json_encode($org_type);
$session_content = json_encode($session_content);
(:sourceend:)

before you create the [@$sql@] statement.

Then, when you pull the data and use it someplace, just perform the
reverse operation.

(:source lang=php:)
$org_type = json_decode($row['org_type']);
$session_content = json_decode($row['session_content']);
(:sourceend:)

This is what things look like:

(:source lang=text -getcode:)
Encoded JSON strings:
org_type:
string(47) "["Health Sciences Library","Government Agency"]"
session_content:
string(36) "["MedlinePlus","ClinicalTrials.gov"]"

Decoded JSON strings:
org_type:
array(2) {
  [0]=>
  string(23) "Health Sciences Library"
  [1]=>
  string(17) "Government Agency"
}
session_content:
array(2) {
  [0]=>
  string(11) "MedlinePlus"
  [1]=>
  string(18) "ClinicalTrials.gov"
}
(:sourceend:)

Let's say you want to search for all outreach records that have a
session content of [@ClinicalTrials.gov@]? Since JSON data is '''cleartext''', you
can do something like:

(:source lang=sql:)
SELECT * FROM my_table WHERE `session_content` LIKE
   '%ClinicalTrials.gov%';
(:sourceend:)

This should give you all the records where the [@ClinicalTrials.gov@]
checkbox was set and saved. Then use the above [@json_decode@] calls to
extract the info.

Simple? Yes. But only for simple data. Go with this for now unless you
find yourself doing all kinds of things with such strings of data.

!! The Useful Method

What you really have here is a relationship between 3 kinds of data:
Outreaches, Organization Types, and Session Content. If you application
is going to use any of this information in a more general way, you will
probably want to use the "useful" method rather than the simple method
above. :)

What you will need to look at here are the relationships between the
kinds of data you are trying to work with. We need to step back a bit
from the code and think about the data models.

Your first model, it seems, might be called an Outreach. It seems to
consist of information regarding the person and their project.

Two other models show up now with the multiple check boxes: Organization
Types and Session Content although 'Session' is so overloaded inside
most web application softwares and frameworks that I would not use this
name. Looking at the actual values you've expressed there, I would call
these Sources instead of Sessions. (Don't let me railroad you into
choosing names, though!)

The Outreach has what is known as a one-to-many relationship with both
Organization and Source.

However, both Organization and Source can also be related to many
Outreaches.

Thus you end up with a many-to-many relationship between Outreach and
Organization, and a many-to-many relationship between Outreach and
Source.

If you haven't already, I suggest studying up on data base
relationships, especially things like one-to-one, one-to-many,
many-to-many, and how these are implemented in various database
systems, as they all involve setting things up in your database that
can become rather complicated and arcane, including such fun things as
foreign keys.

(In an object-relationship management system, such as employed by Rails,
this all becomes extremely trivial. In PHP, there are many frameworks
which also do this. This may be left for a future discussion.)

----


(:source lang=email -getcode:)
_____, for now, to get you started, I suggest following the "simple"
route I outlined above. The "useful" route can be picked up later,
provided you keep your application very modular, to allow easy
substituted parts.

Take care, hope this helps.
(:sourceend:)



-> &mdash; [[~tamara]] June 28, 2013, at 07:41 AM


