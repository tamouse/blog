[[#excerpt]]
Starting in Rails 3.2, it is possible to change the formatter used for the @@Rails.logger@@, but it requires a bit of metaprogramming that depends on understanding of the way @@Rails.logger@@ is created. '''Update:''' In Rails 4.0, it got even ''easier!''
[[#excerptend]]

!! Rails 4

This is the easiest implementation yet, as Rails 4 ActiveSupport::Logger is a direct inheritor of the famed Logger module.

Setting the formatter becomes a simple assignment of the formatter proc:

(:source lang=ruby linenum tabwidth=2  :)
Rails.logger.formatter = proc  do |sev, ts, prog, msg|
  "#{ts.strftime("%Y-%m-%dT%H:%M:%S")} #{sev} [#{prog}] #{msg}"
end
(:sourceend:)

Put this in @@config/initializers/@@ and you should be good to go!


!! Background

>>warning<<
''Note'': This depends on Rails 3.2 implementation of [@ActiveSupport::BufferedLogger@].
>><<

Starting in Rails 3.2, Rails.logger is an instance of [@ActiveSupport::TaggedLogging@], which in turn pulls in [@ActiveSupport::BufferedLogger@]. Neither of these modules permits directly setting the formatter for log messages. This initializer reaches into [@ActiveSupport::TaggedLogging@] to modify the [@ @logger@] instance variable, which is an instance of [@ActiveSupport::BufferedLogger@]. [@ActiveSupport::BufferedLogger@] contains an instance variable, [@@log@], which is an instance of [@Logger@]. With that information, we perform a nested instance_eval operation to set the formatter.

!! Implementation

Create a file in [@config/initializers/@] called [@logger.rb@]:

(:source lang=ruby linenum header="Rails.root/config/initializers/logger.rb":)
Rails.logger.instance_eval(%q{@logger.instance_eval(%q{@log.formatter= proc {|s,d,p,m| "#{s} #{d} #{m}\n" }})})
(:sourceend:)

What we're doing here is first reaching inside the [@Rails.logger@] object, and evaluating a bit of Ruby code on the [@@logger@] instance variable inside [@Rails.logger@].

Upon that instance variable, which is an [@ActiveSupport::BufferedLogger@] instance, we reach further inside and evaluate another bit of Ruby code on the [@@log@] instance variable, which is an instance of [@Logger@], to set the logging formatter, which is an anonymous procedure that returns the formatted string as we want it.

!! Pre-Rails 3.2

In 3.1, there is no [@ActiveSupport::TaggedLogging@] module, and Rails.logger is an instance of [@ActiveSupport::BufferedLogger@] instead. However, the 3.1 version does '''not''' use [@Logger@], and instead opts for doing it's own thing.

It is possible to change the Rails.logger in 3.1 by passing in a [@Logger@] instance to [@ActiveSupport::BufferedLogger.new@], giving you the ability to set the formatter. In [@Rails.app/config/initializers/logging.rb@], put:

(:source lang=ruby linenum header="Rails.root/config/initializers/logging.rb":)
require 'logger'

MyApp::Application::Logger = Logger.new(Rails.root.join("log",Rails.env+".log"))

Rails.logger.instance_eval(%Q{@log=ActiveSupport::BufferedLogger.new(#{MyApp::Application::Logger})})
Rails.logger.instance_eval(%q{@log.formatter= proc {|s,d,p,t| "#{s} #{d} #{m}\n" }})
(:sourceend:)

removing one level of [@instance_eval@]

!! References

!!! 4.0:
* https://github.com/rails/rails/blob/4-0-stable/activesupport/lib/active_support/logger.rb#L6

!!! 3.2:
* https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/buffered_logger.rb
* https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/tagged_logging.rb

!!! 3.1:
* https://github.com/rails/rails/blob/3-1-stable/activesupport/lib/active_support/buffered_logger.rb


>>comment<<
Summary:The default Rails.logger format in Rails 3.2 can be changed by adding a bit of metaprogramming in an initializer. 
Parent:(Technology.)RubyOnRails
includeme:[[(Technology.)RubyOnRails]]
Categories:[[!HowTos]], [[!Ruby]], [[!Rails]], [[!Technology]]
Tags: ruby, rails, logging, howtos, metaprogramming
(:tags-hide ruby, rails, logging, howtos, metaprogramming:)
>><<
