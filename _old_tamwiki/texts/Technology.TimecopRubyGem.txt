>>comment<<
Summary:A gem providing "time travel" and "time freezing" capabilities, making it dead simple to test time-dependent code. It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call.
Parent:(Technology.)Ruby
IncludeMe:[[(Technology.)Ruby]]
Categories:[[!Articles]], [[!HowTos]]
Tags: ruby, gem, testing, time
(:tags-hide ruby, gem, testing, time :)
>><<

[[#excerpt]]
>>nutshell<<
%center%[+ '''''Incomplete''''' +]
>><<

[[Timecop -> https://github.com/travisjeffery/timecop]] is a nifty ruby gem that is a great aid in testing code that is time-dependent. You can set the time a test will think it's running at, or freeze time to a certain point.
[[#excerptend]]

!!Links:
* [[Github repo for Timecop -> https://github.com/travisjeffery/timecop]]
* [[Blog post announcing Timecop with some usage info -> http://blog.smartlogicsolutions.com/2008/11/19/timecop-freeze-time-in-ruby-for-better-testing/]]
* [[Timecop README page -> https://github.com/travisjeffery/timecop/blob/master/README.markdown]]
* [[Timecop rdoc -> http://johntrupiano.rubyforge.org/timecop/]]

!! Basic usage

(:source lang=ruby linenum tabwidth=4 header="spec test":)
require 'spec_helper'

describe "Time" do
  
  context "now" do
    it "should report the current time" do
      Time.now.should == Chronic.parse("now")
    end
  end

  context "future" do
    before do
      Timecop.travel(1.week)
    end

    after do
      Timecop.return
    end

    it "should report the time a week from now" do
      Time.now.should == Chronic.parse("next week")
    end
  end
end
(:sourceend:)


!! Using Timecop with Chronic

Timecop, in combination with [[Chronic -> ChronicRubyGem]] makes for some dandy testing ability:

(:source lang=ruby linenum tabwidth=4 -getcode header="Using Timecop with Chronic":)
Timecop.travel(Chronic.parse('this tuesday 5:00')) do
  # test-fu
end
(:sourceend:)


