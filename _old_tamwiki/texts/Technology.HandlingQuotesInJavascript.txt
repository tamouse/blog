[[#excerpt]]
Javascript, like most other langages, has a variable type called @@string@@. Strings are typically delimited either by a single quote [@'@] or double quote [@"@]. If a single or double quote appears in a string, it must be somehow escaped so that Javascript handles it correctly.
[[#excerptend]]


This can get tricky when mixing Javascript, HTML and PHP.

!! Looking at some tricky data

Consider the following test data:

(:source lang=php -getcode linenum tabwidth=4:)
$testdata = array(
    array('title'=>"What's New",'link'=>'article/whats-new.html'),
    array('title'=>'Fred "Buster" Cox','link'=>'article/fred-buster-cox.html'),
);
(:sourceend:)

The first group's title contains a single quote, in this case acting as an apostrophe. The second group's title contains a pair of double quotes surrounding a nick name. These are handled differently in Javascript, PHP, and HTML, so all three must be considered when these are combined into one application.

!! What we want to have happen

The above test data will be processed by PHP as follows:

(:source lang=php -getcode linenum tabwidth=4:)
echo "<ul>\n";
foreach ($testdata as $key => $value) {
  $title_h = htmlprotect($value['title']);
  $title_j = jsprotect($value['title']);
  $link = $value['link'];
  echo "<li><span onclick=\"insertlink('$link','$title_j')\" class=\"linkSel\">$title_h</span></li>\n";
}
echo "</ul>\n";
(:sourceend:)

And the following shows the @@insertlink@@ javascript function:

(:source lang=javascript -getcode linenum tabwidth=4:)
function insertlink(l,t) {
  alert("Insert Link Function\n" + "title: " + t + "\n" + "link: " + l + "\n");
}
(:sourceend:)

The link and title from the test data will be passed through to the javascript function @@insertlink@@.

So, what we need to do is provide some means of protecting the quotes we need in the title entries.

!! Protecting the strings for HTML

For php, this is pretty straight-forward and a function is provided for us: [[htmlentities -> http://us2.php.net/manual/en/function.htmlentities.php]]

(:source lang=php -getcode:)
$title_h = htmlentities($value['title'],ENT_QUOTES,"utf-8");
(:sourceend:)

For the first title element, it produces:

(:source lang=html4strict -getcode:)
What&#039;s New
(:sourceend:)

For the second title element, it produces:

(:source lang=html4strict -getcode:)
Fred &quot;Buster&quot; Cox
(:sourceend:)

!! Protecting the strings for Javascript

Neither of these strings, however, will work if passed to the javascript function @@insertlink@@. So instead, we have to encode things differently, and in this case it is by no means obvious what to do. Some discussion on the php-general mailing list shows that context of the string is quite important. Here again, the relationship between PHP, HTML and Javascript is ''so'' important. 

!!! First try, addslashes

My first thought was that using the PHP function [[ @@addslashes@@ -> http://us2.php.net/manual/en/function.addslashes.php]] would do the trick.
(:source lang=php -getcode:)
$esc_title = addslashes($value['title']);
(:sourceend:)

This time, the first title element is:

(:source lang=javascript -getcode:)
'What\'s New'
(:sourceend:)

and the second title element is:

(:source lang=javascript -getcode:)
'Fred \"Buster\" Cox'
(:sourceend:)

Thus, what get's emitted by the php code fragment above looks like this:

(:source lang=html4strict -getcode linenum tabwidth=4:)
<ul>
<li><span onclick="insertlink('article/whats-new.html','What\'s New')" class="linkSel">What&#039;s New</span></li>
<li><span onclick="insertlink('article/fred-buster-cox.html','Fred \"Buster\" Cox')" class="linkSel">Fred &quot;Buster&quot; Cox</span></li>
</ul>
(:sourceend:)

but this produces errors in the second case. So something else is required.

!!! Second try: JSON

My second thought was to use JSON encoding. As of PHP 5.3, the @@json_encode@@ function allows the use of specific encodings. For this application, since the title strings get wrapped by single quotes in the HTML output, we only want to encode the single quotes.

(:source lang=javascript -getcode:)
$title_j = json_encode($title,JSON_HEX_APOS);
(:sourceend:)

but this didn't work at all, since the value returned by @@json_encode@@ is also surrounded by quotes:

(:source lang=html4strict -getcode:)
<ul>
<li><span onclick="insertlink('article/whats-new.html','"What\u0027s New"') class="linkSel">What&#039;s New</span></li>
<li><span onclick="insertlink('article/fred-buster-cox.html','"Fred \"Buster\" Cox"') class="linkSel">Fred &quot;Buster&quot; Cox</span></li>
</ul>
(:sourceend:)

which results in a Javascript error "Uncaught SyntaxError: Unexpected token ILLEGAL (repeated 2 times)".

So, something ''else'' is needed.

!!! Third try, Base 64

So I thought, "Base64"? 

This turns out to be a bit problematic, as javascript has no native support for base64 encoding/decoding. There are numerous resources that show how to write your own, and it turns out in Gecko and Webkit browsers, there is [[a pair of window functions available -> https://developer.mozilla.org/en/DOM/window.atob]] (once again leaving IE out in the cold). We'll try the @@atob@@ function here, using PHP to base64 encode the title data before sending it down:

(:source lang=php -getcode:)
$title_j = base64_encode($value['title']);
(:sourceend:)

and add this line in the @@insertlink@@ function before the @@alert@@:

(:source lang=javascript -getcode:)
t = window.atob(t);
(:sourceend:)

Which produces:

(:source lang=html4strict -getcode linenum tabwidth=4:)
<ul>
<li><span onclick="insertlink('article/whats-new.html','V2hhdCdzIE5ldw==')" class="linkSel">What&#039;s New</span></li>
<li><span onclick="insertlink('article/fred-buster-cox.html','RnJlZCAiQnVzdGVyIiBDb3g=')" class="linkSel">Fred &quot;Buster&quot; Cox</span></li>
</ul>
(:sourceend:)

Clicking on the two spans in the browser produces:

%frame% Attach:whatsnewalert.png

%frame% Attach:busteralert.png

!!! But what about Unicode?

This will work for standard ASCII strings, but utf-8 strings will be problematic, as it will give character out of range errors. So special encoding/decoding is needed that further deals with this, as explained on the [[btoa page -> https://developer.mozilla.org/en/DOM/window.btoa#Unicode_Strings]]. Taking that solution and reworking it for a PHP + Javascript application, we need to change the javascript protection to:

(:source lang=php -getcode:)
$title_j = base64_encode(rawurlencode($value['title']));
(:sourceend:)

and modify the @@insertlink@@ function to:

(:source lang=javascript -getcode:)
t = decodeURIComponent(window.atob(t));
(:sourceend:)

If we throw in some Unicode into the test data:

(:source lang=php -getcode:)
array('title' => 'Français ¶•ª', 'link' => 'article/special-chars.html'),
(:sourceend:)

Then run the page again, the following is the result of our new piece of Unicode data:

%frame% Attach:utf8alert.png

which seems to work, finally. But this isn't the final answer, as it still leaves IE out. Writing one's own Base64 encode/decode functions that are Unicode-safe seems to be something available on the [[net -> http://www.webtoolkit.info/javascript-base64.html]] [[in -> http://ntt.cc/2008/01/19/base64-encoder-decoder-with-javascript.html]] [[various -> http://stackoverflow.com/questions/246801/how-can-you-encode-to-base64-using-javascript]]  [[places -> http://www.nczonline.net/blog/2009/12/08/computer-science-in-javascript-base64-encoding/]].

!!Final Source Code
(:source lang=php linenum tabwidth=4:)
<?php
error_reporting(-1);
ini_set('display_errors',true);
ini_set('display_startup_errors',true);

$testdata =
  array(
	array('title' => "What's New", 'link' => 'article/whats-new.html'),
	array('title' => "Fred \"Buster\" Cox", 'link' => 'article/fred-buster-cox.html'),
	array('title' => 'Français ¶•ª', 'link' => 'article/special-chars.html'),
);

?>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8">
  <title>test quoting</title>
<script type="text/javascript">
function insertlink(l,t) {
  t = decodeURIComponent(window.atob(t));
  alert("Insert Link Function\n" + "Title: " + t + "\n" + "Link: " + l + "\n");
}
</script>
<style type="text/css" media="screen">
  .linkSel {background-color: yellow} 
</style>  
  </head>
<body>
<h1>test quoting</h1>

<pre><?php var_dump($testdata); ?></pre>


<?php 
  echo "<ul>\n";
foreach ($testdata as $key => $value) {
  $title_h = htmlentities($value['title'],ENT_QUOTES,"utf-8");
  if (empty($title_h)) {
    $title_h = $value['title']; // put it out as is?
  }
  $title_j = base64_encode(rawurlencode($value['title']));
  $link = $value['link'];
  echo "<li><span onclick=\"insertlink('$link','$title_j')\" class=\"linkSel\">$title_h</span></li>\n";
}
echo "</ul>\n";
?>

</body>
</html>
(:sourceend:)
>>comment<<
Summary:Handling a sticky problem in Javascript 
Parent:(Technology.)JavaScript
Categories:[[!Articles]], [[!HowTos]]
Tags: javascript, php, html, programming, issues, strings
(:tags-hide  javascript, php, html, programming, issues, strings:)
>><<


