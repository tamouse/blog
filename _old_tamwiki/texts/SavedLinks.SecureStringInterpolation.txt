(:if false:)
Summary:an article on how to secure your web site from attacks based on interpolating strings.
Parent:SavedLinks(.HomePage)
IncludeMe:[[SavedLinks.HomePage]]
Tags:programming, security, web development, string interpolation, bookmark
(:tags-hide programming, security, web development, string interpolation, bookmark :)
Categories: [[!ComputerStuff]]
(:ifend:)
(:title Secure String Interpolation:)

Link: %newwin% http://google-caja.googlecode.com/svn/changes/mikesamuel/string-interpolation-29-Jan-2008/trunk/src/js/com/google/caja/interp/index.html

''Mike Samuel - 29-Jan-2008''

>>quote<<

String Interpolation, the "Hello $name_of_planet!" style of generating strings, familiar to Perl, PHP, and Ruby programmers, provides a simple and intuitive way of specifying content in many languages from HTML to SQL to URLS.

It also makes it very easy to introduce serious security problems. SQL Injection, Script Injection, XML External Entity Injection (XXE), and Cross Site Scripting (XSS) attacks are results of a failure to properly escape user-supplied data before splicing it into a web-page, a SQL query, or a shell command.

These problems are not inherent to String Interpolation though. The strings themselves contain more than enough information to figure out how to safely incorporate user data. Consider the code snippet:

(:source lang=html4strict  tabwidth=4 -getcode:)
<html>
  <head>
    <title>Hello $name_of_planet!</title>
  </head>
  <body>
    <h1>We come in peace.</h1>
    <p>Take us to your
      <abbr title="May (s)he live for many $time_units!">
        $title_of_potentate
      </abbr>.
    </p>
  </body>
</html>
(:sourceend:)

It should be clear that the programmer intended the substitutions $name_of_planet and $title_of_potentate to be text in an html page, and that $time_units is part of an HTML attribute. Obviously, the browser can handle all those distinctions when the time comes to render a page, but at the time the string interpolation is executed, it has no way to tell that one string is HTML, and another is not. The problem is one of early binding &mdash; acting before enough information is available to make good decisions.

Below I discuss the benefits of string interpolation, outline some of the alternatives to string interpolation, show how interpolation can benefit from late binding, and explain how it can be bolted onto languages like Javascript. I use Javascript throughout the examples since Javascript examples can be run in browser, but the security problems discussed herein occur in code written in many languages.
>><<

