!! Update:

While the below is useful and interesting in many cases, making a class [@Enumerable@] may be overkill in many cases. You can also simply return an [@Enumerator@] for the [@:each@] method to get much the same capability. As outlined in http://blog.arkency.com/2014/01/ruby-to-enum-for-enumerator/,
use of [@Enumerable@] should be limited to classes which are actually collections.

>>quote<<
In such case I prefer to go Java-way and provide external Enumerator for those who need to call one of the many useful Enumerable methods on the collection. I think that we need to ask ourselves a question: Is that class a collection?. If it really is then it absolutely makes sense to include Enumerable. If however it is not a collection, but rather a class which happens contain something else, or providing a collection, well then maybe external Enumerator is your solution.
>><<

See [[(Technology.)HowToUsingEnumeratorInsteadOfEnumerable]].


(:nolinkwikiwords:)
>>quote<<
! [[http://andreacfm.com:80/ | Andrea's Blog]]

! Make Your Ruby Classes Comparable and Enumerable

Jul 27th, 2011 

Something very cool in ruby are mixins. As the word says mixin is a technique to mixed a module into a class using the statement &ldquo;include&rdquo;. While including a module is a very large topic I focused on the opportunity to include module defined in the Ruby standard library into your class to take advantages of the methods and abilities that these modules provide. The [[http://www.ruby-doc.org/core/classes/Comparable.html | Comparable]] module in ruby define methods like [@ < <= <==> >= > between?@]. What if I want to achieve is making my class instances '''comparable''' so that I can ask to ruby if [@class_a > class_b@].

Here an example:

(:source lang=ruby linenum tabwidth=4 header="Comparable":)
class Person
   include Comparable

   attr_reader :name

   def initialize(name)
     @name = name
   end

   def <=> other
     self.name <=> other.name
   end 
end 

p1 = Person.new 'Andrea' 
p2 = Person.new 'Fabio' 
p3 = Person.new 'Luigi' 

p p1 < p2 #true 
p p2 > p1 #false
(:sourceend:)


The Person class include the module Comparable and implements one single method (&lt;=&gt;). This methods is used by the Comparable module to perform the logic of any of the operator that the module provide.In the example I say to the Person class to compare instances through the @name attribute. But we even gain more functionalities. Once that our classes are able to be compared they are also able to be sorted if placed inside an array. Amazing!!!

(:source lang=ruby linenum tabwidth=4 -getcode header="sorting":)
[p2,p3,p1].sort #[#<Person:0x104f09d80 @name="Andrea">, #<Person:0x104f09d30 @name="Fabio">, #<Person:0x104f09ce0 @name="Luigi">]
(:sourceend:)

But what if I want to find Persons by name?? Then we can use for this purpose the [[http://www.ruby-doc.org/core/classes/Enumerable.html | Enumerable]] module. What we can do is to create a custom PersonEnumerator class like this:

(:source lang=ruby linenum tabwidth=4 header="Enumerable":)
class PersonEnumerator
   include Enumerable

   attr_reader :persons

   def initialize(persons)
     @persons = persons
   end

   def each &block
     @persons.each do |person|
       if block_given?
         block.call person
       else
         yield person
       end
     end
   end
end 

en = PersonEnumerator.new [p1,p2,p3] 
p en.find {|person| person.name == 'Andrea'} #<Person:0x10e61d4d8 @name="Andrea">
(:sourceend:)

Including the Enumerable module and implementing the each method we gain most of the many methods that the module expose. In our example I '''find''' a person object passing a block that filters each Person by name.

The mixin technique applied to the ruby standard library is very powerful. Your code code gets more elegant and more '''Ruby Way''' for you to maintain and for your collaborator to read and understand

Ruby amazes me any day more!

Posted by Andrea Campolonghi Jul 27th, 2011  [[http://andreacfm.com:80/blog/categories/ruby/ | Ruby]]

Copyright &copy; 2013 - Andrea Campolonghi - Powered by [[http://octopress.org | Octopress]]
>><<
(:linkwikiwords:)

!! And a fun example, combined with using Struct

(:source lang=ruby linenum header="struct_play":)
class MyClass < Struct.new :stuff, :and, :nonsense
  def initialize
    self.stuff = Array.new
    self.and = Hash.new
    self.nonsense = String.new
  end
  
  include Enumerable

  # Defining the #each method gives a whole lot of other goodies coming from Enumerable
  def each &block
    self.stuff.each do |s|
      if block_given?
        block.call s
      else
        yield s
      end
    end
  end

  # This little ditty appends objects to the stuff inst_var so you can do
  # neat things like:
  #
  #     c << 1 << 'a' << :one
  def << obj
    self.stuff << obj
  end
  
  # Give a nice output for the object
  def to_s
    "#{self.nonsense.to_s} #{self.and.inspect} #{self.stuff.inspect}"
  end
  
  # Provides a means of getting at both containers in the class.
  # Integer values for idx simply return the value at stuff[idx] while
  # Non-Integer values act as keys to the hash and.
  def [] idx
    case idx
    when Integer
      self.stuff[idx]
    else
      self.and[idx]
    end
  end

  # Counterpart to the above, this is the setter
  def []= idx, obj
    case idx
    when Integer
      self.stuff[idx]=obj
    else
      self.and[idx]=obj
    end
  end
  
  # Makes this class's objects comparable, so they can be sorted
  # and other neat tricks.
  include Comparable

  # The basic comparison operator.
  # In this case, it's just the nonsense content that's being compared.
  def <=> other
    self.nonsense <=> other.nonsense
  end

end
(:sourceend:)

Which lets me do fun things like this:

(:source lang=text:)
irb(main):001:0> load 'struct_play.rb'
true
irb(main):002:0> c = MyClass.new
#<struct MyClass stuff=[], and={}, nonsense="">
irb(main):003:0> c << 1 << 'a' << :one
[1, "a", :one]
irb(main):004:0> c.nonsense = "This is nonsense"
"This is nonsense"
irb(main):005:0> c[:a] = %{some words of dissent}
"some words of dissent"
irb(main):006:0> c['wax'] = %w{wax on wax off}
["wax", "on", "wax", "off"]
irb(main):007:0> puts c.to_s
This is nonsense {:a=>"some words of dissent", "wax"=>["wax", "on", "wax", "off"]} [1, "a", :one]
nil
irb(main):008:0> c1 = MyClass.new
#<struct MyClass stuff=[], and={}, nonsense="">
irb(main):009:0> c1.nonsense = "Another fine mess"
"Another fine mess"
irb(main):010:0> c2 = MyClass.new
#<struct MyClass stuff=[], and={}, nonsense="">
irb(main):011:0> c2.nonsense = "the bees knees"
"the bees knees"
irb(main):012:0> [c,c1,c2].sort
[#<struct MyClass stuff=[], and={}, nonsense="Another fine mess">, #<struct MyClass stuff=[1, "a", :one], and={:a=>"some words of dissent", "wax"=>["wax", "on", "wax", "off"]}, nonsense="This is nonsense">, #<struct MyClass stuff=[], and={}, nonsense="the bees knees">]
irb(main):013:0> [c,c1,c2].each {|x| puts x}
This is nonsense {:a=>"some words of dissent", "wax"=>["wax", "on", "wax", "off"]} [1, "a", :one]
Another fine mess {} []
the bees knees {} []
[#<struct MyClass stuff=[1, "a", :one], and={:a=>"some words of dissent", "wax"=>["wax", "on", "wax", "off"]}, nonsense="This is nonsense">, #<struct MyClass stuff=[], and={}, nonsense="Another fine mess">, #<struct MyClass stuff=[], and={}, nonsense="the bees knees">]
irb(main):014:0> [c,c1,c2].sort.each {|x| puts x}
Another fine mess {} []
This is nonsense {:a=>"some words of dissent", "wax"=>["wax", "on", "wax", "off"]} [1, "a", :one]
the bees knees {} []
[#<struct MyClass stuff=[], and={}, nonsense="Another fine mess">, #<struct MyClass stuff=[1, "a", :one], and={:a=>"some words of dissent", "wax"=>["wax", "on", "wax", "off"]}, nonsense="This is nonsense">, #<struct MyClass stuff=[], and={}, nonsense="the bees knees">]
irb(main):015:0> c.and.keys
[:a, "wax"]
irb(main):016:0> c.keys
NoMethodError: undefined method `keys' for #<MyClass:0x97f50f4>
	from (irb):16
	from /home/tamara/.rvm/rubies/ruby-2.0.0-p195/bin/irb:13:in `<main>'
irb(main):017:0> 
(:sourceend:)




>>comment<<
Summary: Something very cool in ruby are mixins. As the word says mixin is a technique to mixed a module into a class using the statement 'include'
Tags: ruby, Comparable, Enumerable
(:tags-hide ruby, Comparable, Enumerable:)
(:title Make your ruby classes Comparable and Enumerable - Andrea's Blog:)
Source: http://andreacfm.com/2011/07/27/make-your-ruby-classes-comparable-and-enumerable/
Parent: (Technology.)Ruby
includeme: [[Technology.Ruby]]
Categories:[[!Articles]]
>><<

Page saved at: Sun, 17 Feb 2013 08:10:08 -0600

