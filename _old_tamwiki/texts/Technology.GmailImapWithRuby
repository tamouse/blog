>>comment<<
Summary:Notes about how to connect with gmail via IMAP using Ruby
Parent:(Technology.)Ruby
IncludeMe:[[(Technology.)Ruby]]
Categories:[[!HowTos]]
Tags: ruby, gmail, imap, howtos
(:tags-hide ruby, gmail, imap, howtos :)
>><<

[[#excerpt]]
I've been moving my mail handling away from the [[http://gmail.com|gmail]] web site because
Google broke my mail workflow. I'm now using fetchmail
to pull over mail in real time. I wanted to be able to access the
folders in gmail as well, and was casting about for a way to do
that. None of the gems seemed workable, so I decide to start
experimenting with
[[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html| Net::IMAP]] in the standard ruby library.
[[#excerptend]]

!! Setting up a connection to gmail

Actually, this was real simple, thanks to
[[http://blog.ethanvizitei.com/2008/06/using-ruby-for-imap-with-gmail.html | this blog post]], which gives the final answer at the end.

(:source lang=ruby linenum:)
gmail = Net::IMAP.new('imap.gmail.com', :port => 993, :ssl => true)
gmail.login(username, password)
(:sourceend:)

And we're connected.

!! What folders are in my gmail account?

This took a bit of reading and re-reading to figure out, but it's
actually more straight-forward than it seems.

The
[[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-list|[@#list@]]]
method is what we're looking for:

(:source lang=ruby linenum:)
all_folders = gmail.list '/', '*'
pp all_folders.map(&:name)
["Apple Mail To Do",
 "Business",
 "Career",
 "Career/HPAA Jobs",
 # ...snippy 
 "Tech General",
 "Tech General/AWS Stuff",
 # ...snippy
 "Tech General/PHP-General",
 "Tech General/PmWiki",
 # ...snippy
 "[Gmail]",
 "[Gmail]/All Mail",
 "[Gmail]/Archive"]
(:sourceend:)

!!! Validating folder names

>>important<<
When you get all the folders like this, you have to be careful. If you have a folder that includes a forward slassh  (/) in the name, the way the list method works assumes there is a parent folder for each element delimeted by the slash(es). If this isn't the case, methods that use the folder (mailbox in IMAP parlance) will throw an exception: [@Net::IMAP::NoResponseError@], so wrap whatever you're doing in a [@begin-rescue@] block.
>><<

(:source lang=ruby linenum header="Checking if this folder is valid":)
def valid_folder?(folder)
    begin
      gmail.examine(folder)
      true
    rescue Net::IMAP::NoResponseError => e
      if (e.to_s =~ /Invalid folder/) || (e.to_s =~ /Unknown Mailbox/)
        false
      else
        raise e
      end
    end      
end
(:sourceend:)




!! Choosing a folder

Again, easily done with the [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-select|[@#select@]]] method, simply give it the name of the folder snagged from the list above:

(:source lang=ruby linenum:)
folder = gmail.select("Tech General")
(:sourceend:)

Alternatively, if you are only going to read from the folder, use the [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-examine|[@#examine@]]] method:

(:source lang=ruby linenum:)
folder = gmail.examine("Tech General")
(:sourceend:)


!! Getting the number of messages in a folder

To retrieve the number of messages in a folder, you use the [[|[@#status@]]] method. The [@#status@] method takes two arguments, the folder name, and an array of the kinds of status you want. To just get a count of all the messages, use the [@"MESSAGES"@] key:

(:source lang=ruby linenum:)
gmail.status("Tech General", ["MESSAGES"])["MESSAGES"] # => 115
(:sourceend:)

!! Fetching messages

Fetching messages is a little tricky. In the very good
stackoverflow.com question
[[http://stackoverflow.com/questions/1101101/how-to-read-the-body-text-of-an-email-using-rubys-net-imap-library|"How to read the body text of an email using Ruby's Net::IMAP library]], in
the answers that talk about using the [[|[@mail@]]] gem:

(:source lang=ruby linenum:)
require 'mail'

mail = Mail.read_from_string(gmail.fetch(-1,'RFC822').first.attr['RFC822']) # retrieves the last email
body = mail.body
from = mail.from
(:sourceend:)

