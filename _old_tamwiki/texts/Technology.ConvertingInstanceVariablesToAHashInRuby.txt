[[#excerpt]]
On a recent post in ruby-talk, the question was asked how to convert something to [[YAML]]. Extending this generally to [[Ruby]] Objects, I went searching for something that would work besides a brute-force creation of a Hash.

Finding a useful answer on [[http://stackoverflow.com/questions/7638982/better-way-to-convert-several-instance-variables-into-hash-with-ruby|stackoverflow]] and digging into the [[code -> https://github.com/rails/rails/blob/c20838596bcb40bf1590f27f6ba735d0a5f4fe8f/activesupport/lib/active_support/core_ext/object/instance_variables.rb#L12]] given in one of the responses, I came up with the following, which can be [[monkey-patched -> WhatsAllThisAboutMonkeyPatchingInRuby]] into Object.
[[#excerptend]]

'''Update:''' for a neat way to do this with nested ActiveRecord models, see Technology/CreatingNestedHashFromNestedActiveRecord.

!! Introduction

The original request was to be able to generate the following YAML from a result:

(:source lang=yaml linenum tabwidth=4  header="YAML result":)
---
- name: device-1
  parameters:
    app_folder: deploy_project
    app_id: "1"
    tar_file: deploy_project.tar.gz
    profile_id: "3"
    version_id: "2"
  classes:
  - install
(:sourceend:)

If one were to take that and feed it back into Ruby via YAML.load, one gets the following structure:

(:source lang=ruby linenum tabwidth=4  header="ruby structure from yaml":)
[{"name"=>"device-1",
  "parameters"=>{"app_folder"=>"deploy_project",
     "app_id"=>"1",
     "tar_file"=>"deploy_project.tar.gz",
     "profile_id"=>"3",
     "version_id"=>"2"},
   "classes"=>["install"]}]
(:sourceend:)

So an obvious structure is revealed. However, simply brute-forcing this from a result seemed not quite what I would want, so I went searching.

!! What happens if you yamlize an Object directly

Let's say we build a couple of classes that can be used with the above information (ignoring that it may have come from a database for the non).

(:source lang=ruby linenum tabwidth=4  header="Deply and Params classes":)
class Deploy
  attr_accessor :name, :parameters, :classes
  def initialize(n,p,c)
    self.name = n
    self.parameters = p
    self.classes = c
  end
end

class Params
  attr_accessor :folder, :id, :file, :profile, :version
  def initialize(fo, id, fi, p, v)
    self.folder = fo
    self.id = id
    self.file = fi
    self.profile = p
    self.version = v
  end
end
(:sourceend:)

If we load up an array with the above classes using the data from the original request, we can see this:

(:source lang=ruby:)
1.9.3-head :074 > d=Array.new
 => [] 
1.9.3-head :075 > d<<Deploy.new('dev01',Params.new('dep1',1,'dep1.tar.gz',1,1),['install'])
 => [#<Deploy:0xa06bf80 @name="dev01", @parameters=#<Params:0xa06bfbc @folder="dep1", @id=1, @file="dep1.tar.gz", @profile=1, @version=1>, @classes=["install"]>] 
1.9.3-head :077 > puts d.to_yaml
---
- !ruby/object:Deploy
  name: dev01
  parameters: !ruby/object:Params
    folder: dep1
    id: 1
    file: dep1.tar.gz
    profile: 1
    version: 1
  classes:
  - install
 => nil 
(:sourceend:)

Simply yamlizing an Object doesn't give us what we want -- when loaded, it will look for the classes Deploy and Params to create objects from. We don't want this, exactly, we just want it in the form originally requested.

!! How to just get the instance variables into a Hash?

In [[http://stackoverflow.com/questions/7638982/better-way-to-convert-several-instance-variables-into-hash-with-ruby | this question]] on stackoverflow, one of the respondents points to the @@instance_values@@ method on @@Object@@ in [[RubyOnRails|Rails]] ([[github code -> https://github.com/rails/rails/blob/c20838596bcb40bf1590f27f6ba735d0a5f4fe8f/activesupport/lib/active_support/core_ext/object/instance_variables.rb#L12]]). This is pretty simple, and could be more helpful in a non-Rails environment. I decided to write a recursive version that can be monkey-patched into the Object class:

(:source lang=ruby linenum tabwidth=4  header="instance_values_recurse":)
class Object
  def instance_values_recurse
    Hash[instance_variables.map do |name|
           [name.to_s[1..-1],
            instance_variable_get(name).instance_variables.count < 1 ?
            instance_variable_get(name) :
            instance_variable_get(name).instance_values_recurse
           ]
         end
        ]
  end
end
(:sourceend:)

Using that same data above, we can get;

(:source lang=ruby:)
1.9.3p335 :035 > puts d.map{|e| e.instance_values_recurse}.to_yaml
---
- name: dev01
  parameters:
    folder: dep1
    id: 1
    file: dep1.tar.gz
    profile: 1
    version: 1
  classes:
  - install
(:sourceend:)

and Voila!

This won't do *everything* in-and-of-itself. For instance, if any of the instance variables consists of an Array of Objects, it won't recurse into them. Refinement will be needed.

Still, an interesting exercise!




>>comment<<
Summary:How To: Convert an Object's Instance Variables to a Hash (recursively) in Ruby
(:title How To: Converting Instance Variables to a Hash in Ruby:)
Parent:(Technology.)Ruby
IncludeMe:[[(Technology.)Ruby]]
Categories:[[!Technology]], [[!Languages]], [[!Ruby]], [[!HowTos]]
Tags: ruby, languages, technology, howto
(:tags-hide ruby, languages, technology, howto :)
>><<
