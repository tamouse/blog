[[#excerpt]]
Using JavaScript, one can construct a set of timers to schedule an inactivity timeout. Inactivity is indicated by the lack of keyboard and mouse button presses. If there is a way to indicate mouse movement, that would be useful, as well. We'll be using [[jQuery]], so look out for that, and remember to include the [[jQuery]] javascript in your code.
[[#excerptend]]


----

[[#example1]]
!! Example 1
First, assuming we are using [[PHP]], we can set a couple of configuration variables:

(:source lang=php linenum:)
 // Number of milliseconds to wait before timing out the page due to inactivity 
 $page_timeout = 1000 * 60 * 30; // 30 minutes 
 $page_timeout_warning_timeout = 1000 * 30; // 30 seconds 
(:sourceend:)

Next, in the code that emits the header:

(:source lang=javascript linenum tabstop=2:)
 <?php if ($page_timeout > 0) { ?>
	var autoCloseTimer;
	var timeoutObject;
	var timePeriod = <?php echo $page_timeout ?>;
	var warnPeriod = <?php echo $page_timeout_warning_timeout ?>;

	function promptForClose()
	{
	$('#autoCloseDiv').css('display','block');
	 autoCloseTimer = setTimeout("definitelyClose()",warnPeriod);
	}


	function autoClose()
	{
		//alert("auto close prompt");
	 $('#autoCloseDiv').css('display','block');
	 autoCloseTimer = setTimeout("definitelyClose()",timePeriod); //starts countdown to closure
	}

	function cancelClose()
	{
		
	 clearTimeout(autoCloseTimer); //stops auto-close timer
	 $('#autoCloseDiv').css('display','none'); //hides message
	//alert("canceled close");
	}

	function resetTimeout()
	{
		//alert("timer reset");
	  clearTimeout(timeoutObject); //stops timer
	  timeoutObject = setTimeout("promptForClose()",timePeriod); //restarts timer from 0
	}


	function definitelyClose() {
		//alert("logging off")
	    location.href="logoff.php"; // for example, log the user off if inactive
	}
 <?php } // close if ($page_timeout) ?> 
(:sourceend:)

Next, we need to set the @@<body>@@ tags appropriately:

(:source lang=html4strict linenum:)
 <body onLoad ="timeoutObject=setTimeout('promptForClose()',timePeriod);"<?php
		// only set the triggers if a user is logged in
		if ($page_timeout > 0): ?> 
		onkeydown='resetTimeout();' onmousedown='resetTimeout();'
		<?php endif: ?>>
(:sourceend:)

Finally, we create a @@<div>@@ in the @@<body>@@ of the document to serve as our pop-up indicator that the session is closing:

(:source lang=html4strict linenum:)
	<div id='autoCloseDiv' style="display:none;">
		<h3><?php echo get_vocab('inactivitywarning') ?></h3>
		<p><?php echo get_vocab('warningmessage') ?></p>
		<div class="submit_buttons">
		<input type='button' value='<?php echo get_vocab('closebutton') ?>' onclick='definitelyClose();' />
		<input type='button' value='<?php echo get_vocab('cancelbutton') ?>' onclick='cancelClose();' />
		</div>
	</div>
(:sourceend:)

''Note use of language substitution function @@get_vocab()@@. This is done with [[PHPLocalization]].''

In addition, the following [[CSS]] is useful for displaying the @@autoCloseDiv@@:

(:source lang=css linenum:)
 #autoCloseDiv {
	 background-color: #FFF;
	color: #000 
	margin-left: -100px;
	margin-top: -100px; 
	width: 200px; 
	height: 200px; 
	position: absolute; 
	top: 50%; 
	left: 50%; 
	text-align: center; 
	border: 1px solid #999;
 }
(:sourceend:)

'''Edit:''' Turns out there is a mouse movement event handler. jQuery example of such is shown at [[http://api.jquery.com/mousemove/ | jQuery mousemove handler]]. So for the above example, adding the following should suffice:

(:source lang=html4strict linenum:)
  <script>
    $("body").mousemove(resetTimeout());
  </script>
(:sourceend:)

----

[[#example2]]
!! Example 2

This is a more complete [[jQuery]] UI example. Here, I've recast the functions as anonymous functions assigned to variables, so they can be used in assignments to the jQuery callbacks. Also, not that everything that is needed by the code inside the $(document).ready function must reside within that function's scope. If you access something outside that scope, the [[jQuery]] UI functions will fail, and you'll get very odd results. Also, there is additional code below that will reset the timeout functions once in the logged-off state.

(:source lang=javascript linenum:)
 <script type="text/javascript" charset="utf-8">
 /* <![CDATA[ */ 
 $(function(){
	var autoCloseTimer;
	var timeoutObject;
	var timePeriod = 5 * 1000;  // n * 1000 - number of seconds until timeout
	var warnPeriod = 5 * 1000; // n * 1000 - number of seconds to show warning before timing out

	var promptForClose = function()
	{
		$('#autoCloseDiv').dialog('open');
		autoCloseTimer = setTimeout(definitelyClose,warnPeriod);
	}

	var cancelClose = function()
	{
		$('#autoCloseDiv').dialog('close'); //hides message
		clearTimeout(autoCloseTimer); //stops auto-close timer
		resetTimeout();
	}

	var  resetTimeout = function()
	{
		clearTimeout(timeoutObject); //stops timer
		if (timePeriod > 0) {
			timeoutObject = setTimeout(promptForClose,timePeriod); //restarts timer from 0
		}
	}


	var definitelyClose = function() {
		clearTimeout(autoCloseTimer);
		$('#autoCloseDiv').dialog('close');
		timePeriod = 0;
		$("#junk-text").hide('slow');
		$("#logged-off").show('slow');
	}

	$("#logged-off").hide();
	$("#logged-off").text("Logged off - click to reset");
	$("#logged-off").addClass('ui-state-highlight');
	$("#logged-off").addClass('ui-corner-all');
	$("#logged-off").css({'width' : '100px', 'text-align' : 'center'});
	$("#logged-off").attr('title','click to reset');
	$("#logged-off").click(function(){
		timePeriod = 5 * 1000;
		resetTimeout();
		$(this).hide('slide');
		$("#junk-text").show('slow');
                return false; // prevent anything else from happenning
	});
	
	$('#inactivitytimeout').click(resetTimeout);
	$('#inactivitytimeout').keypress(resetTimeout);
	$('#topnav a:first-child').focus(); // must provide a focus on the body for something to accept a keydown event

	resetTimeout();
	var warnSeconds = warnPeriod / 1000;
	$("#warn-seconds").text(warnSeconds);
	$("#autoCloseDiv").dialog({
		autoOpen: false,
		buttons: {
			'Log off' : definitelyClose,
			'Continue' : cancelClose
		}
	});

 })
	
 /* ]]> */
 </script>
(:sourceend:)

The page body would have:

(:source lang=html4strict linenum:)
 <body id="inactivitytimeout" title="inactivitytimeout" lang="en-US">
	<div id="autoCloseDiv" title="Warning!" style="display: block">
		<span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>
		Session will close in <span id="warn-seconds"></span> seconds.
	</div>

 <div id="topnav"><a href="#"></a></div>
 <div id="content">
 <p id="junk-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum sem dui, laoreet ut scelerisque quis, dictum vitae nisi. Nulla facilisi. Nunc a turpis sed lectus hendrerit pulvinar at vel sapien. Vivamus placerat auctor iaculis. Nam gravida gravida felis, in viverra eros vehicula at. Praesent vulputate blandit lectus, ut scelerisque erat laoreet auctor. Maecenas blandit pharetra nisl, sit amet pretium lorem congue non. Praesent dignissim, lectus nec tristique lobortis, felis metus placerat risus, id fermentum lectus nisl id mauris. Nullam viverra accumsan massa eget congue. Nam neque lacus, tempus vel fringilla eget, molestie dapibus diam. Proin sapien est, luctus vitae congue eget, ultricies a enim. </p>
 <p id="logged-off"></p>
 </div>
(:sourceend:)


(:Summary:How to implement an inactivity timeout on a web page:)
(:Parent:(Technology.)JavaScript:)
(:IncludeMe:[[(Technology.)JavaScript]]:)
(:Categories:[[!HowTos]]:)
(:Tags: javascript, jquery:)
(:tags-hide javascript, jquery :)

