>>comment<<
Summary: The unix command cron(1) runs in a different environment than your login environment. Here is how to get it back.
(:title How To: Set the PATH in a cron job:)
Parent: (Technology.)Linux
IncludeMe: [[(Technology.)Linux]]
Categories: [[!HowTos]], [[!Technology]], [[!Linux]]
Tags: linux, environment, cron, crontab
(:tags-hide linux, environment, cron, crontab:)
Source: 
Posted: Wed Jan 29 06:58:01 2014
>><<

[[#excerpt]]
Getting some jobs to run under [@cron(1)@] can be confusing and difficult since [@cron@] executes tasks in the [@crontab((5)@] file with a different underlying environment than a user normally runs in. What works from you login shell command line often won't from a [@cron@] job. Here is how to get it back.
[[#excerptend]]

!! What determines cron's environment?

By default, [@cron@] runs with the barest environment. You can discover this by running the following in your [@crontab@]:

    * * * * * (/usr/bin/date ; /usr/bin/env | /usr/bin/sort) >> /tmp/my_cron_env 2>&1

This will run the task every minute, with [@stdout@] and [@stderr@] sent to the file. You should make sure to remove or comment out this line after a minute or so or you'll build up quite a long file.

-> ''If you have a local email system running, you can leave off the output redirection and the output from the cron task will be emailed to your local user instead. I sort of prefer the append-to-file approach, but the email is interesting as well.''

-> ''Note also the command stream is wrapped in parens -- this executes them as a subshell, and collects all the output from the subshell to add to the file.''


!! Changing the environment in the crontab

It is rather easy to change some things in the [@crontab@] file. You can set environment variables as you would for the standard unix shell [@/bin/sh@]:

(:source lang=bash :)
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/bin/:bin
(:sourceend:)

Cron will not interpret the typical environment variables while setting environment variables like this. Thus you need to use absolute paths and such when executing command and setting environment variables.

!! Changing the environment in a cron task

This seems to be a common way amongst the [[ruby]] community because of strange things like ruby environment managers such as [[rbenv]], [[rvm]], [[chruby]] and the like. On a server, things might be a little different, but this method seems to work well.

The gist of it is run your usual login shell in a login environment. Add the following to your [@crontab@] to see what happens:

    * * * * * /bin/bash -l -c 'date ; env | sort' >>/tmp/my_cron_bash_env 2>&1

Basically, everything inside the argument to the [@-c@] parameter will run inside your login environment. Under [@bash@] this will execute [@/etc/profile@], the contents of [@/etc/profile.d/@], and [@.bash_profile@] or [@.profile@] depending which it finds first. This should give you everything you normally have when you log in, and things should work just the same.


