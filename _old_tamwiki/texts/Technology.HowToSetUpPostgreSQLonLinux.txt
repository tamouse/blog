>>comment<<
Summary: A brief description of how to get `PostgreSQL set up on a Linux system for development.
Parent: (Technology.)PostgreSQL
IncludeMe: [[(Technology.)PostgreSQL]]
Categories: [[!HowTos]]
Tags: howto, linux, postgresql, postgres, setup
(:tags-hide howto, linux, postgresql, postgres, setup:)
Source: various
Posted: Mon Jan 20 12:49:00 2014
>><<

[[#excerpt]]
Setting up a `PostgreSQL service on a new, fresh Linux install is
pretty easy, but it's a bit more complicated than expected. Since I
don't do this very often, I thought it best to put the info in a place
I won't have to hunt for it.
[[#excerptend]]

!! Before Installing

If you're running Ubuntu 12.04 (precise) then you need to get the repositories for versions later than 9.1.

>>quote<<
Create the file /etc/apt/sources.list.d/pgdg.list, and add a line for the repository

    deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main

Import the repository signing key, and update the package lists

    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
      sudo apt-key add -
    sudo apt-get update
>><<

!! Installing postgresql

    $ sudo apt-get install postgresql-9.3

!! Configuring users/roles

PostgreSQL users and roles are treated interchangeably in the
documentation. By default, the only user/role is [@postgres@]. You can
leave it at this if you wish, or you can set things up a little easier
to use with vagrant.

    $ sudo -u postgres createuser --superuser vagrant

!! Using UTF-8 encoding

As shipped, postgresql uses LATIN1 encoding, so you have to fix it. [[http://stackoverflow.com/questions/13115692/encoding-utf8-does-not-match-locale-en-us-the-chosen-lc-ctype-setting-requires | This stackoverflow post]] discusses how to fix this.

!!!Create a file:

    nano /etc/profile.d/lang.sh

!!!Add the following

(:source lang=bash:)
export LANGUAGE="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
(:sourcend:)

Save it and restart your system.

!!! Reconfigure so the encoding can be UTF8

(:source lang=bash:)
sudo su postgres
psql
(:sourceend:)
(:source lang=sql:)
update pg_database set datistemplate=false where datname='template1';
drop database Template1;
create database template1 with owner=postgres encoding='UTF-8' lc_collate='en_US.UTF-8' lc_ctype='en_US.UTF-8' template template0;
update pg_database set datistemplate=true where datname='template1';
(:sourcend:)

Use template1 for db creation.

!! Addendum for Vagrant

Assuming you're using a precise32 or precise64 box, the following provisioning script works:

(:source lang=ruby:)
  config.vm.provision "shell" do |s|
    s.inline = %Q{
echo 'export LANGUAGE="en_US.UTF-8"' >  /etc/profile.d/lang.sh
echo 'export LANG="en_US.UTF-8"'     >> /etc/profile.d/lang.sh
echo 'export LC_ALL="en_US.UTF-8"'   >> /etc/profile.d/lang.sh
source /etc/profile.d/lang.sh

apt-get update
apt-get -y install build-essential
apt-get -y install curl
apt-get -y install git-core
apt-get -y install emacs23-nox
echo 'deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main' > /etc/apt/sources.list.d/pgdg.list
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
apt-get update
apt-get -y install postgresql-9.2


echo "update pg_database set datistemplate=false where datname='template1';" > /tmp/psql-encoding.sql
echo "drop database Template1;" >> /tmp/psql-encoding.sql
echo "create database template1 with owner=postgres encoding='UTF-8' lc_collate='en_US.UTF-8' lc_ctype='en_US.UTF-8' template template0;" >> /tmp/psql-encoding.sql
echo "update pg_database set datistemplate=true where datname='template1';" >> /tmp/psql-encoding.sql
sudo su postgres -c 'psql < /tmp/psql-encoding.sql'

apt-get -y install imagemagick
}
  end
(:sourceend:)

