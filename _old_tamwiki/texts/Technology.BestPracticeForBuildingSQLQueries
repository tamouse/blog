[[#excerpt]]
Writing and maintaining SQL queries can become rather tiresome. I've found the best way to write queries is to build them programmatically, placing each element in an array and then joining the array with whatever appropriate separator is needed.
[[#excerptend]]

(See also: FlexibleQueryFunctions)

Here's an example:

(:source lang=php linenum :)
<?php
$csj_columns[] = 'c.`id`';
$csj_columns[] = 'c.`subscription_id`';
$csj_columns[] = 's.`name`';
$csj_columns[] = 's.`uri`';
$csj_columns[] = 'c.`imgsrc`';
$csj_columns[] = 'c.`filespec`';
$csj_columns[] = 'c.`comicdate`';
$csj_columns[] = 'c.`pulltime`';

$from_parts[] = COMICSTBL.' as c';
$from_parts[] = SUBSCRIPTIONSTBL.' as s';

$where_parts[] = 'c.`id`= ? '; // for use in a prepared statement
$where_parts[] = 'c.`subscription_id`=s.`id`';

$sql[] = "SELECT";
$sql[] = join(', ', $csj_columns);
$sql[] = 'FROM';
$sql[] = join(', ', $from_parts);
$sql[] = 'WHERE';
$sql[] = join(" AND ",$where_parts);
$sql[] = 'LIMIT 1';

$sql_s = join(" ",$sql);
?>
(:sourceend:)

You can see how the select columns and the where clause were put together in an array by pushing the individual column definittions, and then joining them with a ', ' separator. The resulting SQL statement looks like this:

(:source lang=sql -getcode:)
SELECT c.`id`, c.`subscription_id`, s.`name`, s.`uri`, c.`imgsrc`, c.`filespec`, c.`comicdate`, c.`pulltime` FROM cg_comics as c, cg_subscriptions as s WHERE c.`id`= ? AND c.`subscription_id`=s.`id` LIMIT 1
(:sourceend:)

Using a single, multidimensional array for the parts of the statement might make a more interesting approach.

(:source lang=php linenum:)
<?php
$stmt_a['columns'][] = 'c.`id`';
$stmt_a['columns'][] = 'c.`subscription_id`';
$stmt_a['columns'][] = 's.`name`';
$stmt_a['columns'][] = 's.`uri`';
$stmt_a['columns'][] = 'c.`imgsrc`';
$stmt_a['columns'][] = 'c.`filespec`';
$stmt_a['columns'][] = 'c.`comicdate`';
$stmt_a['columns'][] = 'c.`pulltime`';

$stmt_a['from'][] = COMICSTBL.' as c';
$stmt_a['from'][] = SUBSCRIPTIONSTBL.' as s';

$stmt_a['where'][] = 'c.`id`= ? '; // for use in a prepared statement
$stmt_a['where'][] = 'c.`subscription_id`=s.`id`';

$sql[] = "SELECT";
$sql[] = join(', ', $stmt_a['columns']);
$sql[] = 'FROM';
$sql[] = join(', ', $stmt_a['from']);
if (array_key_exists('where',$stmt_a)) {
  $sql[] = 'WHERE';
  $sql[] = join(" AND ",$stmt_a['where']);
}

$sql_s = join(" ",$sql);
?>
(:sourceend:)

and obviously, you can go on from there adding SQL query statement parts.

(:if false:)
Summary:a set of practices for building SQL queries in PHP
Parent:(Technology.)PHP
IncludeMe:[[Technology.PHP]]
Categories:[[!Articles]], [[!BestPractices]], [[!HowTos]]
Tags: php, sql, how to, web development
(:tags-hide php, sql, how to, web development :)
(:ifend:)



