[[#excerpt]]
Installing [[Ruby]] can be difficult sometimes. With the number of
different operating system distributions, number of versions, and
possible local configurations, it is hard to make a one-stop install
that fits every user's need.

The primary resource for installing [[Ruby]] remains the
[[http://www.ruby-lang.org/en/downloads/ | download page]] on the
[[http://www.ruby-lang.org | ruby-lang]] site itself.

If you can, you should first try to install [[Ruby]] using tools such
as [[rvm]], [[rbenv]], [[ruby-build]], and so on.

These represent the minimal set of steps to install [[Ruby]] on a
[[Linux]] system from the source. To install [[Ruby]] from on a Mac,
use [[HomeBrew]]. To install [[Ruby]] on [[Windows]], please see
[[RubyInstaller -> http://rubyinstaller.org/ ]].
[[#excerptend]]

!! Install your favourite distribution

These instructions work for any [[Debian-based -> http://debian.org ]]
linux system, as well as some others.

The Debian system installer, [[apt]], is assumed here. Other linux
distributions have different installers, and potentially other package
names.

!! Log in as root

(:source lang=bash    :)
$ sudo -i
Password: # enter your user's password
$
(:sourceend:)

!! Install Packages Ruby Needs to Build from Source

(:source lang=bash:)
$ apt-get install <package> # see list below
(:sourceend:)

!!! Ruby needs these to build correctly.

* build-essential
* git-core
* curl
* bison
* openssl
* libreadline6
* libreadline6-dev
* zlib1g
* zlib1g-dev
* libssl-dev
* libyaml-dev
* libxml2-dev
* libxslt-dev
* autoconf
* libc6-dev
* ncurses-dev
* libcurl4-openssl-dev
* libopenssl-ruby
* apache2-prefork-dev
* libapr1-dev
* libaprutil1-dev
* libx11-dev
* libffi-dev
* tcl-dev
* tk-dev 

These will pull in other packages as needed.

(:source lang=bash linenum tabwidth=2  :)
$ apt-get install build-essential git-core curl bison openssl \
libreadline6  libreadline6-dev zlib1g zlib1g-dev libssl-dev \
libyaml-dev libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev \
libcurl4-openssl-dev libopenssl-ruby apache2-prefork-dev libapr1-dev \
libaprutil1-dev libx11-dev libffi-dev tcl-dev tk-dev 
(:sourceend:)


!! Acquire the Ruby Source

Download the latest version of Ruby here: http://www.ruby-lang.org/en/downloads/ under the Compiling Ruby — Source code section.

(:source lang=bash linenums:)
cd /usr/src
wget http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.0.tar.gz
tar zxvf ruby-2.1.0.tar.gz
cd ruby-2.1.0
(:sourceend:)

!! Do the needful

This is the point where you will actually configure, build, and
install ruby onto your system. Deciding where to put the new version
is something you have to consider.

Installing into @@/usr@@ directory will replace the existing system
ruby. This isn't a bad idea in all cases, but some packages and
utilities may rely on features in the old version of ruby. Still, I
haven't encountered any problems in do this on a modern running
debian-based system.

Installing into @@/usr/local@@ is a popular option, but you need to
ensure that you have your environment set up to know which ruby to
run. When logged in, it is rather simple to keep the @@/usr/local@@
directory before the @@/usr@@ directory in your @@PATH@@ environment
variable, which is all that should really be necessary. However, in
other  environments, such as @@crontab@@ and other system settings,
you might need to do a little more to ensure the @@PATH@@ is set
correctly.

(:source lang=bash:)
./configure --prefix=/usr # default setups
make # compiles the source
make install # installs the programs in /usr/bin, etc
(:sourceend:)

!! Test the install

(:source lang=bash:)
cd
which ruby; ruby --version
which irb; irb --version
which gem; gem --version
which rake; rake --version
(:sourceend:)

!! Install some gems

(:source lang=bash:)
gem install bundler
gem install rails
(:sourceend:)

[[http://bundler.io | @@bundler@@ ]] is probably the most important
gem to install. It is used to manage gems for developing programs,
libraries, ruby packages, and applications. Install it, and be happy.

[[RubyOnRails|Rails]] is the premier web application framework based on [[Ruby]]
and is the reason so many people learn Ruby. It's not the only one,
so you don't have to install it, but it's really a good test of a new
installation of ruby.

!! Logout from root, login as user

Of note, since you've compiled and installed ruby as the system ruby,
you will need to continue installing gems as the superuser, unless you
set the environment variable @@GEM_PATH@@ in your user's @@.profile@@
to something you can write to. This is the best way to do development,
with your own local per-user set of gems. When you deploy your ruby
projects, you'll be able to decide at that point where and how to
install necessary gems.

!! Create a new gem

(:source lang=bash linenum:)
$ mkdir -p ~/Projects/ruby_projects
$ cd ~/Projects/ruby_projects
$ bundle gem my_test_gem
(:sourceend:)


!! Create a test rails app

(:source lang=bash linenum:)
$ mkdir -p ~/Websites/rails
$ cd ~/Websites/rails
$ rails new my_test_rails
(:sourceend:)

>>comment<<
Summary: A step-by-step recording of building a Ruby dev system from source
Parent:(Technology.)Ruby
IncludeMe:[[(Technology.)Ruby]]
Categories:[[!Articles]], [[!HowTos]]
Tags: ruby, howtos
(:tags-hide ruby, howtos :)
(:title How-To: Install Ruby from Source on a New System:)
>><<

