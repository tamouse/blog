>>comment<<
Summary:Utilizing the x modifier in order to enable well-documented regular expressions
Parent:(Technology.)Development
IncludeMe:[[(Technology.)Development]]
Categories:[[!BestPractices]]
Tags: regex, pcre, documentation
(:tags-hide regex, pcre, documentation :)
>><<

[[#excerpt]]
Regular Expressions (commonly referred to as 'regexes') can be highly opaque voodunesque constructions that often are difficult to decipher and thus modify when the time comes. Regexes seem to be a black art to many people, and something that takes a while to understand and master. Documenting regexes is something practically no one does, yet could be so helpful for many people.
[[#excerptend]]

!! PCRE modifiers

[[PCRE -> http://pcre.org]] (Perl Compatible Regular Expressions) has several modifiers that do various things to the action of the regex. These are the ones defined for PCRE:

:i:make the match case insensitive
:m:multiline
:s:dot matches newlines
:x:ignore white spaces in specification

!! Enter the '''x''' modifier

The '''x''' modifier is where we can take advantage of the regex ignoring white space between pattern elements to beautify the regex and insert comments.

(:source lang=perl header="A simple regex to detect blank lines":)
$is_blank_re = qr{^\s*$};
(:sourceend:)

The above regex is quite simple, most people should understand it well enough. But for illustration, let's break this up a bit, beautify it, and add some comments:

(:source lang=perl linenum tabwidth=4 header="Documented regex":)
$is_blank_re =
    qr{
       ^                    # match the beginning of the string
       \s*                  # match zero or more white spaces
       $                    # match the end of the string
      }x;
(:sourceend:)

This at least makes it clearer what each element of the regex ''is'' and what it ''does''. Using the regex defined is the same in either case:

(:source lang=perl linenum tabwidth=4 header="example skipping blank lines in a file":)
while ($line = <STDIN>) {
    next if ( $line =~ m{$is_blank_re} );
    # process the line
}
(:sourceend:)

!! Links for a few languages using regular expressions

* [[PCRE -> http://pcre.org]]
* [[Perl -> http://perldoc.perl.org/perlre.html]]
* [[PHP -> http://us3.php.net/manual/en/reference.pcre.pattern.modifiers.php]]
* [[Ruby -> http://www.ruby-doc.org/core-1.9.3/Regexp.html]] 

