[[#excerpt]]
PmWiki provides a lot of flexibility and extensibility. One of these features is the ability to write [[PmWiki:CustomMarkup|custom wiki markup]]. 
[[#excerptend]]

To create custom markup, the @@Markup()@@ function is available from within the pmwiki environment.

!! {{LaTeX}} logo markup
For example, I recently had the need (or desire) to render the standard [=LaTeX=] logo as it appears when typeset, thusly: {{LaTeX}}.

Here's the markup I wrote to render the logo:

(:source lang=php linenum highlight="3" header="Markup to render LaTeX logo":)
Markup('latex','inline',
       '/{{LaTeX}}/',
       '<span class="texhtml" style="font-family:cmr10, LMRoman10-Regular, Times, serif;">L<span style="text-transform: uppercase; font-size: 70%; margin-left: -0.36em; vertical-align: 0.3em; line-height: 0; margin-right: -0.15em;">a</span>T<span style="text-transform: uppercase; margin-left: -0.1667em; vertical-align: -0.5ex; line-height: 0; margin-right: -0.125em;">e</span>X</span>');
(:sourceend:)

If you decide to snag the code, beware not to fold or split the last line with the HTML code in it, as any white space between the letters may render the logo poorly.

The result is here: {{LaTeX}}

!! A little more complex example

For something that is a little more complex than a simple replacement, You can arrange for `MarkUp() to call a function. The best way to do this is to use the Keep() function, and have your function return the string of text you want it to keep.

(:source lang=php linenum tabwidth=4 header="an example of a MarkUp that calculates something more complex than a simple substitution":)
// Add the (:addlink [PageName]:) markup and HandleAddLink actions.
Markup('addlink', 'inline', '/\\(:addlink\\s*(.*?):\\)/e', 
  "Keep(CreateBookmarklet(\$pagename,'$1'))");

// Function to create the bookmarklet
function CreateBookmarklet($pagename, $linkpage) {
  global $WikiTitle;
  if ($linkpage) $pagename = MakePageName($pagename, $linkpage);
  $bookmarklet="<a href=\"javascript:var tags, u, a, d=document,w=window,e=w.getSelection,k=d.getSelection,x=d.selection,s = (e ? e() : (k) ? k() : (x ? x.createRange().text : 0 )),f = '\$PageUrl?action=addlink',l = d.location,en = encodeURIComponent;if (s == '') s = prompt('Descriptive Text:');tags=prompt('Enter comma-separated tags:');u = f + '?url=' + en(l.href) + '&title=' + en(d.title) + '&selection=' + en(s) + '&tags=' + en(tags);a = function () {if (!w.open(u, 't', '')) l.href = u;};if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0);else a();void(0)\" title=\"send to \$WikiTitle/\$pagename\">send to ".$WikiTitle."/".$pagename."</a>";
  return FmtPageName("Bookmarklet: $bookmarklet - drag to bookmark bar", $pagename);

}
(:sourceend:)

The pattern to match includes an option (well, actually it sends everything after a space following the addlink trigger) that is passed into the [@CreateBookmarklet@] function. Note the amount of quoting going on here. The replacement contents are quoted, in spite of the fact that it contain a function call ([@CreateBookmarklet@]) inside of a function call ([@Keep@]). Both the [@$pagename@] variable, and pattern match variable [@$1@] are also quoted '''inside''' of that.

The [@CreateBookmarklet@] function does a bit of checking to see if the given page or a link page should be the target. It sets the bookmarklet, then returns the formatted page with the link added. The Keep function packs this on and pmwiki renders it when appropriate.

!! Adding options to the markup, a la [[PmWiki:PageDirectives]]

Markup replacements can get extra exciting when you start to add more options and the ability to do different things.

Below is an example of markup that inserts the standard Creative Commons format to build the [[Glossary.SemanticWeb|semantic web]] links.

(:source lang=perl linenum tabwidth=4 -getcode header="Markup for Creative Commons forms":)
// Usage: (:cc-license [type=(by|by-nc|by-nc-sa)] [title=<name of work>] [work=<URL of work>] [author=<name of author>] [permissions=<link to more permissions page]:)
//
// Defaults:
//   type: by-nc-sa
//   title: $WikiTitle
//   work: $ScriptDirUrl
//   author: Anonymous
//   permissions: $ScriptDirUrl?n=Site.Permissions
//
Markup('creativecommonslicenses', /* unique markup identifier */
       '<links',		  /* don't want pmwiki to reprocess urls in text */
       '/\\(:cc-license\\s*?(.*?):\\)/ei', /* regex for markup recognition */
       "cc_license_markup('$1')");
function cc_license_markup($parameters='')
{
  @sms('parameters=',$parameters,__FILE__,__LINE__,__FUNCTION__);
  $parameters=stripslashes($parameters);
  @sms('parameters=(after stripslashes)',$parameters,__FILE__,__LINE__,__FUNCTION__);
  global $WikiTitle, $ScriptUrl;
  /* defaults */
  $defaults = array('type'=>'by-nc-sa',
		    'title'=>$WikiTitle,
		    'work'=>$ScriptUrl,
		    'author'=>'Anonymous',
		    'permissions'=>"$ScriptUrl?n=Site.Permissions");
  @sms('$defaults=',$defaults,__FILE__,__LINE__,__FUNCTION__);
  $args = array_merge($defaults, ParseArgs($parameters));
  @sms('$args=',$args,__FILE__,__LINE__,__FUNCTION__);
  switch ($type) {
  case 'by':
    $type_string = 'Attribution';
    break;

  case 'by-nc':
    $type_string = 'Attribution-NonCommercial';
    break;

  case 'by-nc-sa':
    $type_string = 'Attribution-NonCommercial-ShareAlike';
    break;

  default:
    $type_string = 'Attribution';
    break;
  }
  
  $licenseUrl = "http://creativecommons.org/licenses/$type/3.0/";
  $licenseLogoSrc = "http://i.creativecommons.org/l/$type/3.0/80x15.png";
  $licenseLogoAlt = "Creative Commons Licence";

  $return_text = "<a rel='license' href='$licenseUrl'><img alt='$licenseLogoAlt' style='border-width:0' src='$licenseLogoSrc' /></a> <span xmlns:dct='http://purl.org/dc/terms/' href='http://purl.org/dc/dcmitype/Text' property='dct:title' rel='dct:type'>$title</span> by <a xmlns:cc='http://creativecommons.org/ns#' href='$work' property='cc:attributionName' rel='cc:attributionURL'>$author</a> is licensed under a <a rel='license' href='$licenseUrl'>Creative Commons $type_string 3.0 Unported License</a>. Permissions beyond the scope of this license may be available at <a xmlns:cc='http://creativecommons.org/ns#' href='$permissions' rel='cc:morePermissions'>$permissions</a>.";
  
  return Keep($return_text);

}

(:sourceend:)

Some details to point out, that make this interesting:

* In the third parameter to Markup, the regex is followed by "ie" -- which turns the search case-insensitive, '''and''' permits the replacement to be an expression. This lets the fourth parameter be a function call which will return the substitution.

* The regex saves everything following the markup tag itself as a string and passes it into the function.

* The function uses the ParseArgs() function provided by pmwiki to extract the passed arguments into a hash, which is merged with a hash of default parameters.

* The function returns the value of Keep(), which is passed the generated string of HTML code.

>>comment<<
This goes at the bottom of the page, hidden by comment block class
Summary:markup snippets used in pmwiki
(:title Pm Wiki Markup:)
Parent:(Technology.)PmWiki
IncludeMe:[[Technology.PmWiki]]
Categories:[[!HowTos]]
Tags: pmwiki, snippets, markup
(:tags-hide pmwiki, snippets, markup:)
>><<

