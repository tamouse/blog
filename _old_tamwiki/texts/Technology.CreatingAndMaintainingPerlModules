Article: [[http://mathforum.org/~ken/perl_modules.html | Creating (and Maintaining) Perl Modules]]\\
Author: Created in 1997 by Ken Williams. Expanded and revised in 1999 for Digital River by Dave Rolsky and Ken Williams. Revised in 2001 by Ken Williams for general use.\\
Revised: 2012-04-10 by Tamara Temple to update to perl 5.10.0\\
Posted: 2012-04-10

(:nolinkwikiwords:)
!!Create skeleton files for your module

Perl is distributed with a program called h2xs. This program, while initially intended to help programmers implement C extensions to Perl, can also be used to generate skeleton files for a new module.

Let's create a module called NewModule.pm that doesn't do very much. I'll run the h2xs program:

(:source lang=bash:)
$ h2xs -AXc -n NewModule
Defaulting to backwards compatibility with perl 5.10.0
If you intend this module to be compatible with earlier perl versions, please
specify a minimum perl version with the -b option.

Writing NewModule/lib/NewModule.pm
Writing NewModule/Makefile.PL
Writing NewModule/README
Writing NewModule/t/NewModule.t
Writing NewModule/Changes
Writing NewModule/MANIFEST
(:sourceend:)

'''README''' is the place to write what the module is, how it is acquired and installed, and any configuration info.

(:code:)
NewModule version 0.01
======================

The README is used to introduce the module and provide instructions on
how to install the module, any machine dependencies it may have (for
example C compilers and installed libraries) and any other information
that should be provided before the module is installed.

A README file is required for CPAN modules since CPAN extracts the
README file from a module distribution so that people browsing the
archive can use it get an idea of the modules uses. It is usually a
good idea to provide version information here so that people can
decide whether fixes for the module are worth downloading.

INSTALLATION

To install this module type the following:

   perl Makefile.PL
   make
   make test
   make install

DEPENDENCIES

This module requires these other modules and libraries:

  blah blah blah

COPYRIGHT AND LICENCE

Put the correct copyright and licence information here.

Copyright (C) 2012 by Tamara Temple

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.


(:codeend:)

The '''Changes''' file is where you might keep track keep track of changes you make to your module as you write new versions. If you're using RCS or CVS version control, you shouldn't use the Changes file, since all your history & logs will be in revision control and is much more reliable there (you are adding detailed revision notes in version control, aren't you?). I've found that the best scheme is to automatically build the Changes file from the revision control history, but your preferences might vary.

(:code:)
Revision history for Perl extension NewModule.

0.01  Tue Apr 10 00:47:25 2012
	- original version; created by h2xs 1.23 with options
		-AXc -n NewModule

(:codeend:)

'''MANIFEST''' contains a list of files in this directory. If you add new files to the directory, you should also add them to the MANIFEST. The MANIFEST is used to create a tarball of your module for distribution, and it's also checked when people unpack the tarball and install the module.

(:code:)
Changes
Makefile.PL
MANIFEST
README
t/NewModule.t
lib/NewModule.pm
(:codeend:)

'''Makefile.PL''' is a Perl program used to create a Unix Makefile. You'll use this Makefile to test and install your module.

(:code:)
use 5.010000;
use ExtUtils::MakeMaker;
# See lib/ExtUtils/MakeMaker.pm for details of how to influence
# the contents of the Makefile that is written.
WriteMakefile(
    NAME              => 'NewModule',
    VERSION_FROM      => 'lib/NewModule.pm', # finds $VERSION
    PREREQ_PM         => {}, # e.g., Module::Name => 1.1
    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005
      (ABSTRACT_FROM  => 'lib/NewModule.pm', # retrieve abstract from module
       AUTHOR         => 'Tamara Temple <tamara@local>') : ()),
);
(:codeend:)

'''lib/NewModule.pm''' is your module. You'll write the code here in the next step.

(:source lang=perl:)
package NewModule;

use 5.010000;
use strict;
use warnings;

require Exporter;

our @ISA = qw(Exporter);

# Items to export into callers namespace by default. Note: do not export
# names by default without a very good reason. Use EXPORT_OK instead.
# Do not simply export all your public functions/methods/constants.

# This allows declaration	use NewModule ':all';
# If you do not need this, moving things directly into @EXPORT or @EXPORT_OK
# will save memory.
our %EXPORT_TAGS = ( 'all' => [ qw(
	
) ] );

our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );

our @EXPORT = qw(
	
);

our $VERSION = '0.01';


# Preloaded methods go here.

1;
__END__
# Below is stub documentation for your module. You'd better edit it!

=head1 NAME

NewModule - Perl extension for blah blah blah

=head1 SYNOPSIS

  use NewModule;
  blah blah blah

=head1 DESCRIPTION

Stub documentation for NewModule, created by h2xs. It looks like the
author of the extension was negligent enough to leave the stub
unedited.

Blah blah blah.

=head2 EXPORT

None by default.



=head1 SEE ALSO

Mention other useful documentation such as the documentation of
related modules or operating system documentation (such as man pages
in UNIX), or any relevant external documentation such as RFCs or
standards.

If you have a mailing list set up for your module, mention it here.

If you have a web site set up for your module, mention it here.

=head1 AUTHOR

Tamara Temple, E<lt>tamara@localE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2012 by Tamara Temple

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.


=cut
(:sourceend:)

'''t/NewModule.t''' is a Perl program that tests your module. You don't run it directly, you type "make test" at a Unix prompt and it runs it for you. We'll develop this test suite a little later.

(:source lang=perl:)
# Before `make install' is performed this script should be runnable with
# `make test'. After `make install' it should work as `perl NewModule.t'

#########################

# change 'tests => 1' to 'tests => last_test_to_print';

use Test::More tests => 1;
BEGIN { use_ok('NewModule') };

#########################

# Insert your test code below, the Test::More module is use()ed here so read
# its man page ( perldoc Test::More ) for help writing this test script.

(:sourceend:)

(:linkwikiwords:)



(:Summary:Link to article explaining how to easily (?) create and maintian perl modules:)
(:Parent:(Technology.)Perl:)
(:IncludeMe:[[(Technology.)Perl]]:)
(:Categories:[[!Articles]]:)
(:Tags: perl, modules, h2xs:)
(:tags-hide perl, modules, h2xs :)

