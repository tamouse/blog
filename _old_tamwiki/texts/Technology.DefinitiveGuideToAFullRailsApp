[[#excerpt]]
Recently tilting up a rails application for a quote data base, and decided to pull everything together into a nice startup.

'''Update:''' Look, folks, I'm not burying the lead here. All this below is interesting and stuff, but just go get [[https://github.com/RailsApps/rails_apps_composer|Rails Apps Composer]] which basically does all the stuff below, only better, cos, yeah, I'm weak.

[[#excerptend]]

Turns out, ''everyone'' has thought of this. And people have built some amazing things. If you look up [[https://www.google.com/search?client=ubuntu&channel=fs&q=rails+application+template&ie=utf-8&oe=utf-8|"rails application template"]] on %blue%G%red%o%yellow%o%blue%g%green%l%red%e%%, the first few hits give you a wealth of info:

* http://guides.rubyonrails.org/rails_application_templates.html
* http://edgeguides.rubyonrails.org/rails_application_templates.html&#8206;
* https://www.ruby-toolbox.com/categories/rails_app_templates
* http://railsapps.github.io/rails-application-templates.html (which lists a ''whole'' bunch of generators!)



!! Rails isn't enough



Just starting out with @@rails new MyApp@@ isn't really enough to get everything together for a very modern rails app. In addition, I wanted to be running rspec tests, cucumber with a web driver of some kind, spork to speed up spec tests, watchr to keep running tests when I change an application file or a spec test, and using haml instead of erb.

Here's the steps I've gone through, and links to web pages where I found answers.

!! Getting Rails 3 running with RSpec 2

[[http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html | How To Get Rails 3 and RSpec 2 Running Specs Fast (From Scratch)]] by Peter Cooper over at [[http://www.rubyinside.com |Ruby Inside]] gives a great tutorial on getting Rails 3 and RSpec 2 playing together.

It's best to do this integration before you do any work on your application, as it sets things up really slick.

!!! Install a new rails app

(:source lang=bash header="Instsall new rails app":)
$ rails new myapp --skip-test-unit
(:sourceend:)

!!! Edit the @@myapp/Gemfile@@

Uncomment the following gems:

* therubyracer
* jquery-rails
* bcrypt-ruby
* jbuilder
* unicorn
* capistrano
* debugger

Add the following:
(:source lang=ruby linenum header="Additions to Gemfile":)
gem 'haml'

group :development, :test do
  gem 'rspec-rails'
  gem 'watchr'
  gem 'spork'
end

group :development do
  gem 'haml-rails'
  gem 'hpricot'
  gem 'ruby_parser'
  gem 'html2haml'
end

group :cucumber do
  gem 'cucumber-rails', :require => false
  gem 'webrat'
  gem 'database_cleaner'
end
(:sourceend:)

Then execute:

(:source lang=bash linenum:)
$ bundle
$ rails generate rspec:install
$ rails generate cucumber:install
(:sourceend:)

!!! Set up watchr

Create @@myapp/.watchr.rb@@:

(:source lang=ruby linenum header="myapp/.watchr.rb":)
def run_spec(file)
  unless File.exist?(file)
    puts "#{file} does not exist"
    return
  end

  puts "Running #{file}"
  system "bundle exec rspec #{file}"
  puts
end

watch("spec/.*/*_spec.rb") do |match|
  run_spec match[0]
end

watch("app/(.*/.*).rb") do |match|
  run_spec %{spec/#{match[1]}_spec.rb}
end
(:sourceend:)

Create @@lib/tasks/watchr.rake@@:

(:source lang=ruby linenum header="myapp/lib/tasks/watchr.rake":)
desc "Run watchr"
task :watchr do
  sh %{bundle exec watchr .watchr.rb}
end
(:sourceend:)

!!! Set up spork

Run:

(:source lang=bash:)
$ spork --bootstrap
(:sourceend:)

Then edit @@myapp/spec/spec_helper.rb@@ as stated in the instructions @@spork@@ just added. (Basically, move everything up into @@Spork.prefork@@.)

Edit @@myapp/.rspec@@ by adding @@--drb@@ to the file. File contents should be:

(:source lang=text linenum header="myapp/.rspec":)
--colour
--drb
(:sourceend:)

Copy @@config/environments/test.rb@@ to @@config/environments/cucumber.rb@@.

Edit @@config/environments/test.rb@@ and change @@config.cache_classes@@ from @@true@@ to @@false@@.

!! Stand up database for first time

For a new rails application, you have to ensure the database is there to start developing. To do this, just run:

(:source lang=bash:)
$ bundle exec rake db:migrate
(:sourceend:)

and you'll be good to go.

----

!! Standing the application up for development and test

!!! Foreman

[[https://github.com/ddollar/foreman#readme|Foreman]] is a wonderful utility that can run your rails server, spork, watchr, tail the log file, and whatever else you need running to make your application fly.

!!! Set up the Foreman Procfile

(:source lang=text linenum header="Procfile":)
web: bundle exec rails server -d
spork: spork
watchr: bundle exec rake watchr
log: tail -f log/development.log
(:sourceend:)

!!! Start up Foreman

(:source lang=bash:)
$ foreman start
(:sourceend:)

!!! Now, run some tests

Nothing is there yet, let's see what passes.

To utilizy @@spork@@ effectively, don't run the standard @@rake@@ task. Instead run:

(:source lang=bash:)
$ rspec spec
(:sourceend:)

Running cucumber tests is a slightly different matter. We've created a cucumber environment, so let's use it:

(:source lang=bash:)
$ RAILS_ENV='cucumber' rake cucumber
(:sourceend:)

!!! Set up HAML

There is nothing you need to particularly do to use HAML other than include the gems in the @@Gemfile@@ as shown above.

There are some gems that do not play well with HAML though, insisting on creating erb files instead. Over at [[http://xpressivecode.com | XPressive Code . com]] however, they've come up with a [@rake@] task to make the conversion easy -> http://xpressivecode.com/2012/2/9/rails-rake-task-for-html2haml.aspx]].

Create a new task in @@lib/tasks@@ called @@erb2haml.rake@@:

(:source lang=ruby linenum header="myapp/lib/tasks/erb2haml.rake":)
namespace :erb do
  namespace :to do
    desc "Converts all .html.erb files to .html.haml"
    task :haml do
      print "looking for erb views..\n"
      files = Dir.glob(File.join(Rails.root,"app","views","**","*.html.erb"))
      files.each_line do |file|
        file.strip!
        print "parsing file: #{file}\n"
        sh "bundle exec html2haml #{file} | cat > #{file.gsub(/\.erb$/, ".haml")}"
        File.unlink(file)
      end
    end
  end
end
(:sourceend:)

which can then be used to convert any generated erb files to haml files thusly:

(:source lang=bash:)
$ rake erb:to:haml
(:sourceend:)

!! Proceed with incremental testing and development, with refactoring

Now you can stand up your application, and things should be cool. Write some spec tests, some cucumber features, and some code. With @@watchr@@ and @@spork@@ running, new files and changes to files in the @@myapp/spec@@ and @@myapp/app@@ directories should cause the spec tests to run.

!! {-TODO: create a rails application template that does all this-}

'''TODONE!''' See https://github.com/RailsApps/rails_apps_composer for such a beast.

Rails lets you create application templates that bundle your own version of a new rails application together to be run with [@rails new@]:

(:source lang=bash:)
$ rails new APP_PATH --template=TEMPLATE
(:sourceend:)



>>comment<<
Summary:How to get a fully-loaded Rails app with rspec, cucumber, watchr, spork, haml
Parent:(Technology.)RubyOnRails
IncludeMe:[[(Technology.)RubyOnRails]]
Categories:[[!HowTos]]
Tags: ruby, rails, application, web development, setup, howto
(:tags-hide ruby, rails, application, web development, setup, howto :)
>><<

