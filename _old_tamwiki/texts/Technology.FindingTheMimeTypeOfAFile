[[#excerpt]]
On *nix systems, the type of a file is called it's [[mimetype -> Main.Glossary#mimetype]].
Sometimes it is necessary to know the type of the file one is dealing with. You can't always rely on the file extension (there may not be one, or it may be incorrect). Thus, one has to check the type of the file by different means.
[[#excerptend]]

!! @@file()@@ command
In *nix, there is a command called @@file()@@ which returns a description of the file type. The options on @@file()@@ vary on *nix platforms, but generally the following incantation will deliver just the file's mimetype:

(:source lang=bash:)
file -b --mime /path/to/file
(:sourceend:)

will return the mimetype as it would be set in a @@Content-type:@@ mail or http header. For example:

(:code:)
$ file -b --mime Main/Cartoons/aarp-eyechart.jpg 
image/jpeg
(:codeend:)

!! @@File::`MimeInfo@@ perl module
This can be used, but it does have some limitations. Instead, I use a Perl package called [[http://search.cpan.org/~pardus/File-MimeInfo-0.15/lib/File/MimeInfo.pm|File::MimeInfo]]. It includes a program called @@mimetype@@ with the proper parameters will return the mimetype of the file. With this information, you can do things like send an approrpriate Content-type header for an HTTP Response, or use it in setting Content-type for Mime mail or RSS enclosures.

Also important is to have a good database of MIME data. One such source is the Shared MIME data resource at Freedesktop.org: [[http://www.freedesktop.org/wiki/Software/shared-mime-info]]. On my main development machine, I have this database saved into @@/sw/share/mime@@, so I have aliased the mimetype program to: @@mimetype --database=/sw/share/mime@@.

!!Using mimetype in PHP

As of 5.3.0, PHP has the [[fileinfo -> http://us2.php.net/manual/en/book.fileinfo.php]] class. This makes it easy to determine the true file type of a given file. Using the [[@@finfo_file@@ function -> http://us2.php.net/manual/en/function.finfo-file.php]], it is easy to obtain the mime type:

(:source lang=php linenum:)
$finfo = new finfo(FILEINFO_MIME_TYPE);
$mimetype = $finfo->file($filename);
(:sourceend:)

For example:

(:code:)
$ php -r '$finfo = new finfo(FILEINFO_MIME_TYPE);print $finfo->file("Main/Cartoons/aarp-eyechart.jpg"). "\n";'
image/jpeg
(:codeend:)

Subsequently, doing something with that mimetype can become:

(:source lang=php linenum tabwidth=2:)
$finfo = new finfo(FILEINFO_MIME_TYPE);
switch ($finfo->file($filename)) {
	case 'image/jpeg': $ext = "jpg";	break;
	case 'image/gif': $ext = "gif"; break;
	case 'image/png': $ext = "png"; break;
	default: $ext = "dat"; break;
}
(:sourceend:)

Or, using a table:

(:source lang=php linenum:)
$mime2ext = array(
  'image/jpeg' => 'jpg',
  'image/jpg' => 'jpg',
  'image/gif' => 'gif',
  'image/png' => 'png',
);

// later, in code

$ext = (isset($mime2ext[$finfo->file($filename)])) ? $mime2ext[$finfo->file($filename)] : 'dat';
(:sourceend:)


(:Summary:How to get a file's true mime type:)
(:Parent:(Technology.)Development:)
(:IncludeMe:[[(Technology.)Development]]:)
(:Categories:[[!Articles]]:)
(:Tags: mime types:)
(:tags-hide mime types :)

