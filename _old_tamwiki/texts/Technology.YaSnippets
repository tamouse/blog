[[#excerpt]]
[[YaSnippet -> https://github.com/capitaomorte/yasnippet]] is a great
addition to Emacs, allowing you to easily define and then use snippet
collections. Snippets are a great mechanism for speeding up editing
code by allowing you to store standard programming elements and
customizing them when you insert them.
[[#excerptend]]

`YaSnippet emulated the `TextMate snippet feature pretty well -- well
enough that I don't miss out on the majority of `TextMate's snippet
features anyway.

The installation and configuration features on the google code page
are pretty complete. I opted for the normal install instead of the
bundle install, as I wanted to be able to create my own snippets.

!!Links
* [[Documentation folder -> https://github.com/capitaomorte/yasnippet/tree/master/doc]]

* [[Snippet Development -> https://raw.github.com/capitaomorte/yasnippet/master/doc/snippet-development.rst]]

!!Importing textmate snippets

One '''really''' nice feature of yasnippet is that it's syntax is
close enough to textmate's that there exist some tools for importing
textmate snippet bundles into yasnippet (although not without some
transcription problems):

[[https://github.com/capitaomorte/yasnippet/blob/master/doc/snippet-development.rst#importing-textmate-snippets | Importing TextMate Snippets]] describes one method of doing this that works
pretty well, once you get everything installed.

I chose to use the ruby tool, textmate_import.rb. Installing this was
pretty straight-forward, with a couple of caveats.

# you need to make sure the required rubygems are installed. One in
  particular, fileutils, requires that imagemagick libmagick9-dev
  development package  be installed. This was somewhat of a surprise,
  but the fileutils package requires the rmagick package, which in
  turn relied on the Magic-config script, which only comes from the
  aforementioned library.

# I was running on ubuntu GNU/Linux. The ruby script assumes you are
  running on a Mac, where the plutil program has different switches
  that the one available on linux (you do need to install the plutil
  programs on linux). To make it work under linux, change the line in
  the textmate_import.rb file from @@-convert@@ to @@-i@@. The change
  is shown in the following diff output:

(:source -getcode:)
331c331
<       if (system "plutil -convert xml1 #{xml_or_binary.shellescape} -o /tmp/textmate_import.tmpxml")
---
>       if (system "plutil -i #{xml_or_binary.shellescape} -o /tmp/textmate_import.tmpxml")
(:sourceend:)

-> As you can see, the change is quite simple, and then the script
   works as expected.

It wasn't clear from the beginning how to work the script. As there's
no documentation or README file, here are a few things I've gleaned
from using it:

* Use the -d, -o and -g tags:
(:source lang=bash:)
textmate_import.rb -b path/to/snippets/in/bundle -o path/to/yasnippet/snippets/mode -g bundle/info.plist
(:sourceend:)

!!Getting snippets

The coolest thing is that textmate bundles are available on github at
[[https://github.com/textmate/]]. You simply clone the bundle from the
git repo for that bundle:
(:source lang=bash:)
git clone https://github.com/textmate/php.tmbundle.git php.tmbundle
(:sourceend:)
will snag that bundle so you have a local copy of it. Then just run
the importer tool on it:
(:source lang=bash:)
textmate_import.rb -b php.tmbundle/Snippets -o php-mode -g php.tmbundle/info.plist
(:sourceend:)
will put the converted textmate snippets into the php-mode directory.

!!Clean-up: differences between textmate and yasnippet snippets

As mentioned, the conversion is not complete. You should go through
the snippet files to clean up various things. Notably, in yasnippet,
the $0 tab stop can't take any modifiers or text, so it has to sit
bare in the snippet.

Also, some textmate snippets use special textmate variables which
you'll have to go through and clean up.

!!Key Bindings

I also added bindings for many of the snippets I use that might be
used to modify selected text rather than simply be typed in and
expanded. Here's an example:

(:source -getcode:)
# -*- mode: snippet -*-
# name: em
# key: em
# binding: "C-c C-c e m"
# --
<em>$0</em>
(:sourceend:)

Note the binding is two control-C's, followed by "e", and "m". This
convention lets me use pretty much anything to trigger a snippet
without doing a text expansion, which is hugely necessary when dealing
with selected text (a region in emacs-speak).

(:if false:)
Summary:Yet Another Snippet system for Emacs
Parent:(Technology.)Emacs
IncludeMe:[[Technology.Emacs]]
Categories:[[!Articles]]
Tags: emacs, editors, snippets
(:tags-hide emacs, editors, snippets :)
(:title YaSnippets:)
(:ifend:)



