[[#excerpt]]
[[https://github.com/beastaugh/stylish | Stylish]] is a ruby gem that is used to generate CSS. It can be used to generate repetitive sequences, can do variable substitution easily, and gives compact CSS code.
[[#excerptend]]

!! Why use a generative tool for CSS?

Excerpt from Stylish's [[README -> https://github.com/beastaugh/stylish/blob/master/README.md]] doc:

>>quote<<
!!!Design notes
CSS is a remarkably succinct and powerful language, with several marked deficiencies. It lacks both variables and iteration, and its long-winded property names are often irritating. Stylish attempts to address these issues by reducing duplication, providing a cleaner namespacing syntax and reducing transcription errors. It is not intended as a replacement for hand-authored CSS, but as a supplement to it.

Stylish treats CSS as object code--but it treats it nicely.
>><<


Here's an example:

(:source lang=ruby linenum:)
#!/usr/bin/ruby
require 'rubygems'
require 'stylish'

style = Stylish.generate do
  body :background => {:color => "#FAFAFA"}, :font_size => "1em", :font_family => "Arial, sans-serif"
  rule "#content",
  :background => {:color => "#000000"},
  :width => "80%",
  :margin => "10px auto",
  :padding => "5px",
  :border_radius => "15px"
  rule "#content" do
    p :margin => "3px 0", :padding => "0px"
    a :color => "blue"
    rule "a:visited" , :color => "purple"
    rule "a:active" , :color => "red"
    rule "a:hover" , :text_decoration => "none", :font_style => "italic"
  end
end

puts style;
(:sourceend:)

and it generates the following, very compact CSS:

(:source lang=css -getcode:)
body {font-size:1em; font-family:Arial, sans-serif; background-color:#fafafa;}
#content {padding:5px; border-radius:15px; width:80%; background-color:#000; margin:10px auto;}
#content p {padding:0px; margin:3px 0;}
#content a {color:blue;}
#content a:visited {color:purple;}
#content a:active {color:red;}
#content a:hover {text-decoration:none; font-style:italic;}
(:sourceend:)

Output formatting can be tailored to produce something more readable/maintainable. (However, why would you maintain the output when you can maintain the source?)

!! This doesn't look all that complicated, again, Why use a generative tool?

Simply put, programmatic generation of artifacts makes them easier to automatically test (using [[rspec -> http://rspec.info]] for example). It also allows the designers to specify palettes, sizes, and other layout and UI features that can be dropped into the code more easily, letting you change them in one place.

[[#example2]]
!!! Store the palette config in a YAML file

(:source lang=yaml linenum header="palette.yaml":)
---
page:
  text: ! '#000'
  bg: ! '#FAFAFA'
content:
  text: ! '#FFF'
  bg: ! '#000'
  links:
    unvisited: blue
    visited: purple
    active: red
(:sourceend:)

The palette.yaml file can be used wherever you want to generate a style file, and is separate from the actual logic.

!!! Use the palette YAML file in your code:

(:source lang=ruby linenum tabwidth=4 header="mystyles.rb":)
require 'rubygems'
require 'stylish'
require 'psych'

palette = Psych::load_file("palette.yaml")

style = Stylish.generate do
  body :color => palette['page']['text'], :background => {:color => palette['page']['bg']}, :font_size => "1em", :font_family => "Arial, sans-serif"
  rule "#content",
  :color => palette['content']['text'],
  :background => {:color => palette['content']['bg']},
  :width => "80%",
  :margin => "10px auto",
  :padding => "5px",
  :border_radius => "15px"
  rule "#content" do
    p :margin => "3px 0", :padding => "0px"
    a :color => palette['content']['links']['unvisited']
    rule "a:visited" , :color => palette['content']['links']['visited']
    rule "a:active" , :color => palette['content']['links']['active']
    rule "a:hover" , :text_decoration => "none", :font_style => "italic"
  end
end

puts style;
(:sourceend:)

And the output from the above is:

(:source lang=css linenum header="css emitted from mystyles.rb":)
body {color:#000; background-color:#fafafa; font-size:1em; font-family:Arial, sans-serif;}
#content {color:#fff; background-color:#000; width:80%; margin:10px auto; padding:5px; border-radius:15px;}
#content p {margin:3px 0; padding:0px;}
#content a {color:blue;}
#content a:visited {color:purple;}
#content a:active {color:red;}
#content a:hover {text-decoration:none; font-style:italic;}
(:sourceend:)
[[#example2end]]

... in this case, the same as the first example.

While with this simple example and the benefit may not be that obvious, when there are more complex issues, such as using the same palette across web sites, or in different style files, or, for example, in html emails generated by a site, the reuse of a simple, central palette can be most helpful.


(:Summary:using a ruby gem to generate CSS:)
(:title Generating CSS with Stylish (a Ruby Gem):)
(:Parent:(Technology.)CSS:)
(:includeme:[[(Technology.)CSS]]:)
(:Categories:[[!Articles]], [[!HowTos]]:)
(:Tags: ruby, css, styles:)
(:tags-hide ruby, css, styles :)
