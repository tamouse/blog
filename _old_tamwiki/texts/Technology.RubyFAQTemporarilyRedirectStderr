>>comment<<
Summary: a nice set of methods to temporarily redirect, capture or slience STDERR
Source: http://stackoverflow.com/questions/4459330/how-do-i-temporarily-redirect-stderr-in-ruby
Posted: July 26, 2013, at 02:07 PM
Tags: ruby, faq, stderr, capture
(:tags-hide ruby, faq, stderr, capture:)
Parent: (Technology.)Ruby
includeme: [[Technology.Ruby]]
Categories: [[!Links]], [[!HowTos]]
>><<

!! How do I temporarily redirect stderr in Ruby?


(:nolinkwikiwords:)

(:source lang=ruby linenum tabwidth=2 header="molf's version" :)
require "stringio"

def capture_stderr
  # The output stream must be an IO-like object. In this case we capture it in
  # an in-memory IO object so we can return the string value. You can assign any
  # IO object here.
  previous_stderr, $stderr = $stderr, StringIO.new
  yield
  $stderr.string
ensure
  # Restore the previous value of stderr (typically equal to STDERR).
  $stderr = previous_stderr
end

# Usage:
captured_output = capture_stderr do
  # Does not output anything directly.
  $stderr.puts "test"
end

captured_output
#=> "test\n"
(:sourceend:)

(:source lang=ruby linenum tabwidth=2 header="DHH version" :)
def silence_streams(*streams)
  on_hold = streams.collect { |stream| stream.dup }
  streams.each do |stream|
    stream.reopen(File::NULL)
    stream.sync = true
  end
  yield
ensure
  streams.each_with_index do |stream, i|
    stream.reopen(on_hold[i])
  end
end

#Usage:

silence_streams(STDERR) { do_something }
(:sourceend:)



(:linkwikiwords:)

