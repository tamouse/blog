[[#excerpt]]
Today I learned what a ruby flip-flop is. I had never seen nor heard of this before now. Below is the article someone pointed me at to explain how it works. I'm still wonering why it works, but I guess this is good enough for now.
[[#excerptend]]

The article mentions flip-flops in awk, sed and perl, and I don't know what the author is referring to there, either.

([[#examples | some more examples from ruby and perl below]].)

>>quote<<
(:nolinkwikiwords:)
! The Curious Case of the Flip-Flop

By [[http://ruby.about.com:80/bio/Michael-Morin-44924.htm | Michael Morin]], About.com Guide

When the [[http://ruby.about.com:80/od/rubysbasicfeatures/ss/Ranges.htm | Range]] operator is used in a [[http://ruby.about.com:80/od/beginningruby/a/loopconditional.htm | conditional statement]], it does something totally unexpected: it doesn't create a Range object. Instead, it acts as a "flip-flop" operator, a feature carried over from archaic text processing languages such as awk, sed and [[http://perl.about.com/ | Perl]]. Though it is a Range analog, of sorts.

But first, a warning. The flip-flop operator is a hotly contested feature of Ruby. It's still struggling to find an [[http://ruby.about.com:80/od/gl/g/Idiom.htm | idiomatic]] use case, except for a few very rarely needed things. It's not something you'll likely reach for on a daily, weekly or even monthly basis. The only thing you really need to know about it is what it does, and that's only in case you encounter it in someone else's code. Many even go as far to say not to use the flip-flop operator, that it only adds confusion. The choice is yours though.

These types of flip-flop expressions look at bit different. First, they're usually in the conditional portion of an [[http://ruby.about.com:80/od/beginningruby/a/loopconditional.htm | if]] or [[http://ruby.about.com:80/od/rubyfeatures/a/loops.htm | while]] statement. Second, the left and right of the Range expression itself are usually boolean expressions. For, for example, it might look something like this.

(:source lang=ruby:)
if a==3 .. a==5
  # Do something 
end
(:sourceend:)


The flip-flop expression will [[http://ruby.about.com:80/od/control/a/Boolean-Expressions.htm | evaluate]] to false until the first (left hand) expression is true. The flip-flop expression will then evaluate to true until the right-hand expression evaluates to true. It will then continue to evaluate to false until the left-hand expression evaluates to true again, and then it will flip the other way. It flips and flops between the true and false state, hence the name "flip-flop."

The flip-flop expression can also be exclusive. With the typical double dot version, when the second expression evaluates to false, the flip-flop expression will evaluate to true that one last time. When using the three dot notation, the flip-flop expression will evaluate to false as soon as the second expression evaluates to false.

So how is this a "range analog" as was mentioned before? In the example above, assuming @@a@@ is a range of 1 to 10, the flip-flop will be true from the values of @@a@@ from 3 to 5 (including 5). In addition, if there are any additional 3's in the sequence, it will also be true for any future sequence of 3 to 5.

!! Usage

Describing how to use the flip-flop operator can be tough. Firstly, it's not used very often. In fact, many say not to use it at all. It's archaic, not expressive and can easily lead to confusion. Though it's there in your toolbox, and should you find a need to use it, there's no strong reason not to use it.

It's most often seen used with [[http://ruby.about.com:80/od/regularexpressions/Regular_Expressions.htm | regular expressions]]. Say you want to print all lines from a text file starting with the line that begins with @@BEGIN@@ and ends with the line that begins with @@END@@. You could simply iterate over all the lines of the file, use a single flip-flop in an @@if@@ statement and @@puts@@ the lines.

First, the data file.

(:source lang=text:)
These lines won't be printed.
They're here for debugging purposes only
and as notes for other programmers.
BEGIN
Welcome to Awesome
Program 3.1415
Press X to begin!
END
And these lines won't be
printed either.
(:sourceend:)


And the code. Note that the .. and &hellip; operators bind very loosely, so there's no need for parentheses.

(:source lang=ruby linenum:)
#!/usr/bin/env ruby
File.readlines(ARGV[0]).each do|l|
  if l =~ /^BEGIN/ .. l =~ /^END/
    puts l
  end
end
(:sourceend:)

You could also use it to extract ranges of objects from sequences. For example, you have the range of numbers from 1 to 100 and you way to select only the numbers between a multiple of 5 and the next highest multiple of 8. So from 5 to 8, then from 10 to 16, then 20 to 24, etc. Your first try might be something like this (but it would be wrong).

(:source lang=ruby:)
(1..100).select{|i| i%5==0 .. i%8==0 }
(:sourceend:)


This looks reasonable, so why is it wrong? Remember that the flip-flop operator can only be used inside of conditional statements. Here, the @@select@@ [[http://ruby.about.com:80/od/beginningruby/a/blocks.htm | block]] is merely acting on the truthiness of the result of the block passed to it, there is no conditional statement here. The conditional statement must exist to trigger the creation of the flip-flop, it's a special behind the scenes thing that has to happen just right. So you'll have to add a bit of superfluous code to satisfy this need.

(:source lang=ruby:)
(1..100).select{|i| true if i%5==0 .. i%8==0 }
(:sourceend:)

That looks a bit silly, "true if this other thing is true," but it works. Also, the flip-flop can be used wherever a conditional expression is expected, not only in @@if@@ statements. This includes loops and the @@conditional operator@@.

&copy;2013 About.com. All rights reserved.
(:linkwikiwords:)
>><<

>>comment<<
Summary: The flip-flop operator is a strange case indeed: part range, part conditional.
Tags: ruby, range, flip flop
(:tags-hide ruby, range, flip flop:)
(:title The Curious Case of the Flip-Flop:)
Source: http://ruby.about.com/od/convolutedconstructions/ss/The-Curious-Case-Of-The-Flip-Flop.htm
Parent:(Technology.)Ruby
includeme:[[Technology.Ruby]]
Categories:[[!Articles]], [[!Links]], [[!Programming]], [[!Technology]], [[!Ruby]], [[!HowTos]]
>><<

Page saved at: Tue, 08 Jan 2013 09:51:31 -0600

[[#examples]]
!! Some more examples from [[Ruby]] and [[Perl]]

In [[http://perldoc.perl.org/perlop.html#Range-Operators | Perlop Range Operators]], the flip-flop action is the first use of the @@..@@ operator. This makes me very curious since I have never even heard of this usage and I've been using perl for ''decades''.

It seems particularly useful in both Perl and Ruby as away of extracting lines from a file between two delimited text elements:

!!! Perl version
(:source lang=perl linenum header="The source:":)
@lines = (" - Foo",
	  "01 - Bar",
	  "1 - Baz",
	  " - Quux");

print "The source:\n";
print join("\n",@lines)."\n";

print "\nExclusive, double-dot:\n";
foreach (@lines) {
    if (/0/ .. /1/) {
	print "$_\n";
    }
}

print "\nInclusive, triple-dot:\n";
foreach (@lines) {
    if (/0/ ... /1/) {
	print "$_\n";
    }
}
(:sourceend:)

(:source lang=text header="The output:":)
The source:
 - Foo
01 - Bar
1 - Baz
 - Quux

Exclusive, double-dot:
01 - Bar

Inclusive, triple-dot:
01 - Bar
1 - Baz
(:sourceend:)




!!! Ruby version
(:source lang=ruby linenum header="The source:":)
lines = [" - Foo",
         "01 - Bar",
         "1 - Baz",
         " - Quux"];

puts "Source:"
puts lines

puts
puts "Exclusive, double-dot:"
lines.each do |l|
  if (l.match(/0/) .. l.match(/1/))
    puts "#{l}\n";
  end
end

puts
puts "Inclusive, triple-dot:"
lines.each do |l|
  if (l.match(/0/) ... l.match(/1/))
    puts "#{l}\n";
  end
end
(:sourceend:)

(:source lang=text header="The output:":)
Source:
 - Foo
01 - Bar
1 - Baz
 - Quux

Exclusive, double-dot:
01 - Bar

Inclusive, triple-dot:
01 - Bar
1 - Baz
(:sourceend:)

