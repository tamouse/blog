[[#excerpt]]
The @@[[http://us.php.net/manual/en/book.curl.php|cURL]]@@ extension to PHP is a very useful extension for retrieving web objects that you don't necessarily want to deal with directly, such as retrieving files for storage and later use.
[[#excerptend]]

cURL typically comes installed in many versions of PHP. Running @@phpinfo()@@ will tell you whether you've got cURL installed.

cURL has many [[http://us.php.net/manual/en/function.curl-setopt.php|options]] to it. Selecting the right options is important for using cURL effectively.

!!An example

Retrieving a file while following redirects:

(:source lang=php linenum tabwidth=2:)
<?php 

define('TEMPDIR', '/tmp/');
define('IMAGEDIR', '/tmp/');
define('DEBUG', true);

$image = pull_image('Some $misc //image//',time(),"http://ttwiki/pub/skins/tarski/img/hdr/greytree.jpg");
echo "\$image=$image\n";

function pull_image($name, $date, $imguri)
{
  if (DEBUG) echo "\$name=$name, \$date=$date, \$imguri=$imguri\n";
  $ch = curl_init();
  $fn = tempnam(TEMPDIR, "img"); // TEMPDIR defined elsewhere
  if (DEBUG) echo "\$fn=$fn\n";
  $fh = fopen($fn,'w'); // file to contain page
  $hn = $fn . '.header';
  if (DEBUG) echo "\$hn=$hn\n";
  $hh = fopen($hn,'w'); // file to contain header
  $options = Array(
		   CURLOPT_URL => $imguri,
		   CURLOPT_USERAGENT => "Mozilla/5.0",
		   CURLOPT_FILE => $fh,
		   CURLOPT_HEADER => false,
		   CURLOPT_WRITEHEADER => $hh,
		   CURLOPT_FOLLOWLOCATION => TRUE,
		   CURLOPT_MAXREDIRS => '10'
		   );
  curl_setopt_array($ch, $options);
  if (curl_exec($ch) === FALSE) {
    die("Unable to retrieve $imgurl: ".curl_error($ch)."\n");
  }
  curl_close($ch);
  fclose($fh);
  fclose($hh);
  if (file_exists($fn)) {
    $ext = determine_extension($fn,$hn);
    if (false === $ext) {
      die("File retrieved $fn is not an image type of file\n");
    }
    $savefn = IMAGEDIR.preg_replace('/[^[:alnum:]]/','',$name)."-".date("Y-m-d",$date).".".$ext; //IMAGEDIR defined elsewhere
    if (DEBUG) echo "\$savefn=$savefn\n";
    rename($fn, $savefn);
    return $savefn;
  } else {
    return NULL;
  }
}

function determine_extension($fn, $hn)
{
  // determine the extension based on the file Content-type returned in the header
  $type2ext = array('image/jpeg' => 'jpg',
		    'image/jpg' => 'jpg',
		    'image/png' => 'png',
		    'image/gif' => 'gif');
		    
  $header=file_get_contents($hn);
  $header_lines = explode("\r\n",$header);
  if (DEBUG) echo "\$header_lines=\n".print_r($header_lines,true)."\n";
  $i = 0;
  while(! preg_match("/^HTTP.* 200 OK/",$header_lines[$i]) && $i < count($header_lines)) {$i++;}
  if (DEBUG) echo "\$i=$i, \$header_lines[$i]=$header_lines[$i]\n";
  if ($i >= count($header_lines)) return false; // no header returned found
  while(! preg_match("/^Content-type:/i",$header_lines[$i]) && $i < count($header_lines)) {$i++;}
  if (DEBUG) echo "\$i=$i, \$header_lines[$i]=$header_lines[$i]\n";
  if ($i >= count($header_lines)) return false; // no Content-type returned
  list($name,$value) = explode(": ",$header_lines[$i]);
  if (DEBUG) echo "\$name=$name, \$value=$value\n";
  $parts = explode("; ",$value);
  if (DEBUG) echo "\$parts=\n".print_r($parts,true)."\n";
  $type=$parts[0];
  if (DEBUG) echo "\$type=$type\n";
  return (isset($type2ext[$type])) ? $type2ext[$type] : false;
}
(:sourceend:)

Which outputs:

(:code:)
$ php usingcurlex.php 
$name=Some $misc //image//, $date=1334033959, $imguri=http://ttwiki/pub/skins/tarski/img/hdr/greytree.jpg
$fn=/private/tmp/imgRlsf9s
$hn=/private/tmp/imgRlsf9s.header
$header_lines=
Array
(
    [0] => HTTP/1.1 200 OK
    [1] => Set-Cookie: TRACKID=9ac675f419705b6e771624c13eab4e8e; Path=/; Version=1
    [2] => Content-Type: image/jpeg
    [3] => Accept-Ranges: bytes
    [4] => ETag: "1813642202"
    [5] => Last-Modified: Thu, 29 Mar 2012 04:13:45 GMT
    [6] => Content-Length: 23355
    [7] => Date: Tue, 10 Apr 2012 04:59:19 GMT
    [8] => Server: lighttpd
    [9] => 
    [10] => 
)

$i=0, $header_lines[0]=HTTP/1.1 200 OK
$i=2, $header_lines[2]=Content-Type: image/jpeg
$name=Content-Type, $value=image/jpeg
$parts=
Array
(
    [0] => image/jpeg
)

$type=image/jpeg
$savefn=/tmp/Somemiscimage-2012-04-09.jpg
$image=/tmp/Somemiscimage-2012-04-09.jpg
(:codeend:)

What's important to note here is that the curl extension uses a file to write the retrieved data to. (If no file handle is given to curl, @@curl->exec@@ send the returned url to STDOUT (i.e., the browser). To get curl to return the result to a variable, use set @@CURLOPT_RETURNTRANSFER@@ in the curl options to @@true@@.) It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.

In the example above, two temporary filenames were created, one for the file contents and one for the header(s), and then opened in write mode. The file handles were passed into the curl object, options were set, and the curl run. After checking the result to make sure the curl ran correctly, the files are both closed and the curl is shut down. From then on, the file is dealt with first in it's temporary location, and finally moved to the permanent location. The header file is read to determine the type of file sent (header "Content-Type:").


(:Summary:A quick example of using the curl library functions inside PHP:)
(:Parent:(Technology.)PHP:)
(:IncludeMe:[[(Technology.)PHP]]:)
(:Categories:[[!Articles]]:)
(:Tags: php, curl:)
(:tags-hide php, curl :)

