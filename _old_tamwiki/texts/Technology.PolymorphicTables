!! [[Ruby on Rails Guides: A Guide to Active Record Associations: Polymorphic Associations -> http://guides.rubyonrails.org/association_basics.html#polymorphic-associations]]
Posted: November 17, 2012, at 08:36 AM

>>quote<<
(:nolinkwikiwords:)
2.9 Polymorphic Associations

A slightly more advanced twist on associations is the polymorphic association. With polymorphic associations, a model can belong to more than one other model, on a single association. For example, you might have a picture model that belongs to either an employee model or a product model. Here&rsquo;s how this could be declared:

(:source lang=ruby linenum tabwidth=2:)
class Picture < ActiveRecord::Base
  belongs_to :imageable, :polymorphic => true
end
 
class Employee < ActiveRecord::Base
  has_many :pictures, :as => :imageable
end
 
class Product < ActiveRecord::Base
  has_many :pictures, :as => :imageable
end
(:sourceend:)

You can think of a polymorphic @@belongs_to@@ declaration as setting up an interface that any other model can use. From an instance of the Employee model, you can retrieve a collection of pictures:@@ @employee.pictures@@.

Similarly, you can retrieve @@ @product.pictures@@.

If you have an instance of the Picture model, you can get to its parent via @@ @picture.imageable@@. To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:

(:source lang=ruby linenum tabwidth=2:)
class CreatePictures < ActiveRecord::Migration
  def change
    create_table :pictures do |t|
      t.string  :name
      t.integer :imageable_id
      t.string  :imageable_type
      t.timestamps
    end
  end
end
(:sourceend:)

This migration can be simplified by using the t.references form:

(:source lang=ruby linenum tabwidth=2:)
class CreatePictures < ActiveRecord::Migration
  def change
    create_table :pictures do |t|
      t.string :name
      t.references :imageable, :polymorphic => true
      t.timestamps
    end
  end
end

(:sourceend:)

http://guides.rubyonrails.org/images/polymorphic.png"Polymorphic Association Diagram"

(:linkwikiwords:)
>><<


>>comment<<
Summary:In [[Rails -> RubyOnRails]], the concept of a [[polymorphic table -> https://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29]] allows an object to know which object of different types it belongs to.
Parent:(Technology.)RubyOnRails
IncludeMe:[[(Technology.)RubyOnRails]]
Categories:[[!Articles]]
Tags: ruby, rails, polymorphism, data relationships
(:tags-hide ruby, rails, polymorphism, data relationships :)
(:title Link: Ruby on Rails Guides: A Guide to Active Record Associations: Polymorphic Associations:)
>><<

