[[#excerpt]]
In a recent [[post -> http://www.ruby-forum.com/topic/4407569]] on the [[ruby-talk mailing list -> http://www.ruby-forum.com/forum/ruby]], a poster asked how they could get a field from a few records out of a file on one line.
[[#excerptend]]

This was the OP's starting point:

(:source lang=ruby header="Original Poster's concept:":)
output=`cat #{file} | grep  "up    down" | grep "aenet" | awk '{print $6}'`
puts output
(:sourceend:)

Really not quite getting the power of @@awk@@ here, I think.

The data file we were tasked to work with:

(:source header="data":)
xe-0/0/2.0              up    up   aenet    --> ae1.0
xe-0/0/3                up    up
xe-0/0/3.0              up    up   aenet    --> ae1.0

xe-10/0/6.0             up    down aenet    --> ae40.0
xe-24/0/3.0             up    down aenet    --> ae30.0
(:sourceend:)

(There was more cruft, but it's really irrelevant.)

There were a few respondents with some longish rubyisms:

(:source lang=ruby linenum tabwidth=4 +getcode header="Another Respondent's Attempt:":)
require 'stringio'

f = StringIO.new(<<ENDOFSTRING)
xe-0/0/2.0      up    up   aenet    --> ae1.0
xe-0/0/3        up    up
xe-0/0/3.0      up    up   aenet    --> ae1.0

xe-10/0/6.0     up    down aenet    --> ae40.0
xe-24/0/3.0     up    down aenet    --> ae30.0
ENDOFSTRING

target_column = 6

results = ""

f.each do |line|
  md = line.match(/up\s*down\s*aenet.*?-->\s*(.*)\n\z/xms)

  if md
    results << $1 << " "
  end
end

p results.rstrip
(:sourceend:)

Although the number of lines shown is a lot because of including the file data, it still seemed a tad clunky.

After offering the OP a quick way to do what they wanted with @@awk@@, a pure ruby method seemed necessary to follow up:

(:source lang=ruby linenum tabwidth=4 +getcode header="first try":)
lines = IO.readlines("data")
lines.each do |l|
  if l.match(/up\s+down\s+aenet/)
    print l.split[5], " "
  end
end
print "\n"
(:sourceend:)

First thing, no need for the extra @@lines@@ variable:

(:source lang=ruby linenum tabwidth=4 +getcode header="second try":)
IO.readlines("data").each do |l|
  if l.match(/up\s+down\s+aenet/)
    print l.split[5], " "
  end
end
print "\n"
(:sourceend:)

This gets the job done, but I felt I could do better. Using the fact that you can chain calls onto objects, I thought it would compress to this:

(:source lang=ruby linenum tabwidth=4 +getcode header="third try":)
output = []
IO.readlines("data").map{|l| output << l.split[5] if l.match(/up\s+down\s+aenet/) }
puts output.join " "
(:sourceend:)

Why map every line with a test, when grep does something similar, then you can map the rest? Also, why have the extra output assignments at all? Why not just build what's needed and shoot it out directly? 

(:source lang=ruby linenum tabwidth=4 +getcode header="final one line version":)
puts IO.readlines("data").grep(/up\s+down\s+aenet/).map{|l| l.split[5]}.join " "
(:sourceend:)

So it's down to one line only, from an initial 10-ish.

I feel like Keith Richards.

>>comment<<
Summary:Taking an example from someone looking for a simple solution and iteratively refactoring it down to one line
Parent:(Technology.)Development
IncludeMe:[[(Technology.)Development]]
Categories:[[!HowTos]]
Tags: refactoring, ruby, oneliners
(:tags-hide refactoring, ruby, oneliners :)
>><<

