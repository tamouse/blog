>>comment<<
Summary: A short tutorial of things I've learned about writing Rakefiles
Parent: (Technology.)Ruby
IncludeMe: [[(Technology.)Ruby]]
Categories: [[!HowTos]], [[!Technology]]
Tags: rake, rakefile, ruby
(:tags-hide rake, rakefile, ruby:)
Source: 
Posted: Mon Jan 13 11:20:49 2014
(:title How To: How to write rakefiles:)
>><<

[[#excerpt]]
Rake is the make of the ruby world. It is a nicely structured way of
organizing tasks that are part of developing, testing, maintaining and
running an application.
[[#excerptend]]

!! Rake Documentation

Rake's documentation is rather fragmented, there doesn't seem to be a
definitive guide to writing Rakefiles, other than the source itself in
many cases. Such as it is, here are some pointers:

* For details on Rake's command-line invocation, read https://github.com/jimweirich/rake/blob/master/doc/command_line_usage.rdoc
* For details on writing Rakefiles, see https://github.com/jimweirich/rake/blob/master/doc/rakefile.rdoc
* For the original announcement of Rake, see https://github.com/jimweirich/rake/blob/master/doc/rational.rdoc
* For a glossary of terms, see https://github.com/jimweirich/rake/blob/master/doc/glossary.rdoc

!! Invoking another Rake task from inside a task

Source:
http://www.spritle.com/blogs/2013/12/26/calling-rake-tasks-with-in-rake/

It turns out to be pretty simple, just call
@@Rake::Task[%{rake:task}].invoke@@ (with'''out''' the leading @@':'@@
on the task name) and bob's your uncle. The key thing I wasn't
figuring out is the that task (with it's various namespace elements
included) must be a '''string''' -- I was trying to use the task name
as a symbol, but obviously you can't use @@:rake:task@@ as a symbol.

(:source lang=ruby linenum tabwidth=2 header="invoke another Rake task" :)
namespace :outside do
  namespace :inside do
    desc "try to let the cat out"
    task :let_the_cat_out do |t|
      Rake::Task[%{cat:out}].invoke      
    end
  end
end

namespace :cat do
  desc "really let the cat out"
  task :out do |t|
    puts "letting the cat out"
  end
end

# => letting the cat out
(:sourceend:)

!! Running a shell command

Rake includes all the nifty [@FileUtils@] methods, but also includes a
few more. One that I use a lot is @@sh@@  which calls a subprocess to
execute a shell command.

I only found out how to invoke this by reading the source code at
https://github.com/jimweirich/rake/blob/master/lib/rake/file_utils.rb
which implements the @@sh@@ method:

-> Run the system command @@cmd@@. If multiple arguments are given the command
   is not run with the shell (same semantics as Kernel::exec and
   Kernel::system).

!!! Example:

(:source lang=ruby linenum tabwidth=2 header="using the sh method in a rakefile" :)
sh %{ls -ltr}

sh 'ls', 'file with spaces'

# check exit status after command runs
sh %{grep pattern file} do |ok, res|
  if ! ok
    puts "pattern not found (status = #{res.exitstatus})"
  end
end
(:sourceend:)

Of these, the third form is the most interesting to me, as it lets you
check the result of the shell invocation.


