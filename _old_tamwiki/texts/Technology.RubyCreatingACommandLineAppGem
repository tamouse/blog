>>comment<<
Summary:Steps to create a ruby command line application as a gem
Parent:(Technology.)Ruby
IncludeMe:[[(Technology.)Ruby]]
Categories:[[!HowTos]]
Tags: ruby, gem, application, development
(:tags-hide ruby, gem, application, development :)
>><<
[[#excerpt]]
After asking around and hunting up some information, I've come up with a set of steps that are helpful in setting up the development environment for a [[Ruby]] [[Gem -> RubyGems]] that is a single command line application.
[[#excerptend]]

!! The Problem

While automatically generating a [[Rails -> RubyOnRails]] application is really well documented, creating a single command line application as a Gem doesn't seem to be easy to find. I finally resorted to asking on the [[ruby-talk -> #]] mailing list, and got a couple of really fine answers. I'm going to use the [[GLI -> http://davetron5000.github.com/gli/]] method here, which is great for developing a command line app with mulitple subcommands (a la git).

(An alternate method, @@bundle gem GEMNAME@@ is described [[here -> http://gembundler.com/rubygems.html]].)

(At http://davetron5000.github.com/methadone/ , another method for generating a simpler sort of command line application is given as well. The steps below are similar.)

!! The Steps

!!! Install and prepare

(:source lang=bash:)
gem install gli # Install gli

gli init APP_NAME action1 action2 action3 ... # Initialize the development tree

pushd APP_NAME # make the development tree root current working directory

bundle exec bin/APP_NAME help # run the new app

rake test # test the new app
(:sourceend:)

!!! Add [[rspec -> RubyRSpec]] to the project ([[cucumber -> RubyCucumber]] has already been added)

(:source lang=bash:)
rspec --init
(:sourceend:)

If necessary, update the @@Gemfile@@ by adding the following line:

(:source lang=ruby:)
gem 'rspec'
(:sourceend:)

Modify the @@Rakefile@@ to add the spec task:

(:source lang=ruby:)
require 'rspec/core/rake_task'
RSpec::Core::RakeTask.new('spec')
(:sourceend:)

Add spec tests to the rake default task, if desired.

(:source lang=ruby:)
task :default => [:spec,:test,:features]
(:sourceend:)

(Of course, you'll want to put this immediately under source code control, preferably via [[Git]].)

