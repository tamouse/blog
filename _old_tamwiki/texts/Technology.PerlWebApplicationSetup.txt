>>comment<<
Summary:How to set up a perl web application under Debian-based distros
Parent:(Technology.)Perl
IncludeMe:[[(Technology.)Perl]]
Categories:[[!HowTos]]
Tags: perl, web application, web development, environments
(:tags-hide perl, web application, web development, environments :)
>><<

[[#excerpt]]
While setting up a [[PHP]] web application under Apache is fairly straight-forward and often requires little configuration, setting up a Perl web application is a little different.
[[#excerptend]]

Apache has long included the ability to run perl programs, utilizing @@mod_perl@@ and other extensions. This will look at setting up an application that uses the [[CGI]] interface to run perl programs explicitly not under the server process directly.

!! Configuring Apache to run perl programs

Apache on Debian-based systems allows execution of cgi scripts within the special directory <DOCUMENTROOT>/cgi-bin, and <USERDIR>/public_html/cgi-bin. These are great for one-off scripts or special tools, but is not really great for a perl-based web application.

Assuming you want your web application to be self-contained under one directory structure, you can set up a special directory in it for perl scripts, assets, and other aspects of your application, here is one way of organizing the applicaiton:

(:source:)
   APP_ROOT/
      scripts/  -- containing perl scripts to run the application
      static/   -- containing static elements of the application
      css/      -- style files
      js/       -- javascript files
      ...
(:sourceend:)

Thus, all the scripts to run the application are in the scripts folder, while all the other elements of the site in other subdirectories.

Further, let's say the main script of the site, which could be a dispatcher for other modules, routes, etc, in your applicaiton, is called @@routes.pl@@. Put this under the scripts/ subdirectory.

An entry in the apache configuration file could look like:

Map the path [@http://<HOST>/myapp/@] to the directory where the app is located using the @@Alias@@ directive. Then, Set up the app directory to process clean web requests (such as [@http://<HOST>/myapp/@] or [@http://<HOST>/myapp/route/@]). Finally, set up the scripts directory to process perl scripts as cgi files.

(:source lang=apache:)
    Alias /myapp/ "/home/tamara/myapp/"

    <Directory "/home/tamara/myapp/">
        RewriteEngine On
	RewriteBase /myapp
	RewriteRule ^$           scripts/routes.pl  [L]
    	RewriteCond %{REQUEST_FILENAME} !-f
    	RewriteCond %{REQUEST_FILENAME} !-d
    	RewriteCond %{REQUEST_FILENAME} !-l
    	RewriteRule ^(.*)$ scripts/routes.pl/$1  [QSA,L]
    </Directory>

    <Directory "/home/tamara/myapp/scripts">
	Options FollowSymLinks ExecCGI
	AddHandler cgi-script .pl
	AllowOverride None
    </Directory>
(:sourceend:)


%right% ''[-(For more information on the rewrite rules processing, see [[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html | Apache mod_rewrite documentation]].)-]''


