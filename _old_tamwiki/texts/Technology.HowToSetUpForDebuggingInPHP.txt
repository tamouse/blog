[[#excerpt]]
Debugging PHP can be a major pain. If you're not using something like [[Xdebug -> http://xdebug.org]], typically, debugging PHP is done via printing out variables and state information to the browser as your application is running. Turning debugging on and off is sometimes a major pain. I've devised  scheme to make it much simpler.
[[#excerptend]]


Also, see the [[section on php.net about debugging -> http://us2.php.net/manual/en/debugger.php]].

!!Syntax Check (aka Lint)

PHP will not ever show syntax errors on output when run from a web server, instead they are sent to the web server error log (or php error log if set separately). This can be a struggle if you're running in an edit-test-debug cycle.

Instead of trying to syntax check PHP code via the web server with a browser call, run PHP with the @@-l@@ (lint) option:

(:source lang=bash:)
$ php -l source.php
(:sourceend:)

This will easily report any syntax errors in your PHP script. Some `IDEs of course, have this built in, but you can probably wire it to whatever editor or IDE you use.

For example, in emacs, you can use the @@M-x compile@@ command, and change the default command to @@php -l file.php@@ where @@file.php@@ is the currently file you're editing.

!!Make sure you see everything PHP reports

By default in most set-ups, error reporting is set for a production server, and errors are logged to the php error log as determined in @@/etc/php.ini@@. This is not very useful when developing and testing your application.

To see what notices, warnings and errors PHP is reporting, add the following to the beginning of your scripts, or put in an include file that is used by every pprogram (such as a initialization or configuration script).

(:source lang=php linenum:)
error_reporting(-1); // turns on absolutely ALL error reporting
ini_set('display_errors',true); // will show errors on PHP output
ini_set('display_startup_errors',true); // will show startup errors on PHP output
(:sourceend:)

!!Setting up a debug mechanism

There are many ways to set up a debugging mechanism. Rather than simply inserting echo statements everywhere, it can be helpful to have a function to handle debug output, which can check a global or environment variable to determine the debugging state or level.

In addition, it is quite useful to know where your debug statements are being executed from. In many cases, this may be obvious, but PHP provides some special constants that can help pinpoint where the action is:

* [@__FILE__@] - the name of the current file being processed
* [@__LINE__@] - the current line of the current file
* [@__FUNCTION__@] - the name of the currently executing function
* [@__CLASS__@] - the name of the current class
* [@__METhOD__@] - the name of the current method in the current class

In my scripts, I typically have a function (or class) that handles the actual debugging display task, and can be called with something like:

(:source lang=php:)
debug("Message",$var,__FILE__,__LINE__);
(:sourceend:)

which will emit the message, dump the variable, and tag the output with the current file and line number.

The function takes care of checking whether the debugging is turned on, so you can simply embed the debugging calls into your script and forget about them. I tend to leave the debugging calls in until I've thoroughly tested the code. Code under development seems to work better with debugging things left in.

!!Using the query string or post vars to turn debugging on or off

My scheme uses the query string or post vars on any PHP script call to include the parameter @@debug=true@@. Thus to call a script and turn on debugging, one could use http://www.example.com/myscript.php?debug=true.

To set this up, I include the following in my @@config.inc.php@@ file, which gets called at the beginning of every script in the application:

(:source lang=php linenum  tabwidth=4:)
if ((isset($_REQUEST['debug']) && strtolower($_REQUEST['debug']) == 'true'))
{
	$GLOBALS['debug']=TRUE;
	error_reporting(-1); //report every error
	ini_set('display_errors',TRUE); // send error messages to output
	ini_set('display_startup_errors',TRUE); // send startup messages to output
} else {
	$GLOBALS['debug']=FALSE;	
}
(:sourceend:)

As you can see, this set the global @@debug@@ to true or false depending on the existence and value of the @@debug@@ parameter on either the query string or from the post data or from the environment.

!!Short example
When you are creating an application, and wish to see what is being passed into the script, you can easily include the following at the beginning of the script (after you've set up the environment as above):

(:source lang=php linenum:)
debug("\$_GET: ",$_GET);
debug("\$_POST: ",$_POST);
(:sourceend:)

!!Creating the debug function

The debug function can be in a self-contained script which you include (and the environment setup can be included in this script as well if you'd like).

(:source lang=php linenum tabwidth=4 header="A rudimentary debug function":)
function debug($msg,$var,$file='',$line='')
{
	if (!isset($GLOBALS['debug']) || !$GLOBALS['debug']) return; // fast return if not debugging

	echo "<pre>";
	echo "DEBUG: $file @ $line $msg".PHP_EOL;
	if (! is_scalar($var)) {
		echo htmlspecialchars(print_r($var),true);
	} else {
		echo htmlspecialchars($var);
	}
	echo PHP_EOL."</pre>".PHP_EOL;
}
(:sourceend:)


!!More advanced debug features

!!!Flexible formatting

Something you may want to do is be able to determine how the messages are formatted, instead of simply using the @@<pre>..</pre>@@ HTML tags as shown in the function above, in which case, you can again set globals, sessions or, in this case, define constants to be used to wrap the debug message.

An easy way to do this is set defined constants as the prefix and suffix of the debug output. In the are where you set up the debug environment, you can add something like:

(:source lang=php linenum header="Setting debug prefix and suffix":)
define('DEBUGPREFIX','<p class="debug">'.PHP_EOL);
define('DEBUGSUFFIX','</p>'.PHP_EOL);
(:sourceend:)

Then modify the function above as follows:

(:source lang=php linenum tabwidth=4 header="A rudimentary debug function":)
function debug($msg,$var,$file='',$line='')
{
	if (!isset($GLOBALS['debug']) || !$GLOBALS['debug']) return; // fast return if not debugging

	echo (defined('DEBUGPREFIX')?DEBUGPREFIX:PHP_EOL."<pre>".PHP_EOL);
	echo "DEBUG: $file @ $line $msg".PHP_EOL;
	if (! is_scalar($var)) {
		echo htmlspecialchars(print_r($var),true);
	} else {
		echo htmlspecialchars($var);
	}
	echo (defined('DEBUGSUFFIX')?DEBUGSUFFIX:PHP_EOL."</pre>".PHP_EOL);
}
(:sourceend:)


!!!Defering debug output until later

Sometimes, you don't want the debugging information written right at the point it is called. Instead, you can create a global or session variable that will hold the debugging messages until the point you want to emit them. 

(:source lang=php linenum tabwidth=4 header="Defining a global to hold debug messages":)
$GLOBALS['debug_output'] = array(); // initialize this global near the beginning of your script
(:sourceend:)

(:source lang=php linenum tabwidth=4 header="Modified debug script":)
function debug($msg,$var,$file='',$line='')
{
	if (!isset($GLOBALS['debug']) || !$GLOBALS['debug']) return; // fast return if not debugging

	$out = "DEBUG: $file @ $line $msg".PHP_EOL;
	if (! is_scalar($var)) {
		$out .= htmlspecialchars(print_r($var),true);
	} else {
		$out .= htmlspecialchars($var);
	}
	$GLOBALS['debug_output'][] = $out;
}
(:sourceend:)

Later, to print out all the debug messages (perhaps in a flash section of your application's output):

(:source lang=php linenum tabwidth=4 header="Emitting the saved debug messages":)
if (isset($GLOBALS['debug_output'] && count($GLOBALS['debug_output']) > 0) {
	echo '<ul class="debug">'.PHP_EOL;
	foreach ($GLOBALS['debug_output'] as $l) {
		echo "<li>$l</li>".PHP_EOL;
	}
	echo '</ul>'.PHP_EOL;
}
(:sourceend:)

!!! Persistent debug state over multiple requests

Sometimes, you want to be able to have the debug flag set over multiple requests, form posts, and or redirects. This can be done in a few ways:

# %item value=1%Use a cookie. Check the existence of the debug cookie for the application, and if set, turn debugging on. If the cookie is not set, then check for the debug parameter in the $_REQUEST superglobal. Additionally, if the debug cookie exists and is turned on, check the $_REQUEST superglobal to see if debugging should be turned off.

(:source lang=php linenum tabwidth=4 header="Using a cookie to maintain debug state":)
if ((isset($_COOKIE['debug']) && strtolower($_COOKIE['debug']) == 'true')
{
	$GLOBALS['debug']=true;
}

if ((isset($_REQUEST['debug']))
{
	if (strtolower($_REQUEST['debug']) == 'true')
	{
		$GLOBALS['debug']=TRUE;
		error_reporting(-1); //report every error
		ini_set('display_errors',TRUE); // send error messages to output
		ini_set('display_startup_errors',TRUE); // send startup messages to output
		setcookie('cookie','true');
	} else {
		$GLOBALS['debug']=FALSE;
		setcookie('cookie','',time() - 3600); // expiration that is past effectively deletes cookie
	}
}
(:sourceend:)

# %item value=2%Use a session variable to set the debug state, which will be carried over to every other script called within the same session.

(:source lang=php linenum tabwidth=4 header="Using a cookie to maintain debug state":)
session_start();

if ((isset($_SESSION['debug']) && strtolower($_SESSION['debug']) == TRUE)
{
	$GLOBALS['debug']=TRUE; // you could also modify the debug function above to use the session variable directly
}

if ((isset($_REQUEST['debug']))
{
	if (strtolower($_REQUEST['debug']) == 'true')
	{
		$GLOBALS['debug']=TRUE;
		error_reporting(-1); //report every error
		ini_set('display_errors',TRUE); // send error messages to output
		ini_set('display_startup_errors',TRUE); // send startup messages to output
		$_SESSION['debug']=TRUE;
	} else {
		$GLOBALS['debug']=FALSE;
		$_SESSION['debug']=FALSE;
	}
}
(:sourceend:)

# %item value=3%Ensure each link and form submision has a debug parameter on it. This is the most intrusive and time-consuming way of dealing with this issue. If you go this route, you may want to write a function that automatically appends the debug flag on all application links and in forms before sending them to the browser.



!!A debug class

To put the above ideas together, and add a few more, I've written a debug class script [[class.debug.php in git repo here -> https://gitorious.org/common-php-code/common-php-code]] that can be included in the application to handle debugging in a more interesting fashion.

To use the class, include the file and instantiate the class as an object:

(:source lang=php linenum tabwidth=4 header="initializing the class":)
include_once('class.debug.php');
$GLOBALS['dbg'] = new Debug(FALSE);
(:sourceend:)

By default, this will turn debugging off, use HTML in debug output, use the standard error logging facility, emit output directly, and use a standard prefix and suffix for the debugging output.

Follow this with your environment set up as described at the beggining of this page, only use methods to turn debugging on or off depending of the environment:

(:source lang=php linenum  tabwidth=4 hilight=5:)
if ((isset($_REQUEST['debug']) && strtolower($_REQUEST['debug']) == 'true') ||
    (isset($_SERVER['DEBUG']) && strtolower($_SERVER['DEBUG']) == 'true'))
{
	$GLOBALS['dbg']->on();
	error_reporting(-1); //report every error
	ini_set('display_errors',TRUE); // send error messages to output
	ini_set('display_startup_errors',TRUE); // send startup messages to output
}
(:sourceend:)

Then, to make debug statements, insert the line:

(:source lang=php linenum tabwitch=4:)
$GLOBALS['dbg']->p("Debug message",$var,__FILE__,__LINE__);
(:sourceend:)

where you want your debug output to appear.

The class contains a number of initialization parameters and  methods, which are documented in the source file.

!!The problem with doing redirects while debugging

Oftentimes, one script will do some processing and then redirect to another script to finish up and display the actual results. When debugging, you don't always want this to happen so you can see what's going on on the page you're working on without losing the potential debugging output when a page redirects.

Thus, I've come up with the following function to handle those situations:

(:source lang=php linenum tabwidth=4 header="function to deal with redirectcs while debugging":)
function do_redirect($u)
{
	debug("Redirect:",$u,__FILE__,__LINE__);
	if (!$GLOBALS['debug']) header("Location: $u"); else exit("<p><a href='$u'>Redirect to $u</a></p>");
}
(:sourceend:)

In the above function, the redirect url is passed to the debug print function, then, if debugging is of, will send the redirect header; otherwise it will print an HTML link to enable the redirect to be manually executed after the debug information has been seen by the developer.

>>comment<<
Summary:a good way to set up for debugging in PHP
Parent:(Technology.)PHP
IncludeMe:[[(Technology.)PHP]]
Categories:[[!HowTos]], [[!BestPractices]]
Tags: php, debugging
(:tags-hide php, debugging :)
>><<

