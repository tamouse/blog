(:nolinkwikiwords:)
''Article saved from http://stackoverflow.com for posterity.''

>>important<<
Still needs lots of editing to make it fit for pmwiki...
>><<

>>quote<<
!! [[http://stackoverflow.com:80/questions/315911/git-for-beginners-the-definitive-practical-guide | Git for beginners: The definitive practical guide]]

Ok, after seeing [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/2678236#2678236 | this post by PJ Hyett]], I have decided to skip to the end and go with [[http://en.wikipedia.org/wiki/Git_(software) | Git]].

So what I need is a beginner's '''practical''' guide to Git. "Beginner" being defined as someone who knows how to handle their compiler, understands to some level what a [[http://en.wikipedia.org/wiki/Make_(software) | Makefile]] is, and has touched source control without understanding it very well.

"Practical" being defined as this person doesn't want to get into great detail regarding what Git is doing in the background, and doesn't even care (or know) that it's distributed. Your answers might hint at the possibilities, but try to aim for the beginner that wants to keep a 'main' repository on a 'server' which is backed up and secure, and treat their local repository as merely a 'client' resource.

So:

!! Installation/Setup
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323764 | How to install Git]]
* How do you set up Git? Try to cover Linux, Windows, Mac, think 'client/server' mindset.
** [[http://stackoverflow.com/questions/1482824/setup-git-server-with-msysgit-on-windows | Setup GIT Server with Msysgit on Windows]]
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#320140 | How do you create a new project/repository?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#316062 | How do you configure it to ignore files (.obj, .user, etc) that are not really part of the codebase?]]!! Working with the code 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/1350157#1350157 | How do you get the latest code?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323906 | How do you check out code?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#316055 | How do you commit changes?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#319465 | How do you see what's uncommitted, or the status of your current codebase?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323898 | How do you destroy unwanted commits?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/1762631#1762631 | How do you compare two revisions of a file, or your current file and a previous revision?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/2114836#2114836 | How do you see the history of revisions to a file?]] 
* How do you handle binary files (visio docs, for instance, or compiler environments)? 
* How do you merge files changed at the "same time"? 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/323898#323898 | How do you undo (revert or reset) a commit?]]!! Tagging, branching, releases, baselines 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#322967 | How do you 'mark' 'tag' or 'release' a particular set of revisions for a particular set of files so you can always pull that one later?]] 
* How do you pull a particular 'release'? 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/816614#816614 | How do you branch?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/816636#816636 | How do you merge branches?]] 
* How do you resolve conflicts and complete the merge? 
* How do you merge parts of one branch into another branch? 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/5985070#5985070 | What is rebasing?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/1590791#1590791 | How do I track remote branches?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/1590803#1590803 | How can I create a branch on a remote repository?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/5977604#5977604 | How do I delete a branch on a remote repository?]] 
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/5968622#5968622 | Git workflow examples]]!! Other 
* Describe and link to a good GUI, IDE plugin, etc. that makes Git a non-command line resource, but please list its limitations as well as its good.  
*
* [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323559 | msysgit]] - Cross platform, included with Git 
** [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323559 | gitk]] - Cross platform history viewer, included with Git 
** [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323559 | gitnub]] - Mac OS X 
** [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323559 | gitx]] - Mac OS X history viewer 
** [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323559 | smartgit]] - Cross platform, commercial, beta 
** [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/322989#322989 | tig]] - console GUI for Linux 
** [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/644129#644129 | qgit]] - GUI for Windows, Linux 
** [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide#323559 | Git Extensions]] - package for Windows, includes friendly GUI 
* Any other common tasks a beginner should know?  
** [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/319465#319465 | Git Status tells you what you just did, what branch you have, and other useful information]] 
* How do I work effectively with a subversion repository set as my source control source?!! Other Git beginner's references 
* [[http://www.sourcemage.org/Git_Guide | Git guide]] 
* [[http://book.git-scm.com/ | Git book]] 
* [[http://www-cs-students.stanford.edu/~blynn/gitmagic/ | Git magic]] 
* [[http://www.gitcasts.com/ | gitcasts]] 
* [[http://github.com/guides/home | GitHub guides]] 
* [[http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html | Git tutorial]] 
* [[http://progit.org/book | Progit - book by Scott Chacon]] 
* [[http://git.or.cz/course/svn.html | Git - SVN Crash Course]] 
* [[http://www.newartisans.com/2008/04/git-from-the-bottom-up.html | Git from the bottom up]] 
* [[http://www.gitready.com | Git ready]] 
* [[http://gitref.org/ | gitref.org]] 
* [[http://www.ndpsoftware.com/git-cheatsheet.html | Git visual cheatsheet]]!! Delving into Git 
* [[http://www.eecs.harvard.edu/~cduan/technical/git/ | Understanding Git conceptually]] 
* [[http://eagain.net/articles/git-for-computer-scientists/ | Git for computer scientists]] (and [[http://sitaramc.github.com/gcs/ | another version]])

This question exists because it has historical significance, but '''it is not considered a good, on-topic question for this site''', so please do not use it as evidence that you can ask similar questions here. This question and its answers are frozen and cannot be changed. More info: [[http://stackoverflow.com/faq | FAQ]].

! How do you create a new project/repository?

A git repository is simply a directory containing a special @@.git@@ directory.

This is different from "centralised" version-control systems (like subversion), where a "repository" is hosted on a remote server, which you @@checkout@@ into a "working copy" directory. With git, your working copy ''is'' the repository.

Simply run @@git init@@ in the directory which contains the files you wish to track.

For example,

(:source lang=bash linenum:)
cd ~/code/project001/
git init
(:sourceend:)

This creates a @@.git@@ (hidden) folder in the current directory.

To make a new project, run @@git init@@ with an additional argument (the name of the directory to be created):


(:source lang=bash linenum:)
git init project002
(:sourceend:)

This is equivalent to:

(:source lang=bash linenum:)
mkdir project002
cd project002
git init
(:sourceend:)

To check if the current current path is within a git repository, simply run @@git status@@ - if it's not a repository, it will report "fatal: Not a git repository"

You could also list the @@.git@@ directory, and check it contains files/directories similar to the following:

(:source lang=text:)
$ ls .git
HEAD         config       hooks/       objects/ branches/    description  info/        refs/
(:sourceend:)

If for whatever reason you wish to "de-git" a repository (you wish to stop using git to track that project), simply remove the @@.git@@ directory at the base level of the repository:

(:source lang=bash linenum:)
cd ~/code/project001/
rm -rf .git
(:sourceend:)

>>warning<<
'''Caution:''' This will destroy ''all'' revision history, ''all'' your tags, ''everything'' git has done.
It will not touch the "current" files (the files you can currently see), but previous changes, deleted files and so on will be unrecoverable!
>><<

!! GUIs for git

!!! Git GUI

Included with git &mdash; Run @@git gui@@ from the command line, and the Windows [[http://code.google.com/p/msysgit/ | msysgit]] installer adds it to the Start menu.

Git GUI can do a majority of what you'd need to do with git. Including stage changes, configure git and repositories, push changes, create/checkout/delete branches, merge, and many other things.

One of my favourite features is the "stage line" and "stage hunk" shortcuts in the right-click menu, which lets you commit specific parts of a file. You can achieve the same via @@git add -i@@, but I find it easier to use.

It isn't the prettiest application, but it works on almost all platforms (being based upon Tcl/Tk)[[http://www.spearce.org/2007/01/git-gui-screenshots.html | Screenshots]] | [[http://www.simplicidade.org/notes/archives/2008/10/gitgui_screenca.html | a screencast]]

!!! [[http://www.kernel.org/pub/software/scm/git/docs/gitk.html | GitK]]

Also included with git. It is a git history viewer, and lets you visualise a repository's history (including branches, when they are created, and merged). You can view and search commits.

Goes together nicely with git-gui.

!!! [[http://github.com/Caged/gitnub/wikis | Gitnub]]

Mac OS X application. Mainly an equivalent of @@git log@@, but has some integration with [[http://github.com/Caged/gitnub/tree/master | github]] (like the "Network view").

Looks pretty, and fits with Mac OS X. You can search repositories. The biggest critisism of Gitnub is that it shows history in a linear fashion (a single branch at a time) - it doesn't visualise branching and merging, which can be important with git, although this is a planned improvement.

[[http://github.com/Caged/gitnub/wikis | Download links, change log and screenshots]] | [[http://github.com/Caged/gitnub/tree/master | git repository]]

!!! [[http://gitx.frim.nl/ | GitX]]

Intends to be a "gitk clone for OS X".

It can visualise non-linear branching history, perform commits, view and search commits, and it has some other nice features like being able to "Quicklook" any file in any revision (press space in the file-list view), export any file (via drag and drop).

It is far better integrated into OS X than @@git-gui@@/@@gitk@@, and is fast and stable even with exceptionally large repositories.

The original git repository [[https://github.com/pieter | pieter]] has not updated recently (over a year at time of writing). A more actively maintained branch is available at [[https://github.com/brotherbard/gitx | brotherbard/gitx]] - it adds "sidebar, fetch, pull, push, add remote, merge, cherry-pick, rebase, clone, clone to"[[http://gitx.frim.nl/index.html | Download]] | [[http://gitx.frim.nl/seeit.html | Screenshots]] | [[http://github.com/pieter/gitx/tree/master | git repository]] | [[https://github.com/brotherbard/gitx | brotherbard fork]] | [[http://gitx.laullon.com/ | laullon fork]]

!!! [[http://www.syntevo.com/smartgit/index.html | SmartGit]]

From the homepage:

->SmartGit is a front-end for the distributed version control system Git and runs on Windows, Mac OS X and Linux. SmartGit is intended for developers who prefer a graphical user interface over a command line client, to be even more productive with Git &mdash; the most powerful DVCS today.

You can download it from [[http://www.syntevo.com/smartgit/index.html | their website]] [[http://www.syntevo.com/smartgit/early-access.html | Download]]

!!! [[http://code.google.com/p/tortoisegit/ | TortoiseGit]]

TortoiseSVN Git version for Windows users.

->It is porting TortoiseSVN to TortoiseGit The latest release 1.2.1.0 This release can complete regular task, such commit, show log, diff two version, create branch and tag, Create patch and so on. See [[http://code.google.com/p/tortoisegit/wiki/ReleaseNotes | ReleaseNotes]] for detail. Welcome to contribute this project.

[[http://code.google.com/p/tortoisegit/downloads/list | Download]]

!!! [[http://digilander.libero.it/mcostalba/ | QGit]]

->QGit is a git GUI viewer built on Qt/C++.

With qgit you will be able to browse revisions history, view patch content and changed files, graphically following different development branches.
[[http://digilander.libero.it/mcostalba/#Download | Download]]

!!! [[http://trac.novowork.com/gitg/ | gitg]]

->gitg is a git repository viewer targeting gtk+/GNOME. One of its main objectives is to provide a more unified user experience for git frontends across multiple desktops. It does this not be writing a cross-platform application, but by close collaboration with similar clients for other operating systems (like GitX for OS X).

!!!! Features 
* Browse revision history. 
* Handle large repositories (loads linux repository, 17000+ revisions, under 1 second). 
* Commit changes. 
* Stage/unstage individual hunks. 
* Revert changes. 
* Show colorized diff of changes in revisions. 
* Browse tree for a given revision. 
* Export parts of the tree of a given revision. 
* Supply any refspec which a command such as 'git log' can understand to built the history. 
* Show and switch between branches in the history view.

Download: [[http://trac.novowork.com/gitg/wiki/Releases | releases]] or [[http://trac.novowork.com/gitg/wiki/WikiStart#Source | source]]

!!! [[http://gitbox.pierlis.com/ | Gitbox]]

->Gitbox is a Mac OS X graphical interface for Git version control system. In a single window you see branches, history and working directory status.

Everyday operations are easy: stage and unstage changes with a checkbox. Commit, pull, merge and push with a single click. Double-click a change to show a diff with FileMerge.app.

[[http://gitbox.pierlis.com/ | Download]]

!!! [[http://macendeavor.com/gity | Gity]]

The Gity website doesn't have much information, but from the screenshots on there it appears to be a feature rich open source OS X git gui.

[[http://macendeavor.com/gity/download/ | Download]] or [[http://github.com/beheadedmyway/gity | source]]

!!! [[http://meld.sourceforge.net/ | Meld]]

->Meld is a visual diff and merge tool. You can compare two or three files and edit them in place (diffs update dynamically). You can compare two or three folders and launch file comparisons. You can browse and view a working copy from popular version control systems such such as CVS, Subversion, Bazaar-ng and Mercurial [''and Git''].

[[http://ftp.gnome.org/pub/gnome/sources/meld/ | Downloads]]

!!! [[http://dekorte.com/projects/shareware/Katana | Katana]]

A Git GUIfor OSX by Steve Dekorte.

->At a glance, see which remote branches have changes to pull and local repos have changes to push. The git ops of add, commit, push, pull, tag and reset are supported as well as visual diffs and visual browsing of project hieracy that highlights local changes and additions.

Free for 1 repository, $25 for more.[[http://dekorte.com/projects/shareware/Katana | Download]]

!!! [[http://www.sproutmacapp.com/sprout | Sprout (formerly GitMac)]]

Focuses on making Git easy to use. Features a native Cocoa (mac-like) UI, fast repository browsing, cloning, push/pull, branching/merging, visual diff, remote branches, easy access to the Terminal, and more.

By making the most commonly used Git actions intuitive and easy to perform, Sprout (formerly GitMac) makes Git user-friendly. Compatible with most Git workflows, Sprout is great for designers and developers, team collaboration and advanced and novice users alike.

[[http://www.sproutmacapp.com/sprout | Download]] | [[http://www.sproutmacapp.com/sprout | Website]]

!!! [[http://www.git-tower.com/ | Tower]]

A feature-rich Git GUI for Mac OSX. 30-day free trial, $59USD for a single-user license.

[[http://www.git-tower.com/download | Download]] | [[http://www.git-tower.com/ | Website]]

!!! [[http://eclipse.org/egit/ | EGit]]

->EGit is an Eclipse Team provider for the Git version control system. Git is a distributed SCM, which means every developer has a full copy of all history of every revision of the code, making queries against the history very fast and versatile.

The EGit project is implementing Eclipse tooling on top of the JGit Java implementation of Git.

[[http://eclipse.org/egit/download/ | Download]] | [[http://eclipse.org/egit/ | Website]]

!!! [[http://code.google.com/p/gitextensions/ | Git Extensions]]

Open Source for Windows - installs everything you need to work with Git in a single package, easy to use.

->Git Extensions is a toolkit to make working with Git on Windows more intuitive. The shell extension will intergrate in Windows Explorer and presents a context menu on files and directories. There is also a Visual Studio plugin to use git from Visual Studio.

[[http://code.google.com/p/gitextensions/downloads/list | Download]]

''Big thanks to [[http://stackoverflow.com/users/745/dbrBlockquote | dbr]] for elaborating on the git gui stuff.''

!!! [[http://www.sourcetreeapp.com/ | SourceTree]]

SourceTree is a ''free'' Mac client for Git, Mercurial and SVN. Built by Atlassian, the folks behind BitBucket, it seems to work equally well with any VC system, which allows you to master a single tool for use with all of your projects, however they're version-controlled. Feature-packed, and FREE.

->Expert-Ready &amp; Feature-packed for both novice and advanced users:Review outgoing and incoming changesets. Cherry-pick between branches. Patch handling, rebase, stash / shelve and much more.

[[http://www.sourcetreeapp.com/download/ | Download]] | [[http://www.sourcetreeapp.com/ | Website]]

!! How to configure it to ignore files:

The ability to have git ignore files you don't wish it to track is very useful. To ignore a file or set of files you supply a pattern. The pattern syntax for git is fairly simple, but powerful. It is applicable to all three of the different files I will mention bellow. 
* A blank line ignores no files, it is generally used as a separator. 
* Lines staring with [@#@] serve as comments.  
* The [@!@] prefix is optional and will negate the pattern. Any negated pattern that matches will override lower precedence patterns.  
* Supports advanced expressions and wild cards  
** Ex: The pattern: [@*.[oa]@] will ignore all files in the repository ending in .o or .a (object and archive files) 
* If a pattern has a directory ending with a slash git will only match this directory and paths underneath it. This excludes regular files and symbolic links from the match.  
* A leading slash will match all files in that path name.  
** Ex: The pattern [@/*.c@] will match the file @@foo.c@@ but not @@bar/awesome.c@@

Great Example from the [[http://www.kernel.org/pub/software/scm/git/docs/gitignore.html | gitignore(5)]] man page:

(:source lang=bash:)
$ git status [...]
# Untracked files: [...]
#       Documentation/foo.html
#       Documentation/gitignore.html
#       file.o
#       lib.a
#       src/internal.o [...]
$ cat .git/info/exclude
# ignore objects and archives, anywhere in the tree.
*.[oa]
$ cat Documentation/.gitignore
# ignore generated html files,
*.html
# except foo.html which is maintained by hand
!foo.html
$ git status [...]
# Untracked files: [...]
#       Documentation/foo.html [...]
(:sourceend:)

Generally there are three different ways to ignore untracked files.

# Ignore for all users of the repository:
** Add a file named @@.gitignore@@ to the root of your working copy.
** Edit @@.gitignore@@ to match your preferences for which files should/shouldn't be ignored.
** @@git add .gitignore@@ and commit when you're done.

# Ignore for only your copy of the repository:
** Add/Edit the file @@$GIT_DIR/info/exclude@@ in your working copy, with your preferred patterns.
*** Ex: My working copy is ~/src/project1 so I would edit @@~/src/project1/.git/info/exclude@@
** You're done!

# Ignore in all situations, on your system:
** Global ignore patterns for your system can go in a file named what ever you wish.
** Mine personally is called @@~/.gitglobalignore@@
** I can then let git know of this file by editing my @@~/.gitconfig@@ file with the following line:
*** @@core.excludesfile = ~/.gitglobalignore@@
** You're done!

I find the [[http://www.kernel.org/pub/software/scm/git/docs/gitignore.html | gitignore]] man page to be the best resource for more information.

[[#322967]]

||
||[[ | up vote]] 47 [[ | down vote]] ||! How do you 'tag' a particular set of revisions''How do you 'mark' 'tag' or 'release' a particular set of revisions for a particular set of files so you can always pull that one later?''Using the @@git tag@@ command.To simply "tag" the current revision, you would just run.. @@git tag -a thetagname git tag -a 0.1 git tag -a 2.6.1-rc1 -m 'Released on 01/02/03'@@To list the current tags, simply run @@git tag@@ with no arguments, or @@-l@@ (lower case L): @@$ git tag -a thetagname # and enter a message, or use -m 'My tag annotation' $ git tag -l thetagname@@To delete a tag, you use the @@-d@@ flag: @@$ git tag -d thetagname  Deleted tag 'thetagname' $ git tag [no output]@@To tag a specific (previous) commit, you simply do.. @@git tag [tag name] [revision SHA1 hash]@@For example: @@git tag 1.1.1 81b15a68c6c3e71f72e766931df4e6499990385b@@ ---- Note: by default, git creates a "lightweight" tag (basically a reference to a specific revision). The "right" way is to use the @@-a@@ flag. This will launch your editor asking for a tag message (identical to asking for a commit message, you can also use the @@-m@@ flag to supply the tag message on the command line). Using an annotated tag creates an object with its own ID, date, tagger (author), and optionally a GPG signature (using the @@-s@@ tag). ''For further information on this, see [[http://www.rockstarprogrammer.org/post/2008/oct/16/git-tag-does-wrong-thing-default/ | this post]]'' @@git tag mytagwithmsg -a -m 'This is a tag, with message'@@And to list the tags with annotations, use the @@-n1@@ flag to show 1 line of each tag message (@@-n245@@ to show the first 245 lines of each annotation, and so on): @@$ git tag -l -n1 mytagwithmsg    This is a tag, with message@@For more information, see the [[http://www.kernel.org/pub/software/scm/git/docs/git-tag.html | git-tag(1) Manual Page]]||  ||[[http://stackoverflow.com:80/a/322967 | share]] || edited [[http://stackoverflow.com:80/posts/322967/revisions | Apr 6 '09 at 13:43]] [[<<]]|| answered Nov 27 '08 at 4:58[[http://stackoverflow.com:80/users/745/dbr | http://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/745/dbr | dbr]] [[<<]] 48k19123220|| ||
|| ||||  ||||  ||1 || || ||To push tags into the remote repo, add --tags when using git push (info from github help area). &ndash;&nbsp;[[http://stackoverflow.com:80/users/19617/hector-ramos | Hector Ramos]] Dec 23 '09 at 12:07 ||[[ | show '''4''' more comments]] ||

[[#5968622]]

||
||[[ | up vote]] 46 [[ | down vote]] ||Workflow example with GIT.Git is extremely flexible and adapts good to any workflow, but not enforcing a particular workflow might have the negative effect of making it hard to understand what you can do with git beyond the linear "backup" workflow, and how useful branching can be for example.This [[http://nvie.com/posts/a-successful-git-branching-model/ | blog post]] explains nicely a very simple but effective workflow that is really easy to setup using git.quoting from the blog post: We consider origin/master to be the main branch where the source code of HEAD always reflects a production-ready state:The workflow has become popular enough to have made a project that implements this workflow: [[https://github.com/nvie/gitflow | git-flow]]Nice illustration of a simple workflow, where you make all your changes in develop, and only push to master when the code is in a production state:http://i.stack.imgur.com/NAOZI.pngNow let's say you want to work on a new feature, or on refactoring a module. You could create a new branch, what we could call a "feature" branch, something that will take some time and might break some code. Once your feature is "stable enough" and want to move it "closer" to production, you merge your feature branch into develop. When all the bugs are sorted out after the merge and your code passes all tests rock solid, you push your changes into master.During all this process, you find a terrible security bug, that has to be fixed right away. You could have a branch called hotfixes, that make changes that are pushed quicker back into production than the normal "develop" branch.Here you have an illustration of how this feature/hotfix/develop/production workflow might look like (well explained in the blog post, and I repeat, the blog post explains the whole process in a lot more detail and a lot better than I do.http://i.stack.imgur.com/6rDUk.png||  ||[[http://stackoverflow.com:80/a/5968622 | share]] || edited [[http://stackoverflow.com:80/posts/5968622/revisions | May 13 '11 at 9:37]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/5968622/revisions |  3 revs [[<<]] ashwoods ]]|| ||
|| ||||  || || ||[[ | show '''5''' more comments]] ||

[[#2678236]]

||
||[[ | up vote]] 39 [[ | down vote]] ||Here's a copy of PJ Hyett's post, as it is not available anymore: ->!! Git Isn't HardNov 23, 2008When we tell people why they should use Git over Subversion, the go-to line is, &ldquo;Git does Subversion better than Subversion, but it does a lot more than that.&rdquo;The &ldquo;lot more&rdquo; is comprised of a bunch of stuff that makes Git really shine, but it can be pretty overwhelming for those coming from other SCM&rsquo;s like Subversion.That said, there&rsquo;s nothing stopping you from using Git just like you use Subversion while you&rsquo;re making the transition.Assuming you&rsquo;ve installed the necessary software and have a remote repository somewhere, this is how you would grab the code and push your changes back with Subversion:@@$ svn checkout svn://foo.googlecode.com/svn/trunk foo@@ [[<<]] @@# make your changes@@ [[<<]] @@$ svn commit -m "my first commit"@@And how would you do it in Git:@@$ git clone git@github.com:pjhyett/foo.git@@ [[<<]] @@# make your changes@@ [[<<]] @@$ git commit -a -m "my first commit"@@ [[<<]] @@$ git push@@One more command to make it happen in Git. That extra command has large implications, but for the purposes of this post, that&rsquo;s all we&rsquo;re talking about, one extra command.See, it really isn&rsquo;t that hard.'''Update:''' I&rsquo;d be remiss to not also mention that the equivalent of updating your local copy in Subversion compared to Git is @@svn update@@ and @@git pull@@, respectively. Only one command in both cases.||  ||[[http://stackoverflow.com:80/a/2678236 | share]] || answered [[http://stackoverflow.com:80/posts/2678236/revisions | Apr 20 '10 at 20:02]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/2678236/revisions |  Adam Davis ]]|| ||
|| ||||  ||||  ||3 || || ||Original link was [[http://www.pjhyett.com/posts/234-git-isn-t-hard | pjhyett.com/posts/234-git-isn-t-hard]] &ndash;&nbsp;[[http://stackoverflow.com:80/users/2915/adam-davis | Adam Davis]] Apr 20 '10 at 20:05 || ||||  ||3 || || ||[[http://pjhyett.com/2008/11/23/git-isnt-hard.html | pjhyett.com/2008/11/23/git-isnt-hard.html]] &ndash;&nbsp;[[http://stackoverflow.com:80/users/849078/adam-jurczyk | Adam Jurczyk]] Sep 23 '11 at 20:47 ||[[ | show '''1''' more comment]] ||

[[#323764]]

||
||[[ | up vote]] 33 [[ | down vote]] ||! How to install Git!! On Windows:Install [[http://code.google.com/p/msysgit/ | msysgit]]There are several downloads: 
* '''Git:''' Use this unless you specifically need one of the other options below. 
* '''PortableGit:''' Use this if you want to run Git on a PC without installing on that PC (e.g. running Git from a USB drive) 
* '''msysGit:''' Use this if you want to develop Git itself. If you just want to use Git for ''your'' source code, but don't want to edit ''Git's'' source code, you don't need this.This also installs a Cygwin bash shell, so you can use the @@git@@ in a nicer shell (than cmd.exe), and also includes git-gui (accessible via @@git gui@@ command, or the @@Start &gt; All Programs &gt; Git@@ menu)!! Mac OS XUse the [[http://code.google.com/p/git-osx-installer/ | git-osx-installer]], or you can also install from source!! Via a package managerInstall @@git@@ using your native package manager. For example, on Debian (or Ubuntu): @@apt-get install git-core@@Or on Mac OS X, via [[http://www.macports.org/ | MacPorts]]: @@sudo port install git-core+bash_completion+doc@@&hellip;or fink: @@fink install git@@&hellip;or [[http://github.com/mxcl/homebrew | Homebrew]]: @@brew install git@@On Red Hat based distributions, such as Fedora: @@yum install git@@In Cygwin the Git package can be found under the "devel" section!! From source (Mac OS X/Linux/BSD/etc.)In Mac OS X, if you have the Developer Tools installed, you can compile Git from source very easily. Download the latest version of Git as a @@.tar.bz@@ or @@.tar.gz@@ from http://git-scm.com/, and extract it (double click in Finder)On Linux/BSD/etc. it should be much the same. For example, in Debian (and Ubuntu), you need to install the @@build-essential@@ package via @@apt@@.Then in a Terminal, @@cd@@ to where you extracted the files (Running @@cd ~/Downloads/git*/@@ should work), and then run.. @@./configure &amp;&amp; make &amp;&amp; sudo make install@@This will install Git into the default place (@@/usr/local@@ - so @@git@@ will be in @@/usr/local/bin/git@@)It will prompt you to enter your password (for @@sudo@@), this is so it can write to the @@/usr/local/@@ directory, which can only be accessed by the "root" user so sudo is required!If you with to install it somewhere separate (so Git's files aren't mixed in with other tools), use @@--prefix@@ with the configure command: @@./configure --prefix=/usr/local/gitpath make sudo make install@@This will install the @@git@@ binary into @@/usr/local/bin/gitpath/bin/git@@ - so you don't have to type that every time you, you should add into your @@$PATH@@ by adding the following line into your @@~/.profile@@: @@export PATH="${PATH}:/usr/local/bin/gitpath/bin/"@@If you do not have sudo access, you can use @@--prefix=/Users/myusername/bin@@ and install into your home directory. Remember to add @@~/bin/@@ to @@$PATH@@The script [[http://www.simplicidade.org/notes/archives/2008/09/updated_xgitupd.html | x-git-update-to-latest-version]] automates a lot of this: ->This script updates my local clone of the git repo (localy at @@~/work/track/git@@), and then configures, installs (at @@/usr/local/git@@-@@git describe@@) and updates the @@/usr/local/git@@ symlink.This way, I can have @@/usr/local/git/bin@@ in my @@PATH@@ and I'm always using the latest version.The latest version of this script also installs the man pages. You need to tweak your @@MANPATH@@ to include the @@/usr/local/git/share/man@@ directory.||  ||[[http://stackoverflow.com:80/a/323764 | share]] || edited [[http://stackoverflow.com:80/posts/323764/revisions | Mar 24 '11 at 19:26]][[http://stackoverflow.com:80/users/5486/kyralessa | http://www.gravatar.com/avatar/750159e9cdab58c4b6547d382311c9af?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/5486/kyralessa | Kyralessa]] [[<<]] 40.7k987124|| answered Nov 27 '08 at 13:25[[http://stackoverflow.com:80/users/745/dbr | http://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/745/dbr | dbr]] [[<<]] 48k19123220|| ||
|| ||||  ||||  ||5 || || ||On Fedora: @@yum install git@@. For the GUI run @@yum install git-gui@@. &ndash;&nbsp;[[http://stackoverflow.com:80/users/12892/cristian-ciupitu | Cristian Ciupitu]] Sep 12 '09 at 2:17 || ||||  ||2 || || ||On Mac, @@sudo port install git-core+bash_completion+doc@@ &ndash;&nbsp;[[http://stackoverflow.com:80/users/46715/singletoned | Singletoned]] Oct 9 '09 at 11:08 ||[[ | show '''2''' more comments]] ||

[[#323898]]

||
||[[ | up vote]] 32 [[ | down vote]] ||! Git ResetSay you make a pull, merge it into your code, and decide you don't like it. Use git-log, or tig, and find the hash of wherever you want to go back to (probably your last commit before the pull/merge) copy the hash, and do: @@# Revert to a previous commit by hash: git-reset --hard &lt;hash&gt;@@Instead of the hash, you can use '''HEAD^''' as a shortcut for the previous commit. @@# Revert to previous commit: git-reset --hard HEAD^@@||  ||[[http://stackoverflow.com:80/a/323898 | share]] || edited [[http://stackoverflow.com:80/posts/323898/revisions | Mar 17 '10 at 7:22]] [[<<]]|| answered Nov 27 '08 at 14:25[[http://stackoverflow.com:80/users/14966/dean-rather | http://www.gravatar.com/avatar/7e039d6aad8ab7ebe721efb30188dc6c?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/14966/dean-rather | Dean Rather]] [[<<]] 4,86452544|| ||
|| ||||  ||||  ||4 || || ||This is the analog to a revert in most other centralized version control systems. &ndash;&nbsp;[[http://stackoverflow.com:80/users/51233/jeremy-wall | Jeremy Wall]] Aug 29 '09 at 1:52 || ||||  ||6 || || ||just a plain old @@git reset@@ should unstage accidental @@git add@@ &ndash;&nbsp;[[http://stackoverflow.com:80/users/13263/slf | slf]] Mar 26 '10 at 2:43 ||[[ | show '''1''' more comment]] ||

[[#2964397]]

||
||[[ | up vote]] 31 [[ | down vote]] ||! How do you set up a shared team repository?How to set up a ''normal'' repository is described [[http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/320140#320140 | here]] -- but how do you set up a team repository that everybody can pull and push from and to?!! Using a shared NFS file systemAssuming your team already has for instance a shared group membership that can be used. @@mkdir /your/share/folder/project.git cd /your/share/folder/project.git newgrp yourteamgroup # if necessary git init --bare --shared@@To start using this repository the easiest thing to do is start from a local repository you already have been using: @@cd your/local/workspace/project git remote add origin /your/share/folder/project.git git push origin master@@Others can now clone this and start working: @@cd your/local/workspace git clone /your/share/folder/project.git@@!! Using SSHSet up a user account on the target server. Whether you use an account with no password, an account with a password, or use @@authorized_keys@@ really depend on your required level of security. Take a look at [[http://stackoverflow.com/questions/1595848/configuring-git-over-ssh | Configuring Git over SSH]] for some more information.If all developers use the same account for accessing this shared repository, you do not need to use the @@--shared@@ option as above.After initing the repository in the same way as above, you do the initial push like this: @@cd your/local/workspace/project git remote add origin user@server:/path/to/project.git git push origin master@@See the similarity with the above? The only thing that might happen in addition is SSH asking for a password if the account has a password. If you get this prompt on an account without a password the SSH server probably has disabled @@PermitEmptyPasswords@@.Cloning now looks like this: @@cd your/local/workspace git clone user@server:/path/to/project.git@@||  ||[[http://stackoverflow.com:80/a/2964397 | share]] || edited [[http://stackoverflow.com:80/posts/2964397/revisions | Jun 3 '10 at 20:46]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/2964397/revisions |  2 revs [[<<]] Asgeir S. Nilsen ]]|| ||
|| ||||  || || ||[[ | show '''4''' more comments]] ||

[[#319465]]

||
||[[ | up vote]] 28 [[ | down vote]] ||@@git status@@ is your friend, use it often. Good for answering questions like: 
* What did that command just do? 
* What branch am I on? 
* What changes am I about to commit, and have I forgotten anything? 
* Was I in the middle of something last time I worked on this project (days, weeks, or perhaps months ago)?Unlike, say @@svn status@@, @@git status@@ runs nigh-instantly even on large projects. I often found it reassuring while learning git to use it frequently, to make sure my mental model of what was going on was accurate. Now I mostly just use it to remind myself what I've changed since my last commit.Obviously, it's much more useful if [[http://stackoverflow.com:80/#316062 | your .gitignore is sanely configured.]]||  ||[[http://stackoverflow.com:80/a/319465 | share]] || edited [[http://stackoverflow.com:80/posts/319465/revisions | Feb 17 '09 at 0:30]] [[<<]]|| answered Nov 26 '08 at 1:20[[http://stackoverflow.com:80/users/101/peter-burns | http://www.gravatar.com/avatar/cfd2734f1de31db479ec2a8a4ecbd649?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/101/peter-burns | Peter Burns]] [[<<]] 9,98141831|| ||
|| ||||  || || || ||

[[#316055]]

||
||[[ | up vote]] 27 [[ | down vote]] ||!! Commit ChangesOnce you've edited a file, you need to commit your changes to git. When you execute this command it will ask for a commit message - which is just a simple bit of text that tells everyone what you've changed. @@$ git commit source/main.c@@Will commit the file main.c in the directory ./source/ @@$ git commit -a # the -a flag pulls in all modified files@@will commit all changed files (but not new files, those need to be added to the index with git-add). If you want to commit only certain files then you will need to stage them first with git-add and then commit without the -a flag.Commiting only changes your local repository though not the remote repositories. If you want to send the commits to the remote repository then you will need to do a push. @@$ git push &lt;remote&gt; &lt;branch&gt; # push new commits to the &lt;branch&gt; on the &lt;remote&gt; repository@@For someone coming from CVS or SVN this is a change since the commit to the central repository now requires two steps.||  ||[[http://stackoverflow.com:80/a/316055 | share]] || edited [[http://stackoverflow.com:80/posts/316055/revisions | Aug 29 '09 at 1:40]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/316055/revisions |  4 revs, 4 users 41% [[<<]] Adam Davis ]]|| ||
|| ||||  || || || ||

[[#816614]]

||
||[[ | up vote]] 27 [[ | down vote]] ||! How do you branch?The default branch in a git repository is called @@master@@.To create a new branch use @@git branch &lt;branch-name&gt;@@To see a list of all branches in the current repository type @@git branch@@If you want to switch to another branch you can use @@git checkout &lt;branch-name&gt;@@To create a new branch and switch to it in one step @@git checkout -b &lt;branch-name&gt;@@To delete a branch, use @@git branch -d &lt;branch-name&gt;@@To create a branch with the changes from the current branch, do @@git stash git stash branch &lt;branch-name&gt;@@||  ||[[http://stackoverflow.com:80/a/816614 | share]] || edited [[http://stackoverflow.com:80/posts/816614/revisions | May 15 '10 at 9:49]] [[<<]]|| answered May 3 '09 at 8:56[[http://stackoverflow.com:80/users/830/markus-dulghier | http://www.gravatar.com/avatar/19cd48a6def49387cf13efa9420334d6?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/830/markus-dulghier | Markus Dulghier]] [[<<]] 1,1171016|| ||
|| ||||  ||||  ||11 || || ||you should mention the shortcut git checkout -b &lt;branch-name&gt; which creates a branch and switches to it in one step. It's probably the most common use case for a beginner and even advanced git user. &ndash;&nbsp;[[http://stackoverflow.com:80/users/51233/jeremy-wall | Jeremy Wall]] Aug 29 '09 at 1:46 || ||

[[#1350157]]

||
||[[ | up vote]] 21 [[ | down vote]] ||!! Getting the latest Code @@$ git pull &lt;remote&gt; &lt;branch&gt; # fetches the code and merges it into                               # your working directory $ git fetch &lt;remote&gt; &lt;branch&gt; # fetches the code but does not merge                               # it into your working directory $ git pull --tag &lt;remote&gt; &lt;branch&gt; # same as above but fetch tags as well $ git fetch --tag &lt;remote&gt; &lt;branch&gt; # you get the idea@@That pretty much covers every case for getting the latest copy of the code from the remote repository.||  ||[[http://stackoverflow.com:80/a/1350157 | share]] || edited [[http://stackoverflow.com:80/posts/1350157/revisions | Aug 29 '09 at 1:41]] [[<<]]|| answered Aug 29 '09 at 1:33[[http://stackoverflow.com:80/users/51233/jeremy-wall | http://www.gravatar.com/avatar/c92da37f356622a97ff8a2bfe3d4d962?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/51233/jeremy-wall | Jeremy Wall]] [[<<]] 7,5061334|| ||
|| ||||  || || || ||

[[#3260048]]

||
||[[ | up vote]] 20 [[ | down vote]] ||The [[http://progit.org | Pro Git]] free book is definitely my favorite, especially for beginners.||  ||[[http://stackoverflow.com:80/a/3260048 | share]] || edited [[http://stackoverflow.com:80/posts/3260048/revisions | Aug 29 '10 at 0:13]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/3260048/revisions |  2 revs, 2 users 56% [[<<]] Peter Mortensen ]]|| ||
|| ||||  || || || ||

[[#316058]]

||
||[[ | up vote]] 18 [[ | down vote]] ||[[http://www-cs-students.stanford.edu/~blynn/gitmagic/ | Git Magic]] is all you'll ever need. Guaranteed or your money back!||  ||[[http://stackoverflow.com:80/a/316058 | share]] || answered Nov 25 '08 at 1:02[[http://stackoverflow.com:80/users/22586/andrew | http://www.gravatar.com/avatar/271c72e2cc3ca9cc56d06adc4f28d06a?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/22586/andrew | Andrew ]] [[<<]] 1,082815|| ||
|| ||||  ||||  ||14 || || ||Sigh, I want my money back. Buggy software (msysGit) with an incomplete tutorial (GitMagic) == hours of work, which is hardly free &ndash;&nbsp;[[http://stackoverflow.com:80/users/87520/samgoody | SamGoody]] Apr 23 '09 at 14:30 ||[[ | show '''1''' more comment]] ||

[[#816636]]

||
||[[ | up vote]] 16 [[ | down vote]] ||! How do you merge branches?If you want to merge a branch (e.g. @@master@@ to @@release@@), make sure your current branch is the target branch you'd like to merge into (use @@git branch@@ or @@git status@@ to see your current branch).Then use @@git merge master@@(where @@master@@ is the name of the branch you want to merge with the current branch).If there are any conflicts, you can use @@git diff@@to see pending conflicts you have to resolve.||  ||[[http://stackoverflow.com:80/a/816636 | share]] || answered May 3 '09 at 9:08[[http://stackoverflow.com:80/users/830/markus-dulghier | http://www.gravatar.com/avatar/19cd48a6def49387cf13efa9420334d6?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/830/markus-dulghier | Markus Dulghier]] [[<<]] 1,1171016|| ||
|| ||||  ||||  ||1 || || ||So how do you resolve conflicts and complete the merge? &ndash;&nbsp;[[http://stackoverflow.com:80/users/48659/steve-folly | Steve Folly]] Oct 15 '09 at 15:22 || ||||  ||2 || || ||There is git mergetool which does a three-way-diff with your favourite tool (gvimdiff, kdiff3 or some more) &ndash;&nbsp;[[http://stackoverflow.com:80/users/35189/dave-vogt | Dave Vogt]] Oct 26 '09 at 13:04 || ||

[[#1654997]]

||
||[[ | up vote]] 16 [[ | down vote]] ||I've also found [[http://peepcode.com/products/git-internals-pdf | Git Internals]] to be very useful. It is written by Scott Chacon (author of Pro Git, and maintainer of the Git Community Book). What I like about Git Internals is it [[http://blog.jordanterrell.com/post/Favor-Concepts-Over-Commands.aspx | focuses on the concepts first and then the commands]], and being that it is ~100 small pages it is quickly digestible.||  ||[[http://stackoverflow.com:80/a/1654997 | share]] || answered [[http://stackoverflow.com:80/posts/1654997/revisions | Oct 31 '09 at 17:21]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/1654997/revisions |  Jordan ]]|| ||
|| ||||  || || || ||

[[#2114836]]

||
||[[ | up vote]] 13 [[ | down vote]] ||! How do you see the history of revisions to a file? @@git log -- filename@@||  ||[[http://stackoverflow.com:80/a/2114836 | share]] || answered [[http://stackoverflow.com:80/posts/2114836/revisions | Jan 22 '10 at 3:59]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/2114836/revisions |  Pierre-Antoine LaFayette ]]|| ||
|| ||||  || || ||[[ | show '''1''' more comment]] ||

[[#1590791]]

||
||[[ | up vote]] 12 [[ | down vote]] ||! How to track remote branchesAssuming there is a remote repository that you cloned your local repository from and also assuming that there is a branch named 'some_branch' on that remote repository, here is how to track it locally: @@# list remote branches git branch -r # start tracking one remote branch git branch --track some_branch origin/some_branch # change to the branch locally git checkout some_branch # make changes and commit them locally .... # push your changes to the remote repository: git push@@||  ||[[http://stackoverflow.com:80/a/1590791 | share]] || answered [[http://stackoverflow.com:80/posts/1590791/revisions | Oct 19 '09 at 20:02]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/1590791/revisions |  innaM ]]|| ||
|| ||||  || || ||[[ | show '''2''' more comments]] ||

[[#1762302]]

||
||[[ | up vote]] 11 [[ | down vote]] ||A real good paper for understanding how Git works is [[http://tom.preston-werner.com/2009/05/19/the-git-parable.html | The Git Parable]]. Very recommended!||  ||[[http://stackoverflow.com:80/a/1762302 | share]] || edited [[http://stackoverflow.com:80/posts/1762302/revisions | Aug 9 '10 at 14:10]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/1762302/revisions |  2 revs, 2 users 60% [[<<]] EricSchaefer ]]|| ||
|| ||||  || || || ||

[[#1762631]]

||
||[[ | up vote]] 10 [[ | down vote]] ||! How do you compare two revisions of a file, or your current file and a previous revision?Compare command is @@git diff@@.To compare 2 revisions of a file: @@$ git diff &lt;commit1&gt; &lt;commit2&gt; &lt;file_name&gt;@@That diffs commit1 against commit2; if you change order then files are diffed the other way round, which may not be what you expect...To compare current staged file against the repository: @@$ git diff --staged &lt;file_name&gt;@@To compare current unstaged file against the repository: @@$ git diff &lt;file_name&gt;@@||  ||[[http://stackoverflow.com:80/a/1762631 | share]] || answered [[http://stackoverflow.com:80/posts/1762631/revisions | Nov 19 '09 at 11:21]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/1762631/revisions |  kret ]]|| ||
|| ||||  || || || ||

[[#316039]]

||
||[[ | up vote]] 9 [[ | down vote]] ||Why yet another howto? There are really good ones on the net, like the [[http://www.sourcemage.org/Git_Guide | git guide]] which is perfect to begin. It has good links including the [[http://book.git-scm.com/ | git book]] to which one can contribute (hosted on git hub) and which is perfect for this collective task.On stackoverflow, I would really prefer to see your favorite tricks !Mine, which I discovered only lately, is @@git stash@@, explained [[http://book.git-scm.com/4_stashing.html | here]], which enables you to save your current job and go to another branchEDIT: as the previous post, if you really prefer stackoverlow format with posts as a wiki I will delete this answer||  ||[[http://stackoverflow.com:80/a/316039 | share]] || answered Nov 25 '08 at 0:52[[http://stackoverflow.com:80/users/38796/piotr-lesnicki | http://www.gravatar.com/avatar/52d7832f1ef16be20bd7eb96e31910da?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/38796/piotr-lesnicki | Piotr Lesnicki]] [[<<]] 3,21411119|| ||
|| ||||  || || ||[[ | show '''1''' more comment]] ||

[[#322989]]

||
||[[ | up vote]] 9 [[ | down vote]] ||! Console UI - Tig!! Installation: @@apt-get install tig@@!! UsageWhile inside a git repo, type 'tig', to view an interactive log, hit 'enter' on any log to see more information about it. '''h''' for help, which lists the basic functionality.!! Trivia"Tig" is "Git" backwards.||  ||[[http://stackoverflow.com:80/a/322989 | share]] || edited [[http://stackoverflow.com:80/posts/322989/revisions | Nov 27 '08 at 14:21]] [[<<]]|| answered Nov 27 '08 at 5:23[[http://stackoverflow.com:80/users/14966/dean-rather | http://www.gravatar.com/avatar/7e039d6aad8ab7ebe721efb30188dc6c?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/14966/dean-rather | Dean Rather]] [[<<]] 4,86452544|| ||
|| ||||  || || ||[[ | show '''2''' more comments]] ||

[[#1590803]]

||
||[[ | up vote]] 8 [[ | down vote]] ||! How can I create a branch on a remote repository?Assuming that you have cloned your remote repository from some single remote repository. @@# create a new branch locally git branch name_of_branch git checkout name_of_branch # edit/add/remove files     # ...  # Commit your changes locally git add fileName git commit -m Message # push changes and new branch to remote repository: git push origin name_of_branch:name_of_branch@@||  ||[[http://stackoverflow.com:80/a/1590803 | share]] || answered [[http://stackoverflow.com:80/posts/1590803/revisions | Oct 19 '09 at 20:05]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/1590803/revisions |  innaM ]]|| ||
|| ||||  ||||  ||11 || || ||why name_of_branch:name_of_branch ? &ndash;&nbsp;[[http://stackoverflow.com:80/users/6475/seun-osewa | Seun Osewa]] Mar 15 '10 at 13:18 ||[[ | show '''2''' more comments]] ||

[[#720216]]

||
||[[ | up vote]] 8 [[ | down vote]] ||I got started with the official [[http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html | Git tutorial]]. I think it's practical enough for beginners (I was, and still am, a beginner, by your definition! I barely grasp makefiles, I've only played a bit with Apache Subversion, etc.).||  ||[[http://stackoverflow.com:80/a/720216 | share]] || edited [[http://stackoverflow.com:80/posts/720216/revisions | Aug 29 '10 at 0:15]][[http://stackoverflow.com:80/users/63550/peter-mortensen | http://www.gravatar.com/avatar/18e42b0ddc143340cfb072987f45ca50?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/63550/peter-mortensen | Peter Mortensen]] [[<<]] 5,77973364|| answered Apr 6 '09 at 3:56[[http://stackoverflow.com:80/users/35364/hasen-j | http://www.gravatar.com/avatar/1ed4b7a51cba32768eee5ec2ad2d24cd?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/35364/hasen-j | hasen j]] [[<<]] 21.9k2695152|| ||
|| ||||  || || || ||

[[#5977604]]

||
||[[ | up vote]] 8 [[ | down vote]] ||!! How do I delete a branch on a remote repository?Perform a push in your remote using @@:@@ before the name of the branch @@git push origin :mybranchname@@being @@origin@@ the name of your remote and @@mybranchname@@ the name of the branch about to be deletedhttp://help.github.com/remotes/||  ||[[http://stackoverflow.com:80/a/5977604 | share]] || answered [[http://stackoverflow.com:80/posts/5977604/revisions | May 12 '11 at 11:58]] [[<<]]|| community wiki  [[<<]] [[http://stackoverflow.com:80/posts/5977604/revisions |  Felipe Sabino ]]|| ||
|| ||||  || || || ||

[[#323748]]

||
||[[ | up vote]] 7 [[ | down vote]] ||'''Push and pull changes'''In an simplified way, just do @@git push@@ and @@git pull@@. Changes are merged and if there's a conflict git will let you know and you can resolve it manually.When you first push to a remote repository you need to do a @@git push origin master@@ (master being the master branch). From then on you just do the @@git push@@.Push tags with @@git push --tags@@.||  ||[[http://stackoverflow.com:80/a/323748 | share]] || answered Nov 27 '08 at 13:21[[http://stackoverflow.com:80/users/38795/dylanfm | http://www.gravatar.com/avatar/af2187787494c38fb16c8533d0cd693b?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/38795/dylanfm | dylanfm]] [[<<]] 4,12811423|| ||
|| ||||  || || || ||

[[#323906]]

||
||[[ | up vote]] 7 [[ | down vote]] ||! Checking Out CodeFirst go to an empty dir, use "git init" to make it a repository, then clone the remote repo into your own. @@git clone user@host.com:/dir/to/repo@@Wherever you initially clone from is where "git pull" will pull from by default.||  ||[[http://stackoverflow.com:80/a/323906 | share]] || answered Nov 27 '08 at 14:27[[http://stackoverflow.com:80/users/14966/dean-rather | http://www.gravatar.com/avatar/7e039d6aad8ab7ebe721efb30188dc6c?s=32&d=identicon&r=PG]][[http://stackoverflow.com:80/users/14966/dean-rather | Dean Rather]] [[<<]] 4,86452544|| ||
|| ||||  ||||  ||7 || || ||I think clone does the init step for you removing the need to run init first. git init is really mostly for creating the first repository or for special configurations with multiple remotes that you want to set up different than a standard clone. &ndash;&nbsp;[[http://stackoverflow.com:80/users/51233/jeremy-wall | Jeremy Wall]] Aug 29 '09 at 1:51 || ||

>><<
(:linkwikiwords:)

>>comment<<
Summary: Stackoverflow article on git
Tags: git, tools, version control, stackoverflow, saved page
(:tags-hide tools, version control, stackoverflow, saved page:)
(:title version control - Git for beginners: The definitive practical guide - Stack Overflow:)
Source: http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide
Parent: (Technology.)Git
includeme: [[Technology.Git]
Categories:[[!Compilations]], [[!Links]
>><<

Page saved at: Sun, 10 Mar 2013 21:24:46 -0500


