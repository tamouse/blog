>>comment<<
Summary: When passing in option parameters, sometimes it is useful to check that only valid options have been entered.
Parent: (Technology.)Ruby
IncludeMe: [[(Technology.)Ruby]]
Categories: [[!HowTos]], [[!FAQ]]
Tags: ruby, options, parameters
(:tags-hide ruby, options, parameters:)
Source: none
Posted: Mon Dec  9 07:04:19 2013
>><<

>>faq<<
Q: How do I check that only valid options have been passed to my method?
A: Take the difference between the option hash keys and an array of valid keys.
>><<

In ruby, one can pass options to a method via an inferred hash by placing the options at the end of the method call parameter list:

    my_method(object, option1: true)

for example.
>><<

!! Define the method with an options hash

(:source lang=ruby linenum tabwidth=2 header="method definition" :)
def my_method(parm1, parm2, options={})
  # ... (code)
end
(:sourceend:)


!! Create a constant array with the list of valid option parameters

(:source lang=ruby linenum tabwidth=2 header="Valid method option parameters" :)
VALID_OPTIONS = [
  :option1,
  :option2,
  :option3
]
(:sourceend:)

!! Take the array difference between the options keys and the valid options

(:source lang=ruby linenum tabwidth=2 header="check options" :)
unless options.nil?
  invalid_options = options.keys - VALID_OPTIONS
  raise "Invalid options given: #{invalid_options}" unless invalid_options.empty?
end
(:sourceend:)

!! DRY it up

If you do this a lot (say more than twice :) ) you should consider making the check for invalid parameters a method:

(:source lang=ruby linenum tabwidth=2 header="check_options" :)
def check_options(options={}, valid_options=[])
  raise ArgumentError.new("options not a Hash: #{options.class}") unless options.nil? || options.kind_of?(Hash)
  return [] if options.nil?
  options.keys - valid_options
end

def check_options!(options, valid_options)
  invalid_options = check_options
  raise "Invalid options given: #{invalid_options}" unless invalid_options.empty?
end
(:sourceend:)

The first method simply returns an array of invalid options, or an empty array if there were no invalid options. Note that a nil options set is valid.

The second method is dangerous in that it will raise an exception if invalid options were given.

In your method, then, you can do this:

(:source lang=ruby linenum tabwidth=2 header="my method with options vetting" :)
def my_method(parm1, parm2, options={})
  check_options!(options, [:option1, :option2, :option3])

  # ... (code)
end
(:sourceend:)

!! Finally, a module

Here is a complete module for vetting options parameters:

(:source lang=ruby linenum tabwidth=2 header="CheckOptionsParameters Module" :) 
module CheckOptionsParameters

  def check_for_invalid_options(options={},valid_options=[])
    raise(ArgumentError.new("options is not a Hash: #{options.class}")) unless options.nil? || options.kind_of?(Hash)
    valid_options = Array(valid_options)
    return [] if options.nil? || options.keys.empty? || valid_options.nil? || valid_options.empty?
    options.keys - valid_options
  end

  def check_for_invalid_options!(options={},valid_options=[])
    invalid_options = check_option_parameters(options, valid_options)
    raise "Invalid options given: #{invalid_options}" unless invalid_options.empty?
  end

  def invalid_options?(options={}, valid_options=[])
    check_for_invalid_options.empty?
  end


  def check_for_missing_options(options={}, required_options=[])
    raise(ArgumentError.new("options is not a Hash: #{options.class}")) unless options.kind_of?(Hash)
    required_options = Array(required_options)
    return [] if required_options.empty?    
    required_options - options.keys
  end
  
  def check_for_missing_options!(options={}, required_options=[])
    missing_options = check_for_missing_options(options, required_options)
    raise "Required options missing: #{missing_options}" unless missing_options.empty?
  end

  def missing_options?(options={}, require_options=[])
    check_for_missing_options(options, require_options).empty?
  end

end
(:sourceend:)
