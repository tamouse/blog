[[#excerpt]]
It can be tricky to figure out how to return mutliple values or non-scalar objects from a perl function. One has to be aware of the context that one is working, and whether one is returning a reference or not.
[[#excerptend]]

!!Returning an Array

Let's initialize an array:

(:source lang=perl -getcode:)
my @a = (); # this sets up an empty array and assigns it to @a
(:sourceend:)

In the above code, we declare an array variable [@ @a @] and assign an empty (or null) array to it. This will be useful when writing a function that will store it's return values in an array:

(:source lang=perl -getcode header="A simple function":)
sub my_function {
    my $n = shift; # get the first paramter
    my @a = (); # initialize the array
    for (my $i = 0; $i < $n; $i++) {
        push @a, $i; # pushes the current value of $i to the array @a
    }
    return @a;
}
(:sourceend:)

The last line of the function returns the array [@@a@], which will in fact return an array reference to the calling routine. Let's see how this works:

(:source lang=perl -getcode header="Calling the function":)
my @my_a = my_function(10);
print join(", ",@my_a)."\n";
(:sourceend:)

The output from the above will be:
[@
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
@]

So it's really very simple to return an array.

!! Returning multiple values

If you aren't really working with an array, you can still return multiple values from a function. In this case, we'll create an array reference instead.

(:source lang=perl -getcode header="function that returns a pair of values":)
sub my_other_function {
    my $first = 'first';
    my $second = 'second';

    # maybe do something

    return ($first, $second); # this creates an anonymous array reference
}
(:sourceend:)

To call and use the values in [@my_other_function@], simply recapitulate the array environment in the assignment:

(:source lang=perl -getcode:)
my ($f,$s) = my_other_function();
print "\$f=$f, \$s=$s\n";
(:sourceend:)

The output of the above is:
[@
$f=first, $s=second
@]

Just as we expect;





>>comment<<
Summary:a short howto explaining about returning non-scalar values from a perl function
Parent:(Technology.)Perl
IncludeMe:[[Technology.Perl]]
Categories:[[!HowTos]], [[!Articles]]
Tags: perl, howtos, examples
(:tags-hide perl, howtos, examples:)
>><<

