[[#excerpt]]
On the ruby-talk list, someone was trying to implement method to convert a string to title case, using [[stop words]] that would not get capitalized.

'''Update:''' using Modules!

[[#excerptend]]

The original version of this how-to talked about using the [[OpenClass| ''Open CLass'' ]] technique (aka [[MonkeyPatching | "Monkeypatching"]]) for modifying an existing class. While Open Classing is a viable technique, it is largely frowned upon for the possibility of injecting or causing errors which may be hard to find.

The book [[ ''Metaprogramming in Ruby'' -> http://wiki.tamaratemple.com/Technology/BookReviewMetaprogrammingInRuby]] makes it clear that one should '''Think in Modules'''. So, I decided to rewrite this how-to utilizing Ruby modules instead of the Open Class.

So let's add our titlecase method again, only using a Module.

!! Creating the Module

Refactoring the end version of the method, we've got it down to a single chain in both methods, destructive and duplicative.

(:source lang=ruby linenum header="My String Extensions":)
module MyStringExtensions

  # destructive version
  def titlecase!(stopwords=%w{and or a an the of for by})
    self.gsub!(/\w+/) do |w| 
      stopwords.map(&:downcase).include?(w.downcase!) ? w : w.capitalize
    end.gsub!(/^\w/,&:capitalize)
  end

  # duplicating version
  def titlecase(stopwords=%w{and or a an the of for by})
    dup.titlecase!(stopwords)
  end
    
end
(:sourceend:)

Now, we'll include the module into the String class via a @@send@@:

(:source lang=ruby linenum:)
String.send(:include, MyStringExtensions)
(:sourceend:)

And, we'll give it a go:

(:source lang=text:)
irb(main):140:0> p = 'now is the winter of our discount tent'
"now is the winter of our discount tent"
irb(main):141:0> p.titlecase
"Now Is the Winter of Our Discount Tent"
irb(main):142:0> p # UNCHANGED!
"now is the winter of our discount tent"
irb(main):143:0> p.titlecase!
"Now Is the Winter of Our Discount Tent"
irb(main):144:0> p # CHANGED!
"Now Is the Winter of Our Discount Tent"
irb(main):145:0> 
(:sourceend:)





!! The Open Class way

In [[Ruby]], it's very simple to add a new method to a class. All you have to do is re-open the class:

(:source lang=ruby linenum tabwidth=4 header="titlecase.rb":)
=begin
  
   In ruby, the String class includes methods for converting to upper
   and lower case (upcase and downcase). It doesn't seem to include the
   conversion to title case, however, much less the opportunity to
   include stop words (words which will not be converted).

   This is a quick example to show how to add a method to String that
   will do this.

=end 

class String

=begin

   The titlecase method will return a string where the words in phrase
   are converted to capitalized words, unless a word is in the list of
   stopwords. The first word will be capitalized regardless of whether
   it's in the stopword list or not.

   You can pass in your own list of stopwords as well.

=end
  def titlecase(stopwords=%w{and or and/or a an the of})
    t = self.split.each do |w|
      w[0]=w[0].upcase unless stopwords.include?(w)
      w
    end.join(" ")
    t[0]=t[0].upcase # force first word to upper case, regardless
    t # return the full string
  end
end
(:sourceend:)

Then:

(:source lang=ruby:)
require 'titlecase'

"the quick brown fox or a rabbit in the hen house of love and his doggie".titlecase
# => "The Quick Brown Fox or a Rabbit In the Hen House of Love and His Doggie" 

=begin

   Passing in our own list of stop words:
   Note that the first character of the string is **always** up-cased.

=end
"the quick and the dead".titlecase(%w{the dead})
# => "The Quick And the dead" 

(:sourceend:)


!!! Refactor 1 - use gsub instead of split

And another way to implement the method:

(:source lang=ruby linenum:)
  def titlecase(stopwords=%w{and or a an the of})
    t = self.gsub(/\w+/) do |w|
      stopwords.include?(w.downcase) ? w.downcase : w.capitalize
    end
    t[0]=t[0].upcase
    t # return the full string
  end
(:sourceend:)

!!! Refactor 2 - without intermediate assignment

And we'll get it down to 3 lines:

(:source lang=ruby:)
def titlecase(stopwords=%w{and or a an the of})
  self.gsub!(/\w+/){|w| stopwords.include?(w) ? w.downcase : w.capitalize}
  self[0]=self[0].upcase
  self
end
(:sourceend:)

!!! Refactor 3 - a more complete implementation

This version offers a destructive (!-method) and non-desctructive methods. It also more correctly will convert the stop words to lowercase on comparison, as well as converting them in the substitution.

(:source lang=ruby linenum tabwidth=4 header="destructive and non-destructive versions":)
class String # Open Class

  # destructive version
  def titlecase!(stopwords=%w{and or a an the of})
    self.gsub!(/\w+/){|w| stopwords.include?(w.downcase) ? w.downcase
      : w.capitalize}
    self[0]=self[0].upcase
    self
  end

  # duplicating version
  def titlecase(stopwords=%w{and or a an the of})
    t = self.dup
    t.titlecase!(stopwords)
  end

end

# assign a string
p = "the and, without further adieu, some international incident or other caused us to pray"
# => "the and, without further adieu, some international incident or other caused us to pray" 

# Non-destructive form:
p.titlecase
# => "The and, Without Further Adieu, Some International Incident or Other Caused Us To Pray" 

# unchanged from original
p
# => "the and, without further adieu, some international incident or other caused us to pray" 


# destructive form:
p.titlecase!
# => "The and, Without Further Adieu, Some International Incident or Other Caused Us To Pray" 

# changed original
p
# => "The and, Without Further Adieu, Some International Incident or Other Caused Us To Pray" 
(:sourceend:)

>>comment<<
Summary:A example of extending a Ruby class, and implementing a useful method besides.
Parent:(Technology.)Ruby
IncludeMe:[[(Technology.)Ruby]]
Categories:[[!HowTos]]
Tags: ruby, classes, string, titlecase
(:tags-hide ruby, classes, string, titlecase :)
>><<

