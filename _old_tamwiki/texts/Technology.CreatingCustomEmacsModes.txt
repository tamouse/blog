!!Using [@define-derived-mode@]

This method seems to be quite the easiest, although getting font stuff to work if you're defining your own fonts can be quite the task.

!!! Simple start-up

At a minimum, you need to provide the following to define a new major mode:

(:source lang=lisp linenum:)
(define-derived-mode mynew-mode text-mode
  "MyNew"
  "New mode for my stuff
  \\{mynew-mode-map}"
  )

(provide 'mynew-mode)
(:sourcend:)

This makes a new mode, named @@mynew-mode@@ which is derived from @@text-mode@@. You can use any mode you wish to start from.

You should provide a means for customizing the mode parameters. First create a customization group and set the parent group appropriately for this mode:

(:source lang=lisp linenum header="Add customization group":)
(defgroup mynew nil
  "New customization group for demo"
  :prefix "mynew-"
  :group 'wp)


(define-derived-mode mynew-mode fundamental-mode
  "MyNew"
  "Major mode for demonstration.

\\{mynew-mode-map}"
;; add customization group
  :group 'mynew
  )
(:sourceend:)

!!! Specifying emacs fonts

Emacs has a nice font scheme it calls ''Faces'' that will allow you to perform syntax markup on your files. However, setting faces can be quite a chore. You have to specify the set of keywords that will determine what face to apply. Keywords are really regular expressions that match strings in your file. There is a nifty function called @@regexp-opt@@ which you pass a list of strings containing your keywords and it returns an optimized regexp:

(:source lang=lisp linenum header="regexp-opt example":)
(regexp-opt '("if" "else" "elseif" "while" "unless" "for" "foreach" "switch" "do") t)

Returns:

"\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)"
(:sourceend:)

You then plug that optimized regexp into a constant for the mode:

(:source lang=lisp linenum header="define keyword constants":)
(defconst mynew-mode-font-lock-keywords-basic-syntax
  (list
   '("\\<\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)\\>" . font-lock-keyword-face)
   '("\\(\\$\\w*\\)" . font-lock-variable-name-face))
  "Minimal markup of language syntax and variable names")
(:sourceend:)

To use these, you need to modify the @@define-derived-mode@@ macro once again:

(:source lang=lisp linenum header="add font lock info" highlight="7":)
(define-derived-mode mynew-mode fundamental-mode
  "MyNew"
  "Major mode for demonstration.

\\{mynew-mode-map}"
  :group 'mynew
  (set (make-local-variable 'font-lock-defaults) '(mynew-mode-font-lock-keywords-basic-syntax))
  )
(:sourceend:)

!!! Defining your own face names

When I started out on this, I didn't realize this, but you need to define variables to use your face names appropriately. So, for each new face name you want:

(:source lang=lisp linenum header="creating new face names":)
(defgroup mynew-faces nil
  "New face customization group for demo"
  :group 'mynew
  :group 'faces)

(defvar mynew-syntax-face 'mynew-syntax-face)

(defface mynew-syntax-face
  '((t :color blue3))
  "Face for syntax keywords"
  :group 'mynew-faces)

(defvar mynew-variable-face 'mynew-variable-face)

(defface mynew-variable-face
  '((t :color green))
  "Face for variable names"
  :group 'mynew-faces)
(:sourceend:)

And change the font lock keywords definition

(:source lang=lisp linenum header="use new face names" highlight="3,4":)
(defconst mynew-mode-font-lock-keywords-basic-syntax
  (list
   '("\\<\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)\\>" . mynew-syntax-face)
   '("\\(\\$\\w*\\)" . mynew-variable-face))
  "Minimal markup of language syntax and variable names")
(:sourceend:)


!!Using [@generic-mode@]


Link: [[emacs-fu: creating custom modes the easy way with generic-mode -> http://emacs-fu.blogspot.com/2010/04/creating-custom-modes-easy-way-with.html]]


>>quote<<
(:nolinkwikiwords:)
Syntax highlighting is useful when editing configuration files, programs and so on, as it helps to prevent errors and makes it easier to quickly scan documents.

Emacs supports syntax highlighting (font locking in emacs lingo) for many different file types. For many common cases (e.g. editing for many programming languages, org-mode), emacs' support goes much further than merely colorizing keywords, and offers all kinds of 'magic' (auto-completion, 'electricity', special key bindings, â€¦). For some other file types, at least keywords are given some different color.

Still, there are files that are not recognized by emacs as having some special format; these are displayed as plain text. This may be the case for less-common configuration files, or your own specific formats.

Defining a full 'mode' for such file types can be a lot of work. Fortunately, emacs offers a easier way: generic-mode. generic-mode defines a whole lot of mode of modes for common formats, but also defines the define-generic-mode macro to create your own modes. 
(:linkwikiwords:)
>><<
(:Tags: emacs, emacs modes:)
(:tags-hide emacs, emacs modes:)
(:Posted: 2012-4-5 10:13:)



>>comment<<
This goes at the bottom of the page, hidden by comment block class
Summary:Some ways to create a major mode in emacs
Parent:(Technology.)Emacs
IncludeMe:[[Technology.Emacs]]
Categories:[[!HowTos]]
>><<

