version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:17.0) Gecko/17.0 Firefox/17.0
author=tamara
charset=ISO-8859-1
csum=fix bug in dryer code
ctime=1354024937
host=71.63.215.130
name=Technology.BuildingAFilterFromAForm
rev=3
targets=Technology.BuildingAFilterFromAForm,Technology.PHP,Technology.IncludeMe,Category.HowTos,Category.BestPractices,Technology.DontRepeatYourself,Technology.DRYer
text=>>comment%3c%3c%0aSummary:A PHP example of building a query filter from a form submission of filter values%0aParent:(Technology.)PHP%0aIncludeMe:[[(Technology.)PHP]]%0aCategories:[[!HowTos]], [[!BestPractices]]%0aTags: php, sql, best practices, examples%0a(:tags-hide php, sql, best practices, examples :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0aFrom a recent question submitted on the php-general mailing list, someone was building a filter for a query based on submitted form values. The code was very WET, and could have been simplified a lot. This is a way to implement this concept.%0a[[#excerptend]]%0a%0a%0a!! Filtering%0a%0aWhen an application displays a table of data, sometimes the user may want to restrict the records that get shown. This is a classic filtering of data task.%0a%0aOn the displayed page, you can display a form that will let the user enter various values, often best with some guidance as to what kinds of things can be filtered. Upon submission, your application will take the submitted values and build a new query that only retrieves the matching records and display those.%0a%0aThe example here will only show the portion of code that deals with building the @@WHERE@@ clause of the sql query. The parts that are needed to clean and decontaminate the data entered by the user are not covered here.%0a%0a!! The Data%0a%0aLet's suppose the data is coming from a single table in the database, let's call it @@cars@@. A plausable table description might be:%0a%0a(:source lang=sql:)%0aCREATE TABLE cars (%0a  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,%0a  make VARCHAR(30),%0a  model VARCHAR(30),%0a  year INT(10),%0a  color VARCHAR(30),%0a  price NUMERIC(10,2)%0a) ENGINE=INNODB;%0a(:sourceend:)%0a%0a!! The Initial Query%0a%0aThe initial query in this example is probably very straight-forward, just select all the table fields:%0a%0a(:source lang=php linenum:)%0a$select_all_from_cars_sql = "SELECT * FROM cars";%0a(:sourceend:)%0a%0a!! Filtered Queries%0a%0aAfter the user submits the filter form, the query is modified based on the fields the user filled out, for example, the following is the intended query:%0a%0a(:source lang=php linenum:)%0a$select_all_from_cars_sql = "SELECT * FROM cars WHERE make LIKE $make_filter AND year > $since_year_filter";%0a(:sourceend:)%0a%0aWhere @@$make_filter@@ and @@$since_year_filter@@ are based on values the user submitted in the form, suitably decontaminated.%0a%0aBut how to build this?%0a%0aKeeping things [[DRY -> DontRepeatYourself]] as possible, the following shows how to build up the @@WHERE@@ clause:%0a%0a(:source lang=php linenum:)%0a// we start in the same place%0a$select_all_from_cars_sql = "SELECT * FROM cars";%0a%0a// initilize the $filters array to empty%0a$filters = Array();%0a%0a// walk through the filter form fields, cleaning the inputs and building the filters array%0a// NOTE: you will have to do something a little different if you're using multiselect options, checkboxes, etc.%0a//       this code assumes that the form fields contain actual comparison values.%0aforeach (array('make', 'model', 'year_lower', 'year_upper', 'color', 'price_lower', 'price_upper') as $field)%0a{%0a  if (array_key_exists($field,$_POST)) {%0a    $filters[$field] = cleanse($_POST[$field]);%0a  }%0a}%0a%0a// now build out the query with the where clause%0aif (!empty($filters)) {%0a  // initialize an array to hold the clauses to be ANDed%0a  $where = Array();%0a  foreach($filters as $field => $value) {%0a    switch($field) {%0a      case 'make':%0a      case 'model':%0a      case 'color':%0a         $where[] = "$field LIKE '%25$value%25'";%0a	 break;%0a%0a      case 'year_lower':%0a         $where[] = "year >= $value";%0a	 break;%0a%0a      case 'year_upper':%0a         $where[] = "year %3c= $value";%0a	 break;%0a%0a      case 'price_lower':%0a        $where[] = "price >= $value";%0a	break;%0a%0a      case 'price_higher':%0a        $where[] = "price %3c= $value";%0a	break;%0a%0a      default:%0a        break;%0a    }%0a  }%0a  $select_all_from_cars_sql .= " WHERE " . implode(" AND ",$where);%0a}%0a(:sourceend:)%0a%0a!! Even DRYer%0a%0aIt's possible to make this code even DRYer by building a table that maps filter field, comparison type, and value format.%0a%0a(:source lang=php linenum:)%0a$filter_map = Array();%0a$filter_map['make']  = array('op' => 'LIKE','valuefmt' => '"%25%25%25s%25%25"');%0a$filter_map['model'] = $filter_map['make'];%0a$filter_map['color'] = $filter_map['make'];%0a$filter_map['year_lower'] = array('op' => '>=', 'valuefmt' => %25d);%0a$filter_map['year_upper'] = array('op' => '%3c=', 'valuefmt' => %25d);%0a$filter_map['price_lower'] = $filter_map['year_lower'];%0a$filter_map['price_upper'] = $filter_map['year_upper'];%0a(:sourceend:)%0a%0aThen, the code to build the filter becomes even shorter:%0a%0a(:source lang=php linenum:)%0a// we start in the same place%0a$select_all_from_cars_sql = "SELECT * FROM cars";%0a%0a// initilize the $where clause%0a$where = Array();%0a%0a// walk through the filter form fields, cleaning the inputs and building the where clause%0a// NOTE: you will have to do something a little different if you're using multiselect options, checkboxes, etc.%0a//       this code assumes that the form fields contain actual comparison values.%0aforeach (array('make', 'model', 'year_lower', 'year_upper', 'color', 'price_lower', 'price_upper') as $field)%0a{%0a  if (array_key_exists($field,$_POST)) {%0a    $where[]= "$field ".$filter_map[$field]['op'].' '.sprintf($filter_map[$field]['valuefmt'],cleanse($_POST[$field]));%0a  }%0a}%0a%0aif (!empty($where)) {%0a  $select_all_from_cars_sql .= " WHERE " . implode(" AND ",$where);%0a}%0a(:sourceend:)%0a
time=1354071095
author:1354071095=tamara
csum:1354071095=fix bug in dryer code
diff:1354071095:1354025969:=147,148c147%0a%3c if (!empty($where)) {%0a%3c   $select_all_from_cars_sql .= " WHERE " . implode(" AND ",$where);%0a---%0a> $select_all_from_cars_sql .= " WHERE " . implode(" AND ",$where);%0a
host:1354071095=71.63.215.130
author:1354025969=tamara
csum:1354025969=make it DRYer
diff:1354025969:1354024937:=113,149d112%0a%3c !! Even DRYer%0a%3c %0a%3c It's possible to make this code even DRYer by building a table that maps filter field, comparison type, and value format.%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $filter_map = Array();%0a%3c $filter_map['make']  = array('op' => 'LIKE','valuefmt' => '"%25%25%25s%25%25"');%0a%3c $filter_map['model'] = $filter_map['make'];%0a%3c $filter_map['color'] = $filter_map['make'];%0a%3c $filter_map['year_lower'] = array('op' => '>=', 'valuefmt' => %25d);%0a%3c $filter_map['year_upper'] = array('op' => '%3c=', 'valuefmt' => %25d);%0a%3c $filter_map['price_lower'] = $filter_map['year_lower'];%0a%3c $filter_map['price_upper'] = $filter_map['year_upper'];%0a%3c (:sourceend:)%0a%3c %0a%3c Then, the code to build the filter becomes even shorter:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c // we start in the same place%0a%3c $select_all_from_cars_sql = "SELECT * FROM cars";%0a%3c %0a%3c // initilize the $where clause%0a%3c $where = Array();%0a%3c %0a%3c // walk through the filter form fields, cleaning the inputs and building the where clause%0a%3c // NOTE: you will have to do something a little different if you're using multiselect options, checkboxes, etc.%0a%3c //       this code assumes that the form fields contain actual comparison values.%0a%3c foreach (array('make', 'model', 'year_lower', 'year_upper', 'color', 'price_lower', 'price_upper') as $field)%0a%3c {%0a%3c   if (array_key_exists($field,$_POST)) {%0a%3c     $where[]= "$field ".$filter_map[$field]['op'].' '.sprintf($filter_map[$field]['valuefmt'],cleanse($_POST[$field]));%0a%3c   }%0a%3c }%0a%3c %0a%3c $select_all_from_cars_sql .= " WHERE " . implode(" AND ",$where);%0a%3c }%0a%3c (:sourceend:)%0a
host:1354025969=71.63.215.130
author:1354024937=tamara
csum:1354024937=new page
diff:1354024937:1354024937:=1,112d0%0a%3c >>comment%3c%3c%0a%3c Summary:A PHP example of building a query filter from a form submission of filter values%0a%3c Parent:(Technology.)PHP%0a%3c IncludeMe:[[(Technology.)PHP]]%0a%3c Categories:[[!HowTos]], [[!BestPractices]]%0a%3c Tags: php, sql, best practices, examples%0a%3c (:tags-hide php, sql, best practices, examples :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c From a recent question submitted on the php-general mailing list, someone was building a filter for a query based on submitted form values. The code was very WET, and could have been simplified a lot. This is a way to implement this concept.%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a%3c !! Filtering%0a%3c %0a%3c When an application displays a table of data, sometimes the user may want to restrict the records that get shown. This is a classic filtering of data task.%0a%3c %0a%3c On the displayed page, you can display a form that will let the user enter various values, often best with some guidance as to what kinds of things can be filtered. Upon submission, your application will take the submitted values and build a new query that only retrieves the matching records and display those.%0a%3c %0a%3c The example here will only show the portion of code that deals with building the @@WHERE@@ clause of the sql query. The parts that are needed to clean and decontaminate the data entered by the user are not covered here.%0a%3c %0a%3c !! The Data%0a%3c %0a%3c Let's suppose the data is coming from a single table in the database, let's call it @@cars@@. A plausable table description might be:%0a%3c %0a%3c (:source lang=sql:)%0a%3c CREATE TABLE cars (%0a%3c   id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,%0a%3c   make VARCHAR(30),%0a%3c   model VARCHAR(30),%0a%3c   year INT(10),%0a%3c   color VARCHAR(30),%0a%3c   price NUMERIC(10,2)%0a%3c ) ENGINE=INNODB;%0a%3c (:sourceend:)%0a%3c %0a%3c !! The Initial Query%0a%3c %0a%3c The initial query in this example is probably very straight-forward, just select all the table fields:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $select_all_from_cars_sql = "SELECT * FROM cars";%0a%3c (:sourceend:)%0a%3c %0a%3c !! Filtered Queries%0a%3c %0a%3c After the user submits the filter form, the query is modified based on the fields the user filled out, for example, the following is the intended query:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $select_all_from_cars_sql = "SELECT * FROM cars WHERE make LIKE $make_filter AND year > $since_year_filter";%0a%3c (:sourceend:)%0a%3c %0a%3c Where @@$make_filter@@ and @@$since_year_filter@@ are based on values the user submitted in the form, suitably decontaminated.%0a%3c %0a%3c But how to build this?%0a%3c %0a%3c Keeping things [[DRY -> DontRepeatYourself]] as possible, the following shows how to build up the @@WHERE@@ clause:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c // we start in the same place%0a%3c $select_all_from_cars_sql = "SELECT * FROM cars";%0a%3c %0a%3c // initilize the $filters array to empty%0a%3c $filters = Array();%0a%3c %0a%3c // walk through the filter form fields, cleaning the inputs and building the filters array%0a%3c // NOTE: you will have to do something a little different if you're using multiselect options, checkboxes, etc.%0a%3c //       this code assumes that the form fields contain actual comparison values.%0a%3c foreach (array('make', 'model', 'year_lower', 'year_upper', 'color', 'price_lower', 'price_upper') as $field)%0a%3c {%0a%3c   if (array_key_exists($field,$_POST)) {%0a%3c     $filters[$field] = cleanse($_POST[$field]);%0a%3c   }%0a%3c }%0a%3c %0a%3c // now build out the query with the where clause%0a%3c if (!empty($filters)) {%0a%3c   // initialize an array to hold the clauses to be ANDed%0a%3c   $where = Array();%0a%3c   foreach($filters as $field => $value) {%0a%3c     switch($field) {%0a%3c       case 'make':%0a%3c       case 'model':%0a%3c       case 'color':%0a%3c          $where[] = "$field LIKE '%25$value%25'";%0a%3c 	 break;%0a%3c %0a%3c       case 'year_lower':%0a%3c          $where[] = "year >= $value";%0a%3c 	 break;%0a%3c %0a%3c       case 'year_upper':%0a%3c          $where[] = "year %3c= $value";%0a%3c 	 break;%0a%3c %0a%3c       case 'price_lower':%0a%3c         $where[] = "price >= $value";%0a%3c 	break;%0a%3c %0a%3c       case 'price_higher':%0a%3c         $where[] = "price %3c= $value";%0a%3c 	break;%0a%3c %0a%3c       default:%0a%3c         break;%0a%3c     }%0a%3c   }%0a%3c   $select_all_from_cars_sql .= " WHERE " . implode(" AND ",$where);%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a
host:1354024937=71.63.215.130
