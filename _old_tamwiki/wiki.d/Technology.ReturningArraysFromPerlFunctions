version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:11.0) Gecko/20100101 Firefox/11.0
author=tamara
charset=ISO-8859-1
csum=new page
ctime=1333598704
host=71.63.211.0
name=Technology.ReturningArraysFromPerlFunctions
rev=2
targets=Technology.Perl,Technology.IncludeMe,Category.HowTos,Category.Articles
text=[[#excerpt]]%0aIt can be tricky to figure out how to return mutliple values or non-scalar objects from a perl function. One has to be aware of the context that one is working, and whether one is returning a reference or not.%0a[[#excerptend]]%0a%0a!!Returning an Array%0a%0aLet's initialize an array:%0a%0a(:source lang=perl -getcode:)%0amy @a = (); # this sets up an empty array and assigns it to @a%0a(:sourceend:)%0a%0aIn the above code, we declare an array variable [@ @a @] and assign an empty (or null) array to it. This will be useful when writing a function that will store it's return values in an array:%0a%0a(:source lang=perl -getcode header="A simple function":)%0asub my_function {%0a    my $n = shift; # get the first paramter%0a    my @a = (); # initialize the array%0a    for (my $i = 0; $i %3c $n; $i++) {%0a        push @a, $i; # pushes the current value of $i to the array @a%0a    }%0a    return @a;%0a}%0a(:sourceend:)%0a%0aThe last line of the function returns the array [@@a@], which will in fact return an array reference to the calling routine. Let's see how this works:%0a%0a(:source lang=perl -getcode header="Calling the function":)%0amy @my_a = my_function(10);%0aprint join(", ",@my_a)."\n";%0a(:sourceend:)%0a%0aThe output from the above will be:%0a[@%0a0, 1, 2, 3, 4, 5, 6, 7, 8, 9%0a@]%0a%0aSo it's really very simple to return an array.%0a%0a!! Returning multiple values%0a%0aIf you aren't really working with an array, you can still return multiple values from a function. In this case, we'll create an array reference instead.%0a%0a(:source lang=perl -getcode header="function that returns a pair of values":)%0asub my_other_function {%0a    my $first = 'first';%0a    my $second = 'second';%0a%0a    # maybe do something%0a%0a    return ($first, $second); # this creates an anonymous array reference%0a}%0a(:sourceend:)%0a%0aTo call and use the values in [@my_other_function@], simply recapitulate the array environment in the assignment:%0a%0a(:source lang=perl -getcode:)%0amy ($f,$s) = my_other_function();%0aprint "\$f=$f, \$s=$s\n";%0a(:sourceend:)%0a%0aThe output of the above is:%0a[@%0a$f=first, $s=second%0a@]%0a%0aJust as we expect;%0a%0a%0a%0a%0a%0a>>comment%3c%3c%0aSummary:a short howto explaining about returning non-scalar values from a perl function%0aParent:(Technology.)Perl%0aIncludeMe:[[Technology.Perl]]%0aCategories:[[!HowTos]], [[!Articles]]%0aTags: perl, howtos, examples%0a(:tags-hide perl, howtos, examples:)%0a>>%3c%3c%0a
time=1333598858
author:1333598858=tamara
csum:1333598858=new page
diff:1333598858:1333598704:=
host:1333598858=71.63.211.0
author:1333598704=tamara
diff:1333598704:1333598704:=1,80d0%0a%3c [[#excerpt]]%0a%3c It can be tricky to figure out how to return mutliple values or non-scalar objects from a perl function. One has to be aware of the context that one is working, and whether one is returning a reference or not.%0a%3c [[#excerptend]]%0a%3c %0a%3c !!Returning an Array%0a%3c %0a%3c Let's initialize an array:%0a%3c %0a%3c (:source lang=perl -getcode:)%0a%3c my @a = (); # this sets up an empty array and assigns it to @a%0a%3c (:sourceend:)%0a%3c %0a%3c In the above code, we declare an array variable [@ @a @] and assign an empty (or null) array to it. This will be useful when writing a function that will store it's return values in an array:%0a%3c %0a%3c (:source lang=perl -getcode header="A simple function":)%0a%3c sub my_function {%0a%3c     my $n = shift; # get the first paramter%0a%3c     my @a = (); # initialize the array%0a%3c     for (my $i = 0; $i %3c $n; $i++) {%0a%3c         push @a, $i; # pushes the current value of $i to the array @a%0a%3c     }%0a%3c     return @a;%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c The last line of the function returns the array [@@a@], which will in fact return an array reference to the calling routine. Let's see how this works:%0a%3c %0a%3c (:source lang=perl -getcode header="Calling the function":)%0a%3c my @my_a = my_function(10);%0a%3c print join(", ",@my_a)."\n";%0a%3c (:sourceend:)%0a%3c %0a%3c The output from the above will be:%0a%3c [@%0a%3c 0, 1, 2, 3, 4, 5, 6, 7, 8, 9%0a%3c @]%0a%3c %0a%3c So it's really very simple to return an array.%0a%3c %0a%3c !! Returning multiple values%0a%3c %0a%3c If you aren't really working with an array, you can still return multiple values from a function. In this case, we'll create an array reference instead.%0a%3c %0a%3c (:source lang=perl -getcode header="function that returns a pair of values":)%0a%3c sub my_other_function {%0a%3c     my $first = 'first';%0a%3c     my $second = 'second';%0a%3c %0a%3c     # maybe do something%0a%3c %0a%3c     return ($first, $second); # this creates an anonymous array reference%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c To call and use the values in [@my_other_function@], simply recapitulate the array environment in the assignment:%0a%3c %0a%3c (:source lang=perl -getcode:)%0a%3c my ($f,$s) = my_other_function();%0a%3c print "\$f=$f, \$s=$s\n";%0a%3c (:sourceend:)%0a%3c %0a%3c The output of the above is:%0a%3c [@%0a%3c $f=first, $s=second%0a%3c @]%0a%3c %0a%3c Just as we expect;%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:a short howto explaining about returning non-scalar values from a perl function%0a%3c Parent:(Technology.)Perl%0a%3c IncludeMe:[[Technology.Perl]]%0a%3c Categories:[[!HowTos]], [[!Articles]]%0a%3c Tags: perl, howtos, examples%0a%3c (:tags-hide perl, howtos, examples:)%0a%3c >>%3c%3c%0a
host:1333598704=71.63.211.0
