version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0
author=tamara
charset=ISO-8859-1
csum=add fetching messages section
ctime=1370145520
host=71.63.215.130
name=Technology.GmailImapWithRuby
rev=7
targets=Technology.GmailImapWithRuby,Technology.Ruby,Technology.IncludeMe,Category.HowTos
text=>>comment%3c%3c%0aSummary:Notes about how to connect with gmail via IMAP using Ruby%0aParent:(Technology.)Ruby%0aIncludeMe:[[(Technology.)Ruby]]%0aCategories:[[!HowTos]]%0aTags: ruby, gmail, imap, howtos%0a(:tags-hide ruby, gmail, imap, howtos :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0aI've been moving my mail handling away from the [[http://gmail.com|gmail]] web site because%0aGoogle broke my mail workflow. I'm now using fetchmail%0ato pull over mail in real time. I wanted to be able to access the%0afolders in gmail as well, and was casting about for a way to do%0athat. None of the gems seemed workable, so I decide to start%0aexperimenting with%0a[[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html| Net::IMAP]] in the standard ruby library.%0a[[#excerptend]]%0a%0a!! Setting up a connection to gmail%0a%0aActually, this was real simple, thanks to%0a[[http://blog.ethanvizitei.com/2008/06/using-ruby-for-imap-with-gmail.html | this blog post]], which gives the final answer at the end.%0a%0a(:source lang=ruby linenum:)%0agmail = Net::IMAP.new('imap.gmail.com', :port => 993, :ssl => true)%0agmail.login(username, password)%0a(:sourceend:)%0a%0aAnd we're connected.%0a%0a!! What folders are in my gmail account?%0a%0aThis took a bit of reading and re-reading to figure out, but it's%0aactually more straight-forward than it seems.%0a%0aThe%0a[[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-list|[@#list@]]]%0amethod is what we're looking for:%0a%0a(:source lang=ruby linenum:)%0aall_folders = gmail.list '/', '*'%0app all_folders.map(&:name)%0a["Apple Mail To Do",%0a "Business",%0a "Career",%0a "Career/HPAA Jobs",%0a # ...snippy %0a "Tech General",%0a "Tech General/AWS Stuff",%0a # ...snippy%0a "Tech General/PHP-General",%0a "Tech General/PmWiki",%0a # ...snippy%0a "[Gmail]",%0a "[Gmail]/All Mail",%0a "[Gmail]/Archive"]%0a(:sourceend:)%0a%0a!!! Validating folder names%0a%0a>>important%3c%3c%0aWhen you get all the folders like this, you have to be careful. If you have a folder that includes a forward slassh  (/) in the name, the way the list method works assumes there is a parent folder for each element delimeted by the slash(es). If this isn't the case, methods that use the folder (mailbox in IMAP parlance) will throw an exception: [@Net::IMAP::NoResponseError@], so wrap whatever you're doing in a [@begin-rescue@] block.%0a>>%3c%3c%0a%0a(:source lang=ruby linenum header="Checking if this folder is valid":)%0adef valid_folder?(folder)%0a    begin%0a      gmail.examine(folder)%0a      true%0a    rescue Net::IMAP::NoResponseError => e%0a      if (e.to_s =~ /Invalid folder/) || (e.to_s =~ /Unknown Mailbox/)%0a        false%0a      else%0a        raise e%0a      end%0a    end      %0aend%0a(:sourceend:)%0a%0a%0a%0a%0a!! Choosing a folder%0a%0aAgain, easily done with the [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-select|[@#select@]]] method, simply give it the name of the folder snagged from the list above:%0a%0a(:source lang=ruby linenum:)%0afolder = gmail.select("Tech General")%0a(:sourceend:)%0a%0aAlternatively, if you are only going to read from the folder, use the [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-examine|[@#examine@]]] method:%0a%0a(:source lang=ruby linenum:)%0afolder = gmail.examine("Tech General")%0a(:sourceend:)%0a%0a%0a!! Getting the number of messages in a folder%0a%0aTo retrieve the number of messages in a folder, you use the [[|[@#status@]]] method. The [@#status@] method takes two arguments, the folder name, and an array of the kinds of status you want. To just get a count of all the messages, use the [@"MESSAGES"@] key:%0a%0a(:source lang=ruby linenum:)%0agmail.status("Tech General", ["MESSAGES"])["MESSAGES"] # => 115%0a(:sourceend:)%0a%0a!! Fetching messages%0a%0aFetching messages is a little tricky. In the very good%0astackoverflow.com question%0a[[http://stackoverflow.com/questions/1101101/how-to-read-the-body-text-of-an-email-using-rubys-net-imap-library|"How to read the body text of an email using Ruby's Net::IMAP library]], in%0athe answers that talk about using the [[|[@mail@]]] gem:%0a%0a(:source lang=ruby linenum:)%0arequire 'mail'%0a%0amail = Mail.read_from_string(gmail.fetch(-1,'RFC822').first.attr['RFC822']) # retrieves the last email%0abody = mail.body%0afrom = mail.from%0a(:sourceend:)%0a
time=1370162933
author:1370162933=tamara
csum:1370162933=add fetching messages section
diff:1370162933:1370162872:=105,119d104%0a%3c (:sourceend:)%0a%3c %0a%3c !! Fetching messages%0a%3c %0a%3c Fetching messages is a little tricky. In the very good%0a%3c stackoverflow.com question%0a%3c [[http://stackoverflow.com/questions/1101101/how-to-read-the-body-text-of-an-email-using-rubys-net-imap-library|"How to read the body text of an email using Ruby's Net::IMAP library]], in%0a%3c the answers that talk about using the [[|[@mail@]]] gem:%0a%3c %0a%3c (:source lang=ruby linenum:)%0a%3c require 'mail'%0a%3c %0a%3c mail = Mail.read_from_string(gmail.fetch(-1,'RFC822').first.attr['RFC822']) # retrieves the last email%0a%3c body = mail.body%0a%3c from = mail.from%0a
host:1370162933=71.63.215.130
author:1370162872=tamara
diff:1370162872:1370157332:=
host:1370162872=71.63.215.130
author:1370157332=tamara
csum:1370157332=add section on validating folder names
diff:1370157332:1370156219:=60,61d59%0a%3c !!! Validating folder names%0a%3c %0a63c61%0a%3c When you get all the folders like this, you have to be careful. If you have a folder that includes a forward slassh  (/) in the name, the way the list method works assumes there is a parent folder for each element delimeted by the slash(es). If this isn't the case, methods that use the folder (mailbox in IMAP parlance) will throw an exception: [@Net::IMAP::NoResponseError@], so wrap whatever you're doing in a [@begin-rescue@] block.%0a---%0a> If you want to use this, you have to be careful: assigning a folder name in gmail that includes a forward slash (/), the way the list method works assumes there is a parent folder for each element delimeted by the slash(es). If this isn't the case, methods that use the folder (mailbox in IMAP parlance) will throw an exception: [@Net::IMAP::NoResponseError: Invalid Folder: %3cfolder name>@], so wrap whatever you're doing in a [@begin-rescue@] block.%0a66,83c64,65%0a%3c (:source lang=ruby linenum header="Checking if this folder is valid":)%0a%3c def valid_folder?(folder)%0a%3c     begin%0a%3c       gmail.examine(folder)%0a%3c       true%0a%3c     rescue Net::IMAP::NoResponseError => e%0a%3c       if (e.to_s =~ /Invalid folder/) || (e.to_s =~ /Unknown Mailbox/)%0a%3c         false%0a%3c       else%0a%3c         raise e%0a%3c       end%0a%3c     end      %0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c %0a%3c %0a---%0a> %0a> %0a92,105d73%0a%3c Alternatively, if you are only going to read from the folder, use the [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-examine|[@#examine@]]] method:%0a%3c %0a%3c (:source lang=ruby linenum:)%0a%3c folder = gmail.examine("Tech General")%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c !! Getting the number of messages in a folder%0a%3c %0a%3c To retrieve the number of messages in a folder, you use the [[|[@#status@]]] method. The [@#status@] method takes two arguments, the folder name, and an array of the kinds of status you want. To just get a count of all the messages, use the [@"MESSAGES"@] key:%0a%3c %0a%3c (:source lang=ruby linenum:)%0a%3c gmail.status("Tech General", ["MESSAGES"])["MESSAGES"] # => 115%0a%3c (:sourceend:)%0a
host:1370157332=71.63.215.130
author:1370156219=tamara
csum:1370156219=add gmail tag
diff:1370156219:1370145595:minor=6,7c6,7%0a%3c Tags: ruby, gmail, imap, howtos%0a%3c (:tags-hide ruby, gmail, imap, howtos :)%0a---%0a> Tags: ruby, imap, howtos%0a> (:tags-hide ruby, imap, howtos :)%0a
host:1370156219=71.63.215.130
author:1370145595=tamara
diff:1370145595:1370145523:=2c2%0a%3c Summary:Notes about how to connect with gmail via IMAP using Ruby%0a---%0a> Summary:Notes about how to connect with GMail via IMAP using Ruby%0a17c17,18%0a%3c [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html| Net::IMAP]] in the standard ruby library.%0a---%0a> [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html%0a> | Net::IMAP]] in the standard ruby library.%0a
host:1370145595=71.63.215.130
author:1370145523=tamara
diff:1370145523:1370145520:=
host:1370145523=71.63.215.130
author:1370145520=tamara
diff:1370145520:1370145520:=1,74d0%0a%3c >>comment%3c%3c%0a%3c Summary:Notes about how to connect with GMail via IMAP using Ruby%0a%3c Parent:(Technology.)Ruby%0a%3c IncludeMe:[[(Technology.)Ruby]]%0a%3c Categories:[[!HowTos]]%0a%3c Tags: ruby, imap, howtos%0a%3c (:tags-hide ruby, imap, howtos :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c I've been moving my mail handling away from the [[http://gmail.com|gmail]] web site because%0a%3c Google broke my mail workflow. I'm now using fetchmail%0a%3c to pull over mail in real time. I wanted to be able to access the%0a%3c folders in gmail as well, and was casting about for a way to do%0a%3c that. None of the gems seemed workable, so I decide to start%0a%3c experimenting with%0a%3c [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html%0a%3c | Net::IMAP]] in the standard ruby library.%0a%3c [[#excerptend]]%0a%3c %0a%3c !! Setting up a connection to gmail%0a%3c %0a%3c Actually, this was real simple, thanks to%0a%3c [[http://blog.ethanvizitei.com/2008/06/using-ruby-for-imap-with-gmail.html | this blog post]], which gives the final answer at the end.%0a%3c %0a%3c (:source lang=ruby linenum:)%0a%3c gmail = Net::IMAP.new('imap.gmail.com', :port => 993, :ssl => true)%0a%3c gmail.login(username, password)%0a%3c (:sourceend:)%0a%3c %0a%3c And we're connected.%0a%3c %0a%3c !! What folders are in my gmail account?%0a%3c %0a%3c This took a bit of reading and re-reading to figure out, but it's%0a%3c actually more straight-forward than it seems.%0a%3c %0a%3c The%0a%3c [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-list|[@#list@]]]%0a%3c method is what we're looking for:%0a%3c %0a%3c (:source lang=ruby linenum:)%0a%3c all_folders = gmail.list '/', '*'%0a%3c pp all_folders.map(&:name)%0a%3c ["Apple Mail To Do",%0a%3c  "Business",%0a%3c  "Career",%0a%3c  "Career/HPAA Jobs",%0a%3c  # ...snippy %0a%3c  "Tech General",%0a%3c  "Tech General/AWS Stuff",%0a%3c  # ...snippy%0a%3c  "Tech General/PHP-General",%0a%3c  "Tech General/PmWiki",%0a%3c  # ...snippy%0a%3c  "[Gmail]",%0a%3c  "[Gmail]/All Mail",%0a%3c  "[Gmail]/Archive"]%0a%3c (:sourceend:)%0a%3c %0a%3c >>important%3c%3c%0a%3c If you want to use this, you have to be careful: assigning a folder name in gmail that includes a forward slash (/), the way the list method works assumes there is a parent folder for each element delimeted by the slash(es). If this isn't the case, methods that use the folder (mailbox in IMAP parlance) will throw an exception: [@Net::IMAP::NoResponseError: Invalid Folder: %3cfolder name>@], so wrap whatever you're doing in a [@begin-rescue@] block.%0a%3c >>%3c%3c%0a%3c %0a%3c %0a%3c %0a%3c !! Choosing a folder%0a%3c %0a%3c Again, easily done with the [[http://www.ruby-doc.org/stdlib-2.0/libdoc/net/imap/rdoc/Net/IMAP.html#method-i-select|[@#select@]]] method, simply give it the name of the folder snagged from the list above:%0a%3c %0a%3c (:source lang=ruby linenum:)%0a%3c folder = gmail.select("Tech General")%0a%3c (:sourceend:)%0a%3c %0a
host:1370145520=71.63.215.130
