version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.71 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=Use platform-independent File::NULL 
ctime=1374866320
host=71.63.215.130
name=Technology.RubyFAQTemporarilyRedirectStderr
rev=3
targets=Technology.RubyFAQTemporarilyRedirectStderr,Technology.Ruby,Category.Links,Category.HowTos
text=>>comment%3c%3c%0aSummary: a nice set of methods to temporarily redirect, capture or slience STDERR%0aSource: http://stackoverflow.com/questions/4459330/how-do-i-temporarily-redirect-stderr-in-ruby%0aPosted: July 26, 2013, at 02:07 PM%0aTags: ruby, faq, stderr, capture%0a(:tags-hide ruby, faq, stderr, capture:)%0aParent: (Technology.)Ruby%0aincludeme: [[Technology.Ruby]]%0aCategories: [[!Links]], [[!HowTos]]%0a>>%3c%3c%0a%0a!! How do I temporarily redirect stderr in Ruby?%0a%0a%0a(:nolinkwikiwords:)%0a%0a(:source lang=ruby linenum tabwidth=2 header="molf's version" :)%0arequire "stringio"%0a%0adef capture_stderr%0a  # The output stream must be an IO-like object. In this case we capture it in%0a  # an in-memory IO object so we can return the string value. You can assign any%0a  # IO object here.%0a  previous_stderr, $stderr = $stderr, StringIO.new%0a  yield%0a  $stderr.string%0aensure%0a  # Restore the previous value of stderr (typically equal to STDERR).%0a  $stderr = previous_stderr%0aend%0a%0a# Usage:%0acaptured_output = capture_stderr do%0a  # Does not output anything directly.%0a  $stderr.puts "test"%0aend%0a%0acaptured_output%0a#=> "test\n"%0a(:sourceend:)%0a%0a(:source lang=ruby linenum tabwidth=2 header="DHH version" :)%0adef silence_streams(*streams)%0a  on_hold = streams.collect { |stream| stream.dup }%0a  streams.each do |stream|%0a    stream.reopen(File::NULL)%0a    stream.sync = true%0a  end%0a  yield%0aensure%0a  streams.each_with_index do |stream, i|%0a    stream.reopen(on_hold[i])%0a  end%0aend%0a%0a#Usage:%0a%0asilence_streams(STDERR) { do_something }%0a(:sourceend:)%0a%0a%0a%0a(:linkwikiwords:)%0a
time=1374866710
author:1374866710=tamara
csum:1374866710=Use platform-independent File::NULL 
diff:1374866710:1374866508:=46c46%0a%3c     stream.reopen(File::NULL)%0a---%0a>     stream.reopen(RUBY_PLATFORM =~ /mswin/ ? 'NUL:' : '/dev/null')%0a
host:1374866710=71.63.215.130
author:1374866508=tamara
diff:1374866508:1374866320:=55,56c55%0a%3c %0a%3c #Usage:%0a---%0a> Usage:%0a
host:1374866508=71.63.215.130
author:1374866320=tamara
diff:1374866320:1374866320:=1,62d0%0a%3c >>comment%3c%3c%0a%3c Summary: a nice set of methods to temporarily redirect, capture or slience STDERR%0a%3c Source: http://stackoverflow.com/questions/4459330/how-do-i-temporarily-redirect-stderr-in-ruby%0a%3c Posted: July 26, 2013, at 02:07 PM%0a%3c Tags: ruby, faq, stderr, capture%0a%3c (:tags-hide ruby, faq, stderr, capture:)%0a%3c Parent: (Technology.)Ruby%0a%3c includeme: [[Technology.Ruby]]%0a%3c Categories: [[!Links]], [[!HowTos]]%0a%3c >>%3c%3c%0a%3c %0a%3c !! How do I temporarily redirect stderr in Ruby?%0a%3c %0a%3c %0a%3c (:nolinkwikiwords:)%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2 header="molf's version" :)%0a%3c require "stringio"%0a%3c %0a%3c def capture_stderr%0a%3c   # The output stream must be an IO-like object. In this case we capture it in%0a%3c   # an in-memory IO object so we can return the string value. You can assign any%0a%3c   # IO object here.%0a%3c   previous_stderr, $stderr = $stderr, StringIO.new%0a%3c   yield%0a%3c   $stderr.string%0a%3c ensure%0a%3c   # Restore the previous value of stderr (typically equal to STDERR).%0a%3c   $stderr = previous_stderr%0a%3c end%0a%3c %0a%3c # Usage:%0a%3c captured_output = capture_stderr do%0a%3c   # Does not output anything directly.%0a%3c   $stderr.puts "test"%0a%3c end%0a%3c %0a%3c captured_output%0a%3c #=> "test\n"%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2 header="DHH version" :)%0a%3c def silence_streams(*streams)%0a%3c   on_hold = streams.collect { |stream| stream.dup }%0a%3c   streams.each do |stream|%0a%3c     stream.reopen(RUBY_PLATFORM =~ /mswin/ ? 'NUL:' : '/dev/null')%0a%3c     stream.sync = true%0a%3c   end%0a%3c   yield%0a%3c ensure%0a%3c   streams.each_with_index do |stream, i|%0a%3c     stream.reopen(on_hold[i])%0a%3c   end%0a%3c end%0a%3c Usage:%0a%3c %0a%3c silence_streams(STDERR) { do_something }%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c %0a%3c (:linkwikiwords:)%0a
host:1374866320=71.63.215.130
