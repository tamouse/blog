version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=Page moved to Technology.UnitTestingBackbonejsApplications20130826085139
ctime=1377525123
host=71.63.215.130
name=SavedArticles.UnitTestingBackbonejsApplications20130826085139
rev=5
targets=
text=(:redirect Technology.UnitTestingBackbonejsApplications20130826085139:)
time=1377526439
author:1377526439=tamara
csum:1377526439=Page moved to Technology.UnitTestingBackbonejsApplications20130826085139
diff:1377526439:1377526406:=1c1,682%0a%3c (:redirect Technology.UnitTestingBackbonejsApplications20130826085139:)%0a\ No newline at end of file%0a---%0a> (:nolinkwikiwords:)%0a> ! Unit Testing Backbone.js Applications%0a> %0a> [[http://www.sitepoint.com/author/sthomas/ | Stephen Thomas]]%0a> %0a> Published February 25, 2013%0a> %0a> After spending hours, maybe ''days'', putting the finishing touches on an awesome new feature for your web application, you&rsquo;re finally ready to see it in action. You add the new code to your JavaScript base, build the release candidate, and fire up your browser, expecting to be amazed. Then &hellip; Uh Oh&hellip; the new feature may be working fine, but some other critical part of your app &ndash; a part you didn&rsquo;t ''touch'' while developing the new version &ndash; has gone horribly awry. Now you&rsquo;re faced with the challenge of backtracking through days of work to try and figure out how you broke the existing code. Happy days are definitely not here again.%0a> %0a> That very scenario has bitten me more than I&rsquo;d like to admit. And if you&rsquo;ve been coding awhile, you&rsquo;ve probably seen it as well. Consider, though, what makes this scenario so painful. It isn&rsquo;t really because our new code broke existing code; that&rsquo;s inevitable in development. The real pain is that it took so long to notice the breakage. With so much development since we knew our application was working, there&rsquo;s a vast amount of code in which the bug may be hiding. And, though it may seem a bit like hunting for a needle in a haystack, we have no choice but to dive it.%0a> %0a> In this article we are truly going to banish this scenario from our JavaScript development. No more digging through hours, days, or weeks of code looking for a needle. The principle we&rsquo;ll adopt is a simple one: find any bug ''as soon as'' we create it. That&rsquo;s right; we&rsquo;re going to set up a development environment and process that tells us immediately when we write code that introduces a bug. Furthermore, the extra effort we put into the process won&rsquo;t go to waste once initial development is complete. The same test code that catches our development bugs will be completely reusable in an integration environment. We can easily incorporate the tests into our source code managements system, blocking bugs before they can even get into our code base.%0a> %0a> In the four sections that follow, we&rsquo;ll first look at the tools we need for a JavaScript testing environment. We&rsquo;ll then consider a trivial application, one that&rsquo;s simple enough to understand, yet has all the features and functionality that might exist in a real production web application. The final two sections demonstrate how we can use our environment to test the example app during development and, once initial development is complete, during integration.%0a> %0a> !! Assembling a JavaScript Testing Environment%0a> %0a> Our unit testing nirvana requires some development tools that may not be in your workbench (yet). The news, both good and bad, is that there are options aplenty. That&rsquo;s good news because it gives us options, and that&rsquo;s bad news because the pace of front end development today means that there are far too many options. To focus our evaluation, let&rsquo;s be explicit about our top two goals. Everything else is secondary:%0a> %0a> # Our environment must support frictionless, continuous testing during development.%0a> # Tests created during development must be equally usable in integration.%0a> %0a> !!! Execution Environments%0a> %0a> For JavaScript coding, there is no better development environment than the modern web browser. Whether your taste is Firebug or Webkit&rsquo;s Developer Tools, the browser supports live DOM inspection and editing, full interactive debugging, and sophisticated performance analysis. Web browsers are great for development, and so our test tools and environment must integrate with in-browser development. Web browsers, however, are not so great for integration testing. Integration testing often takes places on servers somewhere in the cloud (or a least somewhere in the data center). Those systems don&rsquo;t even have a graphical user interface, much less a modern web browser. For efficient integration testing, we need simple command line scripts and a JavaScript execution environment that supports them. For those requirements, the tool of choice is [[http://nodejs.org | node.js]]. Although there are other command line JavaScript environments, none has the breadth and depth of support to match node.js. In the integration phase, our test tools must integrate with node.js.%0a> %0a> !!! Test Framework%0a> %0a> Now that we&rsquo;ve established that our test tools must support both web browser and node.js environments, we can narrow the choices enough to select a core test framework. Many JavaScript test frameworks exist, but most are heavily biased towards browser testing; getting them working with node.js is usually possible, but often requires inelegant hacks or tweaks. One framework that does not suffer from this problem is [[http://visionmedia.github.com/mocha/ | Mocha]], which justifiably describes itself as:%0a> %0a> ->Mocha is a feature-rich JavaScript test framework running on node and the browser, making asynchronous testing simple and fun.%0a> %0a> Originally developed for node.js, Mocha has been extended to readily support web browsers as well. By using Mocha as our test framework, we can write tests that support both development and integration without modification.%0a> %0a> !!! Assertion Library%0a> %0a> Unlike some JavaScript test frameworks, Mocha was designed for maximum flexibility. As a consequence, we&rsquo;ll have to choose a few additional pieces to make it complete. In particular, we need a JavaScript assertion library. For that, we&rsquo;ll rely on the [[http://chaijs.com | Chai Assertion Library]]. Chai is somewhat unique in that it supports all of the common assertion styles &ndash; ''assert'', ''expect,'' and ''should.'' Assertion styles determine how we write tests in our test code. Under the covers, they&rsquo;re all equivalent; it&rsquo;s easy to translate tests from one assertion style to the other. The main difference in assertion styles is their readability. The choice of assertion style depends mostly on which style you (or your team) find most readable, and which style produces the most understandable tests. To see the difference, consider developing a trivial test for the following code:%0a> %0a>  var sum = 2 + 2;%0a> %0a> A traditional, assert-style test could be written as:%0a> %0a>  assert.equal(sum, 4, "sum should equal 4");%0a> %0a> That test gets the job done, but unless you&rsquo;ve grown accustomed to old-school unit testing, it&rsquo;s probably a little challenging to read and interpret. An alternative assertion style uses @@expect@@:%0a> %0a>  expect(sum).to.equal(4);%0a> %0a> Most developers find expect-style assertions easier to read and understand than assert-style tests. The third alternative, @@should@@, makes test assertions even more like natural language:%0a> %0a>  sum.should.equal(4);%0a> %0a> The Chai library supports all three assertion styles. In this article we&rsquo;ll stick with @@should@@.%0a> %0a> !!! Spies, Stubs, and Mocks%0a> %0a> Most web apps, including the trivial example we&rsquo;ll consider in this article, rely on third party libraries and services. In many cases, testing our code will require observing &ndash; or even controlling &ndash; those libraries and services. The [[http://sinonjs.org | Sinon.JS]] library provides a lot of tools for testing those interactions. Such tools fall into three general classes:%0a> %0a> * '''''Spy'''''. Test code that observes calls to functions outside of the code under test. Spies do not interfere with the operation of those external functions; they merely record the invocation and return value.%0a> * '''''Stub'''''. Test code that stands in for calls to functions outside of the code under test. The stub code doesn&rsquo;t attempt to replicate the external function; it simply prevents unresolved errors when the code under test accesses the external function.%0a> * '''''Mock'''''. Test code that mimics functions or services outside of the code under test. With mocks, test code can specify the return values from those functions or services so it can verify the code&rsquo;s response.%0a> %0a> Along with the Sinon.JS library itself, we can augment the standard Chai assertion library with [[https://github.com/domenic/sinon-chai | Sinon.JS Assertions for Chai]].%0a> %0a> !!! A Unit Test Development Environment%0a> %0a> The final tool for our testing workbench is a development environment for unit testing. For our example we&rsquo;ll use [[https://github.com/airportyh/testem | Test&rsquo;em]]. Test&rsquo;em is a collection of handy scripts to set up and run a continuous test environment. We could, if we chose to, write the scripts ourselves and manage the environment manually; however, Toby Ho (Test&rsquo;em&rsquo;s creator) has put together an awesome package that can save us the trouble.%0a> %0a> !! The Example Application%0a> %0a> To see our testing environment in action, let&rsquo;s consider a simple application. Although pared to its bare essentials, this application includes all the functionality required for a real application. (Complete source code for the application is available on [[https://github.com/jsprodotcom/source/blob/master/jsunittest.zip | GitHub]].)%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/01-jstest-app.png%0a> %0a> Users can see their list of todos, and they can click on a check box to toggle any todo&rsquo;s status.%0a> %0a> !!! The Todos Database%0a> %0a> Our application starts with a database table that holds the information for todos. Here&rsquo;s the SQL that we could use to create that table.%0a> %0a> (:source lang=sql linenum tabwidth=2  :)%0a> CREATE TABLE `todos` (%0a>    `id`       int(11)      NOT NULL AUTO_INCREMENT COMMENT 'Primary key for the table.',%0a>    `title`    varchar(256) NOT NULL DEFAULT ''     COMMENT 'The text for the todo item.',%0a>    `complete` bit(1)       NOT NULL DEFAULT b'0'   COMMENT 'Boolean indicating whether or not the item is complete.',%0a>    PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='To Do items.'%0a> (:sourceend:)%0a> %0a> And here&rsquo;s how the table might look after we&rsquo;ve put some test data in it.%0a> %0a> ||%0a> ||!id ||!title ||!complete ||%0a> ||1 ||A sample todo item in the database ||0 ||%0a> ||2 ||Another sample todo item ||1 ||%0a> ||3 ||Yet another sample todo item ||0 ||%0a> %0a> As the table shows, our todos only include a primary key (@@id@@), a title, and a status bit to indicate whether or not they are complete.%0a> %0a> !!! A REST API%0a> %0a> Our web application needs access to this database, so we&rsquo;ll provide a standard REST interface. The API follows Ruby conventions, but can be easily implemented by any server technology. In particular:%0a> %0a> * @@GET api/todos@@ returns a JSON-encoded array of all rows in the database.%0a> * @@GET api/todos/NNN@@ returns the JSON representation of the todo with @@id@@ equal to @@NNN@@.%0a> * @@POST api/todos@@ adds a new todo to the database using the JSON-encoded information in the request.%0a> * @@PUT api/todos/NNN@@ updates the todo with @@id@@ equal to @@NNN@@ using the JSON-encoded information in the request.%0a> * @@DELETE api/todos/NNN@@ deletes the todo with @@id@@ equal to @@NNN@@ from the database.%0a> %0a> If you&rsquo;re not particularly fond of Ruby, the source code includes a complete PHP implementation of this API.%0a> %0a> !!! JavaScript Libraries%0a> %0a> Our modest application is simple enough to implement in pure JavaScript without any libraries, but we have far bigger plans. We may be starting small, but eventually the app will feature amazing functionality and a delightful user interface. In preparation for that day, we&rsquo;ll build on a framework that can support our ultimate killer app:%0a> %0a> * [[http://jquery.com/ | jQuery]] for DOM manipulation, event handling, and server communications.%0a> * [[http://underscorejs.org/ | Underscore.js]] to enhance the core language with many indespensible utilities.%0a> * [[http://backbonejs.org/ | Backbone.js]] to define the structure of the application in terms of models and views.%0a> %0a> !!! An HTML Skeleton%0a> %0a> Now that we know the components that will comprise our application, we can define the HTML skeleton that will support it. There&rsquo;s nothing fancy about it (yet), just a minimal HTML5 document, some JavaScript files, and a small bit of code to get things started.%0a> %0a> (:source lang=html linenum tabwidth=2  :)%0a> %3c!DOCTYPE html>%0a> %3chtml lang="en">%0a>   %3chead>%0a>     %3cmeta charset="utf-8">%0a>     %3ctitle>%3c/title>%0a>   %3c/head>%0a>   %3cbody>%0a>     %3ch1>List of Todos%3c/h1>%0a>  %0a>     %3cscript src="lib/jquery-1.9.0.min.js">%3c/script>%0a>     %3cscript src="lib/underscore-min.js">%3c/script>%0a>     %3cscript src="lib/backbone-min.js">%3c/script>%0a>     %3cscript src="src/app-todos.js">%3c/script>%0a>     %3cscript>%0a>       $(function () {%0a>         var todos = new todoApp.Todos();%0a>         todos.fetch();%0a>         var list = new todoApp.TodosList({collection: todos});%0a>         $("body").append(list.el);%0a>       })%0a>     %3c/script>%0a>   %3c/body>%0a> %3c/html>%0a> (:sourceend:)%0a> %0a> !! Testing During Development%0a> %0a> Now that we&rsquo;ve selected our tools and specified the application, it&rsquo;s time to start development. Our first task is installing the tools.%0a> %0a> !!! Installing the Tools%0a> %0a> Even though we&rsquo;ll be developing in the browser, our test environment relies on node.js. The very first step, therefore, is installing node.js and the node package manager (npm). There are executable binaries for OS X, Windows, Linux, and SunOS on the [[http://nodejs.org/download/ | node.js web site]], as well as a source code for other operating systems. After running the installer, you can verify both node.js and npm from the command line.%0a> %0a>   bash-3.2$ node --version v0.8.18 bash-3.2$ npm --version 1.2.2 bash-3.2$%0a> %0a> Everything else we need is conveniently available as a node package. The node package manager can handle their installation, as well as any dependencies.%0a> %0a>   bash-3.2$ npm install jquery jsdom underscore backbone mocha chai sinon sinon-chai testem -g%0a> %0a> !!! Creating the Project Structure%0a> %0a> The source code for this example includes a complete project structure with the following 15 files:%0a> %0a>  todos.html%0a>  testem.json%0a>  api/htaccess%0a>  api/todos.php%0a>  lib/backbone-min.js%0a>  lib/chai.js%0a>  lib/jquery-1.9.0.min.js%0a>  lib/sinon-1.5.2.js%0a>  lib/sinon-chai.js%0a>  lib/underscore-min.js%0a>  mysql/todos.sql%0a>  php-lib/dbconfig.inc.php%0a>  src/app-todos.js%0a>  test/app-todos-test.js%0a>  test/mocha.opts%0a> %0a> Here is what each folder and file contains:%0a> %0a> * @@todos.html@@: The skeleton HTML file for our application, shown in full above.%0a> * @@testem.json@@: The configuration file for Test&rsquo;Em; we&rsquo;ll look at this in detail shortly.%0a> * @@api/@@: A folder for our REST API implementation.%0a> ** @@api/htaccess@@: Sample configuration for the Apache web server that supports our REST API.%0a> ** @@api/todos.php@@: PHP code to implement the REST API.%0a> * @@lib/@@: A folder for JavaScript libraries used by the app itself and the test framework.%0a> ** @@lib/backbone-min.js@@: Minified version of Backbone.js.%0a> ** @@lib/chai.js@@: Chai Assertion Library.%0a> ** @@lib/jquery-1.9.0.min.js@@: Minified version of jQuery.%0a> ** @@lib/sinon-1.5.2.js@@: Sinon.JS library.%0a> ** @@lib/sinon-chai.js@@: Sinon.JS Assertions for Chai.%0a> ** @@lib/underscore-min.js@@: Minified version of Underscore.js.%0a> * @@mysql/@@: A folder for MySQL code for the application.%0a> ** @@mysql/todos.sql@@: MySQL commands to create the application database.%0a> * @@php-lib/@@: A folder for PHP libraries and configuration for the application&rsquo;s REST API.%0a> ** @@php-lib/dbconfig.inc.php@@: PHP database configuration for the REST API.%0a> * @@src/@@: A folder for our client-side application code.%0a> ** @@src/app-todos.js@@: Our application.%0a> * @@test/@@: A folder for test code.%0a> ** @@test/app-todos-test.js@@: Test code for our application.%0a> ** @@test/mocha.opts@@: Configuration options for mocha; we&rsquo;ll look at this in the next section.%0a> %0a> During development, we&rsquo;re only interested in three of these files, @@testem.json@@, @@src/app-todos.js@@, and @@test/app-todos-test.js@@.%0a> %0a> !!! Configuring Test&rsquo;Em%0a> %0a> The last step before actual development is defining the Test&rsquo;Em configuration. That configuration resides in the JSON-formatted @@testem.json@@, and it&rsquo;s simple enough to create in any text editor. We simply specify that we&rsquo;re using Mocha (Test&rsquo;Em supports several frameworks), and we list the JavaScript files our application and our test code requires.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  {%0a>    "framework": "mocha",%0a>    "src_files": [%0a>      "lib/jquery-1.9.0.min.js",%0a>      "lib/underscore-min.js",%0a>      "lib/backbone-min.js",%0a>      "src/*.js",%0a>      "lib/chai.js",%0a>      "lib/sinon-chai.js",%0a>      "lib/sinon-1.5.2.js",%0a>      "test/*.js"%0a>    ]%0a>  }%0a> (:sourceend:)%0a> %0a> !!! Start Developing%0a> %0a> Finally, we&rsquo;re ready to code. In a command shell, navigate to the root folder of our project and execute the command @@testem@@. The Test&rsquo;Em scripts will run, clearing the terminal window and giving us a URL in the upper right. Copy and paste that URL into our browser of choice and we&rsquo;re off.%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/02-jstest-testem.png%0a> %0a> As soon as we launch the web browser, it will automatically execute any tests that we&rsquo;ve defined. Since we&rsquo;re just beginning development, we won&rsquo;t have any code, nor any test cases. The browser will kindly point that out to us.%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/03-jstest-browser-none.png%0a> %0a> The terminal window from which we launched Test&rsquo;Em will also give us the status.%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/04-jstest-console-none.png%0a> %0a> !!! A First Test Case%0a> %0a> In the spirit of true Test-Driven Development, we&rsquo;ll begin by writing our first test case in the @@test/app-todos-test.js@@ file. Like any good web app, we want to minimize global name space pollution. To do that, we&rsquo;ll rely on a single global variable, @@todoApp@@, to contain all of our code. Our first test case will make sure that the global name space variable exists.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  var should = chai.should();%0a> %0a>  describe("Application", function() {%0a>    it("creates a global variable for the name space", function () {%0a>      should.exist(todoApp);%0a>    })%0a>  })%0a> (:sourceend:)%0a> %0a> As you can see, we need one preliminary statement to tell Mocha that we&rsquo;re using Chai assertions. Then we can begin writing tests. By convention JavaScript tests are organized into blocks (which can be nested into sub-blocks, and so on). Each block begins with a @@describe()@@ function call to identify what part of the code we&rsquo;re testing. In this case we&rsquo;re testing the overall application, so that&rsquo;s the first parameter to @@describe()@@.%0a> %0a> Within a test block, we document each test case by what it tests. That&rsquo;s the purpose of the @@it()@@ function. The way to read any test case is to combine the @@describe()@@ and @@it()@@ strings into a single statement. Our first test case, therefore, is%0a> %0a> ->Application creates a global variable for the name space%0a> %0a> The test code itself is inside the @@it()@@ block. Our test case is%0a> %0a>  should.exist(todoApp);%0a> %0a> Now we have a complete test case. As soon as we save the file, Test`Em automatically takes over. It notices that one of our files has changed, so it immediately reruns the tests. Not surprisingly (since we haven&rsquo;t written any code for the application yet), our first test fails.%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/05-jstest-browser-fail.png%0a> %0a> The terminal window updates automatically as well.%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/06-jstest-console-fail.png%0a> %0a> To make the test pass, we must create the global name space variable. We shift to the @@srcapp-todos.js@@ file and add the necessary code.%0a> %0a>  if (typeof todoApp === "undefined") todoApp = {};%0a> %0a> As soon as we save the file, Test`Em once again springs into action. We immediately get updated results for our test cases.%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/07-jstest-browser-pass.png%0a> %0a> Step back for a moment and consider what&rsquo;s happening! Every time we make a change, either to the test code or to our application, Test`Em immediately re-runs our entire test suite. All we have to do is keep Test&rsquo;Em&rsquo;s browser or terminal window visible in a corner of our screen, and we can see the health of our code in real time, ''as we&rsquo;re developing''. We&rsquo;ll know as soon as we introduce a bug, even if the bug manifests itself in a part of the code different from where we&rsquo;re working. No more digging back through hours, days, or weeks of new code to figure out when we introduced a bug.%0a> %0a> !!! Testing the Model%0a> %0a> With our development environment now fully established, we can begin developing the application. Since our app shows a list of todos, it might be good to create a model for those todos. The model will need to keep track of both the title of the todo and it&rsquo;s status. Let&rsquo;s add a unit test that verifies we can create an todo with reasonable defaults.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  describe("Todo Model", function(){%0a>    describe("Initialization", function() {%0a>      beforeEach(function() {%0a>        this.todo = new todoApp.Todo();%0a>      })%0a>      it("should default the status to 'pending'",function() {%0a>        this.todo.get('complete').should.be.false;%0a>      })%0a>      it("should default the title to an empty string",function() {%0a>        this.todo.get('title').should.equal("");%0a>      })%0a>    })%0a>  })%0a> (:sourceend:)%0a> %0a> There are several aspects of these tests worth noting.%0a> %0a> * We can nest test blocks within each other. One test block will contain all the unit tests for the todo model, and a sub-block of those tests focuses on initialization.%0a> * Within a test block, we can define functionality to execute before every test. That&rsquo;s the purpose of the @@beforeEach()@@ block. In the example above, we&rsquo;re creating a new instance of a Todo before every test.%0a> * The Mocha framework automatically makes sure that the JavaScript context (i.e. the value of @@this@@) is consistent for all our test cases. That&rsquo;s why we can define @@this.todo@@ in one function (the @@beforeEach()@@ parameter) and safely reference it in other functions (such as the @@it()@@ parameters). Without Mocha working behind the scenes to provide this consistency, JavaScript would define different contexts for each function.%0a> %0a> Of course, since we haven&rsquo;t written the model code yet, all our tests will fail. (And we&rsquo;ll know that immediately.) But once we&rsquo;ve added the code for our model, the tests pass and we&rsquo;re on our way.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  todoApp.Todo = Backbone.Model.extend({%0a>    defaults: {%0a>      title: "",%0a>      complete:  false%0a>    }%0a>  })%0a> (:sourceend:)%0a> %0a> !!! Using Stubs for Third Party Functionality%0a> %0a> Now that we have a simple model for todos, we can start to define its behavior. One thing our model should do is update the database whenever any of its properties change. In a unit test environment, however, we won&rsquo;t have an actual database to check. On the other hand, we&rsquo;re not actually writing any code to do the database update. Rather, we&rsquo;re relying on Backbone to handle that interaction. That suggests a unit test strategy for this test case. All we need to know is that Backbone models use the @@save()@@ method to update whatever backing store is persisting the model. In our case that backing store is the database. Here is the unit test code we can use:%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  describe("Persistence", function() {%0a>    beforeEach(function() {%0a>      this.todo = new todoApp.Todo();%0a>      this.save_stub = sinon.stub(this.todo, "save");%0a>    })%0a>    afterEach(function() {%0a>      this.save_stub.restore();%0a>    })%0a>    it("should update server when title is changed", function() {%0a>      this.todo.set("title", "New Summary");%0a>      this.save_stub.should.have.been.calledOnce;%0a>    })%0a>    it("should update server when status is changed", function() {%0a>      this.todo.set('complete',true);%0a>      this.save_stub.should.have.been.calledOnce;%0a>    })%0a>  })%0a> (:sourceend:)%0a> %0a> We&rsquo;ve included some additional code before each test, and we&rsquo;ve added a section of code to execute after each test. That extra code manages a sinon @@stub@@, a function that effectively nullifies another function in the code. In our case the stub nullifies the @@save()@@ method of @@this.todo@@. With the stub in place, calls to the method won&rsquo;t actually go to the Backnone library. Instead, sinon intercepts those calls and simply returns immediately. This behavior is important. If we tried to execute the actual Backbone @@save()@@ method in a unit test environment, the call would fail because there would not be a database or server API available.%0a> %0a> With the stub in place, our test cases can use it to verify the model&rsquo;s behavior. In the first test case, we immediately set the todo&rsquo;s @@title@@ to a new value. Since that changes the @@title@@ property, we want our model to update its backing store. To check that we simply verify that the stub was called. To get our model to pass these tests, we can look for change events and respond appropriately.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  todoApp.Todo = Backbone.Model.extend({%0a>    defaults: {%0a>      title: "",%0a>      complete:  false%0a>    },%0a>    initialize: function() {%0a>      this.on("change", function(){ this.save(); });%0a>    }%0a>  })%0a> (:sourceend:)%0a> %0a> !!! Testing the View%0a> %0a> Of course, our app won&rsquo;t do anyone any good if it doesn&rsquo;t actually display the todos to users, and that requires creating some HTML. We&rsquo;ll use Backbone views for that functionality. In our trivial app, we simply wish to render each todo as a list item. Here are the test cases that will get us started.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  describe("Todo List Item View", function() {%0a>    beforeEach(function(){%0a>      this.todo = new todoApp.Todo({title: "Summary"});%0a>      this.item = new todoApp.TodoListItem({model: this.todo});%0a>    })%0a>    it("render() should return the view object", function() {%0a>      this.item.render().should.equal(this.item);%0a>    });%0a>    it("should render as a list item", function() {%0a>      this.item.render().el.nodeName.should.equal("LI");%0a>    })%0a>  })%0a> (:sourceend:)%0a> %0a> We begin our tests of the view with two test cases. First we ensure that the view&rsquo;s @@render()@@ method returns the view itself. That&rsquo;s a common and very convenient convention in Backbone because it allows method chaining. Our second test case verifies that the HTML element the render creates is a list item (@@&lt;li&gt;@@). The code necessary to pass these tests is a straightforward Backbone view.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  todoApp.TodoListItem = Backbone.View.extend({%0a>    tagName: "li",%0a>    render: function() {%0a>      return this;%0a>    }%0a>  })%0a> (:sourceend:)%0a> %0a> Next, we can develop the detailed content of that list item view. As an example, we want the full list item to look something like the following.%0a> %0a> (:source lang=html linenum tabwidth=2  :)%0a> %3cli>%0a>   %3clabel>%0a>     %3cinput type='checkbox'/>%0a>     Summary%0a>   %3c/label>%0a> %3c/li>%0a> (:sourceend:)%0a> %0a> For our test cases, we can take advantage of jQuery to extract individual elements from the view&rsquo;s main element.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  describe("Todo List Item View", function() {%0a>    beforeEach(function(){%0a>      this.todo = new todoApp.Todo({title: "Summary"});%0a>      this.item = new todoApp.TodoListItem({model: this.todo});%0a>    })%0a>    describe("Template", function() {%0a>      beforeEach(function(){%0a>        this.item.render();%0a>      })  %0a>      it("should contain the todo title as text", function() {%0a>        this.item.$el.text().should.have.string("Summary");%0a>      })%0a>      it("should include a label for the status", function() {%0a>        this.item.$el.find("label").should.have.length(1);%0a>      })%0a>      it("should include an &lt;input&gt; checkbox", function() {%0a>        this.item.$el.find("label&gt;input[type='checkbox']").should.have.length(1);%0a>      })%0a>      it("should be clear by default (for 'pending' todos)", function() {%0a>        this.item.$el.find("label&gt;input[type='checkbox']").is(":checked").should.be.false;%0a>      })%0a>      it("should be set for 'complete' todos", function() {%0a>        this.save_stub = sinon.stub(this.todo, "save");%0a>        this.todo.set("complete", true);%0a>        this.item.render();%0a>        this.item.$el.find("label&gt;input[type='checkbox']").is(":checked").should.be.true;%0a>        this.save_stub.restore();%0a>      })%0a>    })%0a>  })%0a> (:sourceend:)%0a> %0a> Notice that in the last test case we&rsquo;ve stubbed the model&rsquo;s @@save()@@ method. Since we&rsquo;re changing a property from its default value, our model will dutifully try to persist that change to its backing store. In a unit test environment, however, we won&rsquo;t have a database or a server API. The stub takes the place of the missing components and allows the tests to proceed without error. To get these tests to pass, we&rsquo;ll have to add some additional code to our view.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  todoApp.TodoListItem = Backbone.View.extend({%0a>    tagName: "li",%0a>    template: _.template(%0a>      "&lt;label&gt;"%0a>      +   "&lt;input type='checkbox' &lt;%25 if(complete) print('checked') %25&gt;/&gt;"%0a>      +   " &lt;%25= title %25&gt; "%0a>      + "&lt;/label&gt;"),%0a>    render: function() {%0a>      this.$el.html(this.template(this.model.attributes));%0a>      return this;%0a>    }%0a>  })%0a> (:sourceend:)%0a> %0a> !!! Testing Model/View Interactions%0a> %0a> Now that we&rsquo;ve verified that our view implementation creates the right HTML markup, we can test its interaction with our model. In particular, we want to make sure that users can toggle a todo&rsquo;s status by clicking on the checkbox. Our test environment doesn&rsquo;t require an actual human user, so we&rsquo;ll use jQuery to generate the click event. To do that, however, we&rsquo;ll have to add content to a real live DOM. That content is known as a test ''fixture''. Here is the unit test code.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  describe("Todo List Item View", function() {%0a>    beforeEach(function(){%0a>      this.todo = new todoApp.Todo({title: "Summary"});%0a>      this.item = new todoApp.TodoListItem({model: this.todo});%0a>      this.save_stub = sinon.stub(this.todo, "save");%0a>    })%0a>    afterEach(function() {%0a>      this.save_stub.restore();%0a>    })%0a>    describe("Model Interaction", function() {%0a>      it("should update model when checkbox clicked", function() {%0a>        $("&lt;div&gt;").attr("id","fixture").css("display","none").appendTo("body");%0a>        this.item.render();%0a>        $("#fixture").append(this.item.$el);%0a>        this.item.$el.find("input").click();%0a>        this.todo.get('complete').should.be.true;%0a>        $("#fixture").remove();%0a>      })%0a>    })%0a>  })%0a> (:sourceend:)%0a> %0a> Notice that we&rsquo;re once again stubbing the todo&rsquo;s @@save()@@ method. Otherwise, Backbone will try to update a non-existent backing store when we change the todo status with our simulated click.%0a> %0a> For the test case itself, we begin by creating a @@&lt;div&gt;@@ element with an @@id@@ of @@fixture@@ and we add that element to our live document. The live document, in this case, is the web page displaying the results of our tests. Although we remove the element immediately after verifying the test case, we also set its @@display@@ property to @@none@@ so it won&rsquo;t interfere with Mocha&rsquo;s display of the test results. The code that implements this functionality includes a small addition to the todo model. The addition is a new @@toggleStatus()@@ method.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  todoApp.Todo = Backbone.Model.extend({%0a>    defaults: {%0a>      title: "",%0a>      complete:  false%0a>    },%0a>    initialize: function() {%0a>      this.on("change", function(){ this.save(); });%0a>    },%0a>    toggleStatus: function() {%0a>      this.set("complete",!this.get("complete""));%0a>    }%0a>  })%0a> (:sourceend:)%0a> %0a> In the view, we want to catch click events on the @@&lt;input&gt;@@ element and call this method for the model.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  todoApp.TodoListItem = Backbone.View.extend({%0a>    tagName: "li",%0a>    template: _.template(%0a>      "&lt;label&gt;"%0a>      +   "&lt;input type='checkbox' &lt;%25 if(complete) print('checked') %25&gt;/&gt;"%0a>      +   " &lt;%25= title %25&gt; "%0a>      + "&lt;/label&gt;"),%0a>    events: {%0a>      "click input": "statusChanged"%0a>    },%0a>    render: function() {%0a>      this.$el.html(this.template(this.model.attributes));%0a>      return this;%0a>    },%0a>    statusChanged: function() {%0a>      this.model.toggleStatus();%0a>    }%0a>  })%0a> (:sourceend:)%0a> %0a> !!! Testing the Collection%0a> %0a> At this point our application is nearly complete. The only remaining functionality is collecting all the todos together. Naturally, we&rsquo;ll use a Backbone collection. We&rsquo;re actually not going to do anything special with our collection, so we don&rsquo;t really need any unit tests.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  todoApp.Todos = Backbone.Collection.extend({%0a>    model: todoApp.Todo,%0a>    url:   "api/todos"%0a>  })%0a> (:sourceend:)%0a> %0a> We can, however, verify that our implementation of the collection&rsquo;s view is appropriate. We want that view rendered as an unordered list (@@&lt;ul&gt;@@). The test cases don&rsquo;t require any functionality that we haven&rsquo;t seen before.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  describe("Todos List View", function() {%0a>    beforeEach(function(){%0a>      this.todos = new todoApp.Todos([%0a>        {title: "Todo 1"},%0a>        {title: "Todo 2"}%0a>      ]);%0a>      this.list = new todoApp.TodosList({collection: this.todos});%0a>    })%0a>    it("render() should return the view object", function() {%0a>      this.list.render().should.equal(this.list);%0a>    });%0a>    it("should render as an unordered list", function() {%0a>      this.list.render().el.nodeName.should.equal("UL");%0a>    })%0a>    it("should include list items for all models in collection", function() {%0a>      this.list.render();%0a>      this.list.$el.find("li").should.have.length(2);%0a>    })%0a>  })%0a> (:sourceend:)%0a> %0a> The view implementation is also straightforward. It tracks any additions to the collection and updates the view. For the initial @@render()@@ it simply adds all the models in the collection one at a time.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  todoApp.TodosList = Backbone.View.extend({%0a>    tagName: "ul",%0a>    initialize: function() {%0a>      this.collection.on("add", this.addOne, this);%0a>    },%0a>    render: function() {%0a>      this.addAll();%0a>      return this;%0a>    },%0a>    addAll: function() {%0a>      this.collection.each(this.addOne, this);%0a>    },%0a>    addOne: function(todo) {%0a>      var item = new todoApp.TodoListItem({model: todo});%0a>      this.$el.append(item.render().el);%0a>    }%0a>  })%0a> (:sourceend:)%0a> %0a> !!! Bonus Tests: Verifying the API%0a> %0a> Because our REST API perfectly matches the API that Backbone expects, we didn&rsquo;t need any custom code to manage the API interaction. As a result, we don&rsquo;t need any unit test cases. In the real world, you might not be quite as lucky. If your API doesn&rsquo;t conform to Backbone conventions, you may need to override or extend some of the Backbone code to deal with the non-standard API. That extra code will need unit tests as well. Fortunately, it&rsquo;s relatively easy to test API interactions, even in a unit test environment.%0a> %0a> The easiest way to test API interactions relies on the fake server functionality of Sinon.JS. Unfortunately, that functionality is only available (currently) in Sinon&rsquo;s browser implementation. It is explicitly excluded from the node.js implementation. There are some hacks to get it running in node.js, but those hacks are quite brittle and rely on internal implementation details. It would be best to avoid them if possible. Fortunately, we can get by without Sinon&rsquo;s fake server.%0a> %0a> The secret is knowing that Backbone relies on jQuery&rsquo;s @@$.ajax()@@ function to implement REST APIs. We can intercept the API interactions by stubbing that function. When we stub the function, we&rsquo;ll want to substitute our own response. The @@yieldsTo()@@ method of the stub gives us exactly that opportunity. It tells sinon what additional action it should take when the stub is called. Here&rsquo;s a complete test case to verify that our collection correctly initializes itself using the REST API.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  describe("Collection's Interaction with REST API", function() {%0a>    it("should load using the API", function() {%0a>      this.ajax_stub = sinon.stub($, "ajax").yieldsTo("success", [%0a>        { id: 1, title: "Mock Summary 1", complete: false },%0a>        { id: 2, title: "Mock Summary 2", complete: true  }%0a>      ]);%0a>      this.todos = new todoApp.Todos();%0a>      this.todos.fetch();%0a>      this.todos.should.have.length(2);%0a>      this.todos.at(0).get('title').should.equal("Mock Summary 1");%0a>      this.todos.at(1).get('title').should.equal("Mock Summary 2");%0a>      this.ajax_stub.restore();%0a>    })%0a>  })%0a> (:sourceend:)%0a> %0a> !!! Finished!%0a> %0a> As you can see from the screen shot that follows, we&rsquo;ve now written code that passes all the unit test cases. For the time being at least, development is complete.%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/08-jstest-browser-all.png%0a> %0a> !! Testing During Integration%0a> %0a> Now that client-side development of our app is complete (and we have the tests to prove it), we can safely tuck our JavaScript into a source code management system. It can then be integrated into the build process for the entire application. As part of that process, we want to execute all the test cases we&rsquo;ve developed. That will ensure that the code that makes up the final deployment passes all the tests that we&rsquo;ve defined. It will also protect against "minor tweaks" to the code that inadvertently introduce new bugs.%0a> %0a> During the build process, we&rsquo;ll likely want to execute our tests from the command line rather than in a web browser. We don&rsquo;t need the details of individual test cases, just an assurance that they all pass. Node.js makes it easy enough to accommodate this requirement. We only need to make a few small additions to our source code and unit test code files.%0a> %0a> Our code needs these modifications because node.js handles global variables differently than web browsers. In a web browser, JavaScript variables are, by default, global in scope. Node.js, on the other hand, confines variables to their local module by default. In that environment, our code won&rsquo;t be able to find the third-party libraries it needs (jQuery, Underscore, and Backbone. If we add the following statements at the beginning, though, node.js will resolve references to these libraries appropriately. We&rsquo;ve constructed these statements so that they do no harm in the web browser, so we can leave them in the code permanently.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  var jQuery   = jQuery   || require("jquery");%0a>  var _        = _        || require("underscore");%0a>  var Backbone = Backbone || require("backbone");%0a>  Backbone.$   = jQuery;%0a> (:sourceend:)%0a> %0a> We also need to adjust our test code. The test scripts need access to their own libraries (jQuery, Chai, Sinon.JS, and sinon-chai). In addition, we need to add a little extra to simulate a web browser&rsquo;s Document Object Model (DOM). Recall that our tests for click handling required us to temporarily add a "fixture" @@&lt;div&gt;@@ to the web page. Node.js, of course, doesn&rsquo;t normally have a web page. The jsdom node package, however, lets us emulate one. The code below creates a minimal, simulated web page for our tests.%0a> %0a> (:source lang=javascript linenum tabwidth=2  :)%0a>  if (typeof exports !== 'undefined' &amp;&amp; this.exports !== exports) {%0a>    global.jQuery = require("jquery");%0a>    global.$ = jQuery;%0a>    global.chai = require("chai");%0a>    global.sinon = require("sinon");%0a>    chai.use(require("sinon-chai"));%0a>    global.jsdom = require("jsdom").jsdom;%0a>    var doc = jsdom("&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;");%0a>    global.window = doc.createWindow();%0a>  }%0a> (:sourceend:)%0a> %0a> The conditional that wraps these statements tests to see if we&rsquo;re running in the node.js environment instead of a web browser. In a browser, the extra statements aren&rsquo;t necessary, so we can safely skip them.%0a> %0a> With those changes, we can execute the full test suite from the command line. Simply navigate to the project&rsquo;s root folder and execute the command @@mocha@@. The result looks quite familiar.%0a> %0a> http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/09-jstest-node.png%0a> %0a> Of course, @@mocha@@ returns an exit level to indicate whether or not all of the tests passed. That lets us automate the tests as part of a continuous integration process, or simply as a local pre-commit script to preserve our own sanity.%0a> %0a> !! Conclusion%0a> %0a> At this point we have accomplished our goals. We have a unit test environment that runs in the background during development and immediately notifies us when any test fails. The tests execute in a web browser, giving us full access to the browser&rsquo;s development tools while we&rsquo;re coding. The same tests also run equally well from a command line script, so we can automate their execution during the build or integration process.%0a> %0a> !! Resources%0a> %0a> Here are the main unit test resources used in the article.%0a> %0a> * Command line JavaScript execution environment: [[http://nodejs.org/ | node.js]]%0a> * JavaScript unit testing framework: [[http://visionmedia.github.com/mocha/ | Mocha]]%0a> * Test Development Environment: [[https://github.com/airportyh/testem | Test&rsquo;em]]%0a> * JavaScript assertion library: [[http://chaijs.com/ | Chai Assertion Library]]%0a> * Spies, stubs, and mocks: [[http://sinonjs.org/ | Sinon.JS]]%0a> * Additional assertions: [[https://github.com/domenic/sinon-chai | Sinon.JS Assertions for Chai]]%0a> %0a> %0a> &copy; 2000 &ndash; 2013 SitePoint Pty. Ltd.%0a> %0a> (:linkwikiwords:)%0a> %0a> >>comment%3c%3c%0a> Summary: This article provides a thorough examination of unit testing with Backbone.js.%0a> Tags: saved page%0a> (:tags-hide saved page, javascript, node.js, backbone.js, mocha.js, testem, unit testing:)%0a> (:title Unit Testing Backbone.js Applications:)%0a> Source: http://www.sitepoint.com/unit-testing-backbone-js-applications/%0a> Parent: (Technology.)BackboneJS%0a> includeme: [[Technology.BackboneJS]%0a> Categories:[[!Articles]], [[!HowTos]]%0a> Posted: Mon, 26 Aug 2013 08:51:39 -0500%0a> >>%3c%3c%0a> %0a> %0a
host:1377526439=71.63.215.130
author:1377526406=tamara
diff:1377526406:1377526103:=73,74c73,74%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/01-jstest-app.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/01-jstest-app.png"]%0a> %0a167,181c167%0a%3c  todos.html%0a%3c  testem.json%0a%3c  api/htaccess%0a%3c  api/todos.php%0a%3c  lib/backbone-min.js%0a%3c  lib/chai.js%0a%3c  lib/jquery-1.9.0.min.js%0a%3c  lib/sinon-1.5.2.js%0a%3c  lib/sinon-chai.js%0a%3c  lib/underscore-min.js%0a%3c  mysql/todos.sql%0a%3c  php-lib/dbconfig.inc.php%0a%3c  src/app-todos.js%0a%3c  test/app-todos-test.js%0a%3c  test/mocha.opts%0a---%0a>    todos.html testem.json api/htaccess api/todos.php lib/backbone-min.js lib/chai.js lib/jquery-1.9.0.min.js lib/sinon-1.5.2.js lib/sinon-chai.js lib/underscore-min.js mysql/todos.sql php-lib/dbconfig.inc.php src/app-todos.js test/app-todos-test.js test/mocha.opts%0a
host:1377526406=71.63.215.130
author:1377526103=tamara
csum:1377526103=new article from web
diff:1377526103:1377526031:=
host:1377526103=71.63.215.130
author:1377526031=tamara
diff:1377526031:1377525123:=1a2,21%0a> %0a> %0a> * [[http://www.sitepoint.com |  http://www.sitepoint.com/wp-content/themes/sitepoint/assets/svg/sitepoint.svg ]]%0a> * [[http://www.sitepoint.com:80/# | Menu]]%0a> %0a> * [[http://www.sitepoint.com:80/# | Topics]]%0a> ** [[http://www.sitepoint.com/html/ | HTML]]%0a> ** [[http://www.sitepoint.com/css/ | CSS]]%0a> ** [[http://www.sitepoint.com/javascript/ | JS]]%0a> ** [[http://www.sitepoint.com/php/ | PHP]]%0a> ** [[http://www.sitepoint.com/ruby/ | Ruby]]%0a> ** [[http://www.sitepoint.com/mobile/ | Mobile]]%0a> ** [[http://www.sitepoint.com/ux/ | UX]]%0a> ** [[http://www.sitepoint.com/design/ | Design]]%0a> * [[http://www.sitepoint.com:80/store/ | Store]]%0a> * [[http://www.sitepoint.com:80/newsletter | Subscribe]]%0a> *%0a> %0a> !! [[http://www.sitepoint.com/javascript/ | ''''JavaScript]] [[http://www.sitepoint.com/javascript/toolsandlibraries/ | Tools and Libraries]]%0a> %0a3a24,25%0a>  [[http://www.sitepoint.com/author/sthomas/ |  http://0.gravatar.com/avatar/a5b424d4146905962a24acd6815aeb84?s=96&d=http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=96&r=G ]]%0a> %0a5a28,29%0a> [[https://twitter.com/share | Tweet]]%0a> %0a81,88c105,106%0a%3c (:source lang=sql linenum tabwidth=2  :)%0a%3c CREATE TABLE `todos` (%0a%3c    `id`       int(11)      NOT NULL AUTO_INCREMENT COMMENT 'Primary key for the table.',%0a%3c    `title`    varchar(256) NOT NULL DEFAULT ''     COMMENT 'The text for the todo item.',%0a%3c    `complete` bit(1)       NOT NULL DEFAULT b'0'   COMMENT 'Boolean indicating whether or not the item is complete.',%0a%3c    PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='To Do items.'%0a%3c (:sourceend:)%0a%3c %0a---%0a>  @@CREATE TABLE `todos` (   `id`       int(11)      NOT NULL AUTO_INCREMENT COMMENT 'Primary key for the table.',   `title`    varchar(256) NOT NULL DEFAULT ''     COMMENT 'The text for the todo item.',   `complete` bit(1)       NOT NULL DEFAULT b'0'   COMMENT 'Boolean indicating whether or not the item is complete.',   PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='To Do items.'@@%0a> %0a123,148c141,164%0a%3c (:source lang=html linenum tabwidth=2  :)%0a%3c %3c!DOCTYPE html>%0a%3c %3chtml lang="en">%0a%3c   %3chead>%0a%3c     %3cmeta charset="utf-8">%0a%3c     %3ctitle>%3c/title>%0a%3c   %3c/head>%0a%3c   %3cbody>%0a%3c     %3ch1>List of Todos%3c/h1>%0a%3c  %0a%3c     %3cscript src="lib/jquery-1.9.0.min.js">%3c/script>%0a%3c     %3cscript src="lib/underscore-min.js">%3c/script>%0a%3c     %3cscript src="lib/backbone-min.js">%3c/script>%0a%3c     %3cscript src="src/app-todos.js">%3c/script>%0a%3c     %3cscript>%0a%3c       $(function () {%0a%3c         var todos = new todoApp.Todos();%0a%3c         todos.fetch();%0a%3c         var list = new todoApp.TodosList({collection: todos});%0a%3c         $("body").append(list.el);%0a%3c       })%0a%3c     %3c/script>%0a%3c   %3c/body>%0a%3c %3c/html>%0a%3c (:sourceend:)%0a%3c %0a---%0a>  &lt;!DOCTYPE html&gt;%0a>  &lt;html lang="en"&gt;%0a>    &lt;head&gt;%0a>      &lt;meta charset="utf-8"&gt;%0a>      &lt;title&gt;&lt;/title&gt;%0a>    &lt;/head&gt;%0a>    &lt;body&gt;%0a>      &lt;h1&gt;List of Todos&lt;/h1&gt;%0a> %0a>      &lt;script src="lib/jquery-1.9.0.min.js"&gt;&lt;/script&gt;%0a>      &lt;script src="lib/underscore-min.js"&gt;&lt;/script&gt;%0a>      &lt;script src="lib/backbone-min.js"&gt;&lt;/script&gt;%0a>      &lt;script src="src/app-todos.js"&gt;&lt;/script&gt;%0a>      &lt;script&gt;%0a>        $(function () {%0a>          var todos = new todoApp.Todos();%0a>          todos.fetch();%0a>          var list = new todoApp.TodosList({collection: todos});%0a>          $("body").append(list.el);%0a>        })%0a>      &lt;/script&gt;%0a>    &lt;/body&gt;%0a>  &lt;/html&gt;%0a> %0a157,158c173,174%0a%3c   bash-3.2$ node --version v0.8.18 bash-3.2$ npm --version 1.2.2 bash-3.2$%0a%3c %0a---%0a>  @@bash-3.2$ node --version v0.8.18 bash-3.2$ npm --version 1.2.2 bash-3.2$@@%0a> %0a161,162c177,178%0a%3c   bash-3.2$ npm install jquery jsdom underscore backbone mocha chai sinon sinon-chai testem -g%0a%3c %0a---%0a>  @@bash-3.2$ npm install jquery jsdom underscore backbone mocha chai sinon sinon-chai testem -g@@%0a> %0a167,168c183,184%0a%3c    todos.html testem.json api/htaccess api/todos.php lib/backbone-min.js lib/chai.js lib/jquery-1.9.0.min.js lib/sinon-1.5.2.js lib/sinon-chai.js lib/underscore-min.js mysql/todos.sql php-lib/dbconfig.inc.php src/app-todos.js test/app-todos-test.js test/mocha.opts%0a%3c %0a---%0a>  @@todos.html testem.json api/htaccess api/todos.php lib/backbone-min.js lib/chai.js lib/jquery-1.9.0.min.js lib/sinon-1.5.2.js lib/sinon-chai.js lib/underscore-min.js mysql/todos.sql php-lib/dbconfig.inc.php src/app-todos.js test/app-todos-test.js test/mocha.opts@@%0a> %0a199d214%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a213,214c228%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a219,220c233,234%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/02-jstest-testem.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/02-jstest-testem.png"]%0a> %0a223,224c237,238%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/03-jstest-browser-none.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/03-jstest-browser-none.png"]%0a> %0a227,228c241,242%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/04-jstest-console-none.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/04-jstest-console-none.png"]%0a> %0a233d246%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a241,242c254%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a255,256c267,268%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/05-jstest-browser-fail.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/05-jstest-browser-fail.png"]%0a> %0a259,260c271,272%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/06-jstest-console-fail.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/06-jstest-console-fail.png"]%0a> %0a267,268c279,280%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/07-jstest-browser-pass.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/07-jstest-browser-pass.png"]%0a> %0a275d286%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a289,290c300%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a299d308%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a306,307c315%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a312d319%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a330,331c337%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a336d341%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a346,347c351%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a352d355%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a365,366c368%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a369d370%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a376,377c377%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a380,388c380,386%0a%3c (:source lang=html linenum tabwidth=2  :)%0a%3c %3cli>%0a%3c   %3clabel>%0a%3c     %3cinput type='checkbox'/>%0a%3c     Summary%0a%3c   %3c/label>%0a%3c %3c/li>%0a%3c (:sourceend:)%0a%3c %0a---%0a>  &lt;li&gt;%0a>    &lt;label&gt;%0a>      &lt;input type='checkbox'/&gt;%0a>      Summary%0a>    &lt;/label&gt;%0a>  &lt;/li&gt;%0a> %0a391d388%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a422,423c419%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a426d421%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a439,440c434%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a445d438%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a466,467c459%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a472d463%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a485,486c476%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a489d478%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a508,509c497%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a514d501%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a519,520c506%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a523d508%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a543,544c528%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a547d530%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a565,566c548%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a575d556%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a590,591c571%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a596,597c576,577%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/08-jstest-browser-all.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/08-jstest-browser-all.png"]%0a> %0a606d585%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a611,612c590%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a615d592%0a%3c (:source lang=javascript linenum tabwidth=2  :)%0a626,627c603%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a632,633c608,609%0a%3c http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/09-jstest-node.png%0a%3c %0a---%0a> [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/09-jstest-node.png"]%0a> %0a651c627,658%0a%3c %0a---%0a> http://s3.sitepoint.com/images/sp2013/ebooks_html_css.jpg%0a> %0a> ! Free ebook: Build Your Own Website The Right Way%0a> %0a> Subscribe to news and offers from SitePoint, and you'll receive a free copy of ''Build Your Own Website The Right Way Using HTML5 &amp; CSS3''.%0a> %0a> Go%0a> %0a> !!! 3 Reader comments%0a> %0a> [[http://www.sitepoint.com:80/#respond | Add new]]%0a> %0a> # http://0.gravatar.com/avatar/235f67c5eccf5b848fec257e5caf17c6?s=60&d=http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=60&r=G Daniele | February 27, 2013 at 6:21 pm Wow! More stuff here! Thank you very much for sharing.%0a> # http://1.gravatar.com/avatar/dc104cc2b40ef458a5a9d60c856e3e31?s=60&d=http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=60&r=G Joe Eames | March 1, 2013 at 5:53 pm thanks so much. we need so much more discussion on testing in javascript. I would like to point out that you are encouraging some testing antipatterns. Specifically duck punching your SUT by stubbing the save method. If you have to duck punch a stub in your SUT then your class has more than one responsibility. Time to break it up.%0a> # http://1.gravatar.com/avatar/55a0814e54da3bcf7861fbfbd7500c79?s=60&d=http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=60&r=G Paulo Moura | March 4, 2013 at 12:38 pm Congrats! Excellent article.%0a> %0a> Comments on this post are closed.%0a> %0a> * !!! About%0a> * [[http://www.sitepoint.com:80/about-us/ | About us]]%0a> * [[http://www.sitepoint.com:80/advertising | Advertise]]%0a> * [[http://www.sitepoint.com:80/legals | Legals]]%0a> * [[mailto:feedback@sitepoint.com | Feedback]]%0a> %0a> * !!! Our Sites%0a> * [[http://www.learnable.com | Learnable]]%0a> * [[http://www.sitepoint.com/forums/ | Forums]]%0a> * [[http://reference.sitepoint.com | Reference]]%0a> %0a> * !!! Connect%0a> * [[http://www.sitepoint.com:80/newsletter | '''']] [[https://www.facebook.com/sitepoint | '''']] [[http://twitter.com/sitepointdotcom | '''']]%0a> %0a659c666%0a%3c (:tags-hide saved page, javascript, node.js, backbone.js, mocha.js, testem, unit testing:)%0a---%0a> (:tags-hide saved page:)%0a662,665c669,671%0a%3c Parent: (Technology.)BackboneJS%0a%3c includeme: [[Technology.BackboneJS]%0a%3c Categories:[[!Articles]], [[!HowTos]]%0a%3c Posted: Mon, 26 Aug 2013 08:51:39 -0500%0a---%0a> Parent:%0a> includeme:%0a> Categories:[[!Articles]]%0a667a674%0a> Page saved at: Mon, 26 Aug 2013 08:51:39 -0500%0a
host:1377526031=71.63.215.130
author:1377525123=tamara
diff:1377525123:1377525123:=1,675d0%0a%3c (:nolinkwikiwords:)%0a%3c %0a%3c %0a%3c * [[http://www.sitepoint.com |  http://www.sitepoint.com/wp-content/themes/sitepoint/assets/svg/sitepoint.svg ]]%0a%3c * [[http://www.sitepoint.com:80/# | Menu]]%0a%3c %0a%3c * [[http://www.sitepoint.com:80/# | Topics]]%0a%3c ** [[http://www.sitepoint.com/html/ | HTML]]%0a%3c ** [[http://www.sitepoint.com/css/ | CSS]]%0a%3c ** [[http://www.sitepoint.com/javascript/ | JS]]%0a%3c ** [[http://www.sitepoint.com/php/ | PHP]]%0a%3c ** [[http://www.sitepoint.com/ruby/ | Ruby]]%0a%3c ** [[http://www.sitepoint.com/mobile/ | Mobile]]%0a%3c ** [[http://www.sitepoint.com/ux/ | UX]]%0a%3c ** [[http://www.sitepoint.com/design/ | Design]]%0a%3c * [[http://www.sitepoint.com:80/store/ | Store]]%0a%3c * [[http://www.sitepoint.com:80/newsletter | Subscribe]]%0a%3c *%0a%3c %0a%3c !! [[http://www.sitepoint.com/javascript/ | ''''JavaScript]] [[http://www.sitepoint.com/javascript/toolsandlibraries/ | Tools and Libraries]]%0a%3c %0a%3c ! Unit Testing Backbone.js Applications%0a%3c %0a%3c  [[http://www.sitepoint.com/author/sthomas/ |  http://0.gravatar.com/avatar/a5b424d4146905962a24acd6815aeb84?s=96&d=http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=96&r=G ]]%0a%3c %0a%3c [[http://www.sitepoint.com/author/sthomas/ | Stephen Thomas]]%0a%3c %0a%3c [[https://twitter.com/share | Tweet]]%0a%3c %0a%3c Published February 25, 2013%0a%3c %0a%3c After spending hours, maybe ''days'', putting the finishing touches on an awesome new feature for your web application, you&rsquo;re finally ready to see it in action. You add the new code to your JavaScript base, build the release candidate, and fire up your browser, expecting to be amazed. Then &hellip; Uh Oh&hellip; the new feature may be working fine, but some other critical part of your app &ndash; a part you didn&rsquo;t ''touch'' while developing the new version &ndash; has gone horribly awry. Now you&rsquo;re faced with the challenge of backtracking through days of work to try and figure out how you broke the existing code. Happy days are definitely not here again.%0a%3c %0a%3c That very scenario has bitten me more than I&rsquo;d like to admit. And if you&rsquo;ve been coding awhile, you&rsquo;ve probably seen it as well. Consider, though, what makes this scenario so painful. It isn&rsquo;t really because our new code broke existing code; that&rsquo;s inevitable in development. The real pain is that it took so long to notice the breakage. With so much development since we knew our application was working, there&rsquo;s a vast amount of code in which the bug may be hiding. And, though it may seem a bit like hunting for a needle in a haystack, we have no choice but to dive it.%0a%3c %0a%3c In this article we are truly going to banish this scenario from our JavaScript development. No more digging through hours, days, or weeks of code looking for a needle. The principle we&rsquo;ll adopt is a simple one: find any bug ''as soon as'' we create it. That&rsquo;s right; we&rsquo;re going to set up a development environment and process that tells us immediately when we write code that introduces a bug. Furthermore, the extra effort we put into the process won&rsquo;t go to waste once initial development is complete. The same test code that catches our development bugs will be completely reusable in an integration environment. We can easily incorporate the tests into our source code managements system, blocking bugs before they can even get into our code base.%0a%3c %0a%3c In the four sections that follow, we&rsquo;ll first look at the tools we need for a JavaScript testing environment. We&rsquo;ll then consider a trivial application, one that&rsquo;s simple enough to understand, yet has all the features and functionality that might exist in a real production web application. The final two sections demonstrate how we can use our environment to test the example app during development and, once initial development is complete, during integration.%0a%3c %0a%3c !! Assembling a JavaScript Testing Environment%0a%3c %0a%3c Our unit testing nirvana requires some development tools that may not be in your workbench (yet). The news, both good and bad, is that there are options aplenty. That&rsquo;s good news because it gives us options, and that&rsquo;s bad news because the pace of front end development today means that there are far too many options. To focus our evaluation, let&rsquo;s be explicit about our top two goals. Everything else is secondary:%0a%3c %0a%3c # Our environment must support frictionless, continuous testing during development.%0a%3c # Tests created during development must be equally usable in integration.%0a%3c %0a%3c !!! Execution Environments%0a%3c %0a%3c For JavaScript coding, there is no better development environment than the modern web browser. Whether your taste is Firebug or Webkit&rsquo;s Developer Tools, the browser supports live DOM inspection and editing, full interactive debugging, and sophisticated performance analysis. Web browsers are great for development, and so our test tools and environment must integrate with in-browser development. Web browsers, however, are not so great for integration testing. Integration testing often takes places on servers somewhere in the cloud (or a least somewhere in the data center). Those systems don&rsquo;t even have a graphical user interface, much less a modern web browser. For efficient integration testing, we need simple command line scripts and a JavaScript execution environment that supports them. For those requirements, the tool of choice is [[http://nodejs.org | node.js]]. Although there are other command line JavaScript environments, none has the breadth and depth of support to match node.js. In the integration phase, our test tools must integrate with node.js.%0a%3c %0a%3c !!! Test Framework%0a%3c %0a%3c Now that we&rsquo;ve established that our test tools must support both web browser and node.js environments, we can narrow the choices enough to select a core test framework. Many JavaScript test frameworks exist, but most are heavily biased towards browser testing; getting them working with node.js is usually possible, but often requires inelegant hacks or tweaks. One framework that does not suffer from this problem is [[http://visionmedia.github.com/mocha/ | Mocha]], which justifiably describes itself as:%0a%3c %0a%3c ->Mocha is a feature-rich JavaScript test framework running on node and the browser, making asynchronous testing simple and fun.%0a%3c %0a%3c Originally developed for node.js, Mocha has been extended to readily support web browsers as well. By using Mocha as our test framework, we can write tests that support both development and integration without modification.%0a%3c %0a%3c !!! Assertion Library%0a%3c %0a%3c Unlike some JavaScript test frameworks, Mocha was designed for maximum flexibility. As a consequence, we&rsquo;ll have to choose a few additional pieces to make it complete. In particular, we need a JavaScript assertion library. For that, we&rsquo;ll rely on the [[http://chaijs.com | Chai Assertion Library]]. Chai is somewhat unique in that it supports all of the common assertion styles &ndash; ''assert'', ''expect,'' and ''should.'' Assertion styles determine how we write tests in our test code. Under the covers, they&rsquo;re all equivalent; it&rsquo;s easy to translate tests from one assertion style to the other. The main difference in assertion styles is their readability. The choice of assertion style depends mostly on which style you (or your team) find most readable, and which style produces the most understandable tests. To see the difference, consider developing a trivial test for the following code:%0a%3c %0a%3c  var sum = 2 + 2;%0a%3c %0a%3c A traditional, assert-style test could be written as:%0a%3c %0a%3c  assert.equal(sum, 4, "sum should equal 4");%0a%3c %0a%3c That test gets the job done, but unless you&rsquo;ve grown accustomed to old-school unit testing, it&rsquo;s probably a little challenging to read and interpret. An alternative assertion style uses @@expect@@:%0a%3c %0a%3c  expect(sum).to.equal(4);%0a%3c %0a%3c Most developers find expect-style assertions easier to read and understand than assert-style tests. The third alternative, @@should@@, makes test assertions even more like natural language:%0a%3c %0a%3c  sum.should.equal(4);%0a%3c %0a%3c The Chai library supports all three assertion styles. In this article we&rsquo;ll stick with @@should@@.%0a%3c %0a%3c !!! Spies, Stubs, and Mocks%0a%3c %0a%3c Most web apps, including the trivial example we&rsquo;ll consider in this article, rely on third party libraries and services. In many cases, testing our code will require observing &ndash; or even controlling &ndash; those libraries and services. The [[http://sinonjs.org | Sinon.JS]] library provides a lot of tools for testing those interactions. Such tools fall into three general classes:%0a%3c %0a%3c * '''''Spy'''''. Test code that observes calls to functions outside of the code under test. Spies do not interfere with the operation of those external functions; they merely record the invocation and return value.%0a%3c * '''''Stub'''''. Test code that stands in for calls to functions outside of the code under test. The stub code doesn&rsquo;t attempt to replicate the external function; it simply prevents unresolved errors when the code under test accesses the external function.%0a%3c * '''''Mock'''''. Test code that mimics functions or services outside of the code under test. With mocks, test code can specify the return values from those functions or services so it can verify the code&rsquo;s response.%0a%3c %0a%3c Along with the Sinon.JS library itself, we can augment the standard Chai assertion library with [[https://github.com/domenic/sinon-chai | Sinon.JS Assertions for Chai]].%0a%3c %0a%3c !!! A Unit Test Development Environment%0a%3c %0a%3c The final tool for our testing workbench is a development environment for unit testing. For our example we&rsquo;ll use [[https://github.com/airportyh/testem | Test&rsquo;em]]. Test&rsquo;em is a collection of handy scripts to set up and run a continuous test environment. We could, if we chose to, write the scripts ourselves and manage the environment manually; however, Toby Ho (Test&rsquo;em&rsquo;s creator) has put together an awesome package that can save us the trouble.%0a%3c %0a%3c !! The Example Application%0a%3c %0a%3c To see our testing environment in action, let&rsquo;s consider a simple application. Although pared to its bare essentials, this application includes all the functionality required for a real application. (Complete source code for the application is available on [[https://github.com/jsprodotcom/source/blob/master/jsunittest.zip | GitHub]].)%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/01-jstest-app.png"]%0a%3c %0a%3c Users can see their list of todos, and they can click on a check box to toggle any todo&rsquo;s status.%0a%3c %0a%3c !!! The Todos Database%0a%3c %0a%3c Our application starts with a database table that holds the information for todos. Here&rsquo;s the SQL that we could use to create that table.%0a%3c %0a%3c  @@CREATE TABLE `todos` (   `id`       int(11)      NOT NULL AUTO_INCREMENT COMMENT 'Primary key for the table.',   `title`    varchar(256) NOT NULL DEFAULT ''     COMMENT 'The text for the todo item.',   `complete` bit(1)       NOT NULL DEFAULT b'0'   COMMENT 'Boolean indicating whether or not the item is complete.',   PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='To Do items.'@@%0a%3c %0a%3c And here&rsquo;s how the table might look after we&rsquo;ve put some test data in it.%0a%3c %0a%3c ||%0a%3c ||!id ||!title ||!complete ||%0a%3c ||1 ||A sample todo item in the database ||0 ||%0a%3c ||2 ||Another sample todo item ||1 ||%0a%3c ||3 ||Yet another sample todo item ||0 ||%0a%3c %0a%3c As the table shows, our todos only include a primary key (@@id@@), a title, and a status bit to indicate whether or not they are complete.%0a%3c %0a%3c !!! A REST API%0a%3c %0a%3c Our web application needs access to this database, so we&rsquo;ll provide a standard REST interface. The API follows Ruby conventions, but can be easily implemented by any server technology. In particular:%0a%3c %0a%3c * @@GET api/todos@@ returns a JSON-encoded array of all rows in the database.%0a%3c * @@GET api/todos/NNN@@ returns the JSON representation of the todo with @@id@@ equal to @@NNN@@.%0a%3c * @@POST api/todos@@ adds a new todo to the database using the JSON-encoded information in the request.%0a%3c * @@PUT api/todos/NNN@@ updates the todo with @@id@@ equal to @@NNN@@ using the JSON-encoded information in the request.%0a%3c * @@DELETE api/todos/NNN@@ deletes the todo with @@id@@ equal to @@NNN@@ from the database.%0a%3c %0a%3c If you&rsquo;re not particularly fond of Ruby, the source code includes a complete PHP implementation of this API.%0a%3c %0a%3c !!! JavaScript Libraries%0a%3c %0a%3c Our modest application is simple enough to implement in pure JavaScript without any libraries, but we have far bigger plans. We may be starting small, but eventually the app will feature amazing functionality and a delightful user interface. In preparation for that day, we&rsquo;ll build on a framework that can support our ultimate killer app:%0a%3c %0a%3c * [[http://jquery.com/ | jQuery]] for DOM manipulation, event handling, and server communications.%0a%3c * [[http://underscorejs.org/ | Underscore.js]] to enhance the core language with many indespensible utilities.%0a%3c * [[http://backbonejs.org/ | Backbone.js]] to define the structure of the application in terms of models and views.%0a%3c %0a%3c !!! An HTML Skeleton%0a%3c %0a%3c Now that we know the components that will comprise our application, we can define the HTML skeleton that will support it. There&rsquo;s nothing fancy about it (yet), just a minimal HTML5 document, some JavaScript files, and a small bit of code to get things started.%0a%3c %0a%3c  &lt;!DOCTYPE html&gt;%0a%3c  &lt;html lang="en"&gt;%0a%3c    &lt;head&gt;%0a%3c      &lt;meta charset="utf-8"&gt;%0a%3c      &lt;title&gt;&lt;/title&gt;%0a%3c    &lt;/head&gt;%0a%3c    &lt;body&gt;%0a%3c      &lt;h1&gt;List of Todos&lt;/h1&gt;%0a%3c %0a%3c      &lt;script src="lib/jquery-1.9.0.min.js"&gt;&lt;/script&gt;%0a%3c      &lt;script src="lib/underscore-min.js"&gt;&lt;/script&gt;%0a%3c      &lt;script src="lib/backbone-min.js"&gt;&lt;/script&gt;%0a%3c      &lt;script src="src/app-todos.js"&gt;&lt;/script&gt;%0a%3c      &lt;script&gt;%0a%3c        $(function () {%0a%3c          var todos = new todoApp.Todos();%0a%3c          todos.fetch();%0a%3c          var list = new todoApp.TodosList({collection: todos});%0a%3c          $("body").append(list.el);%0a%3c        })%0a%3c      &lt;/script&gt;%0a%3c    &lt;/body&gt;%0a%3c  &lt;/html&gt;%0a%3c %0a%3c !! Testing During Development%0a%3c %0a%3c Now that we&rsquo;ve selected our tools and specified the application, it&rsquo;s time to start development. Our first task is installing the tools.%0a%3c %0a%3c !!! Installing the Tools%0a%3c %0a%3c Even though we&rsquo;ll be developing in the browser, our test environment relies on node.js. The very first step, therefore, is installing node.js and the node package manager (npm). There are executable binaries for OS X, Windows, Linux, and SunOS on the [[http://nodejs.org/download/ | node.js web site]], as well as a source code for other operating systems. After running the installer, you can verify both node.js and npm from the command line.%0a%3c %0a%3c  @@bash-3.2$ node --version v0.8.18 bash-3.2$ npm --version 1.2.2 bash-3.2$@@%0a%3c %0a%3c Everything else we need is conveniently available as a node package. The node package manager can handle their installation, as well as any dependencies.%0a%3c %0a%3c  @@bash-3.2$ npm install jquery jsdom underscore backbone mocha chai sinon sinon-chai testem -g@@%0a%3c %0a%3c !!! Creating the Project Structure%0a%3c %0a%3c The source code for this example includes a complete project structure with the following 15 files:%0a%3c %0a%3c  @@todos.html testem.json api/htaccess api/todos.php lib/backbone-min.js lib/chai.js lib/jquery-1.9.0.min.js lib/sinon-1.5.2.js lib/sinon-chai.js lib/underscore-min.js mysql/todos.sql php-lib/dbconfig.inc.php src/app-todos.js test/app-todos-test.js test/mocha.opts@@%0a%3c %0a%3c Here is what each folder and file contains:%0a%3c %0a%3c * @@todos.html@@: The skeleton HTML file for our application, shown in full above.%0a%3c * @@testem.json@@: The configuration file for Test&rsquo;Em; we&rsquo;ll look at this in detail shortly.%0a%3c * @@api/@@: A folder for our REST API implementation.%0a%3c ** @@api/htaccess@@: Sample configuration for the Apache web server that supports our REST API.%0a%3c ** @@api/todos.php@@: PHP code to implement the REST API.%0a%3c * @@lib/@@: A folder for JavaScript libraries used by the app itself and the test framework.%0a%3c ** @@lib/backbone-min.js@@: Minified version of Backbone.js.%0a%3c ** @@lib/chai.js@@: Chai Assertion Library.%0a%3c ** @@lib/jquery-1.9.0.min.js@@: Minified version of jQuery.%0a%3c ** @@lib/sinon-1.5.2.js@@: Sinon.JS library.%0a%3c ** @@lib/sinon-chai.js@@: Sinon.JS Assertions for Chai.%0a%3c ** @@lib/underscore-min.js@@: Minified version of Underscore.js.%0a%3c * @@mysql/@@: A folder for MySQL code for the application.%0a%3c ** @@mysql/todos.sql@@: MySQL commands to create the application database.%0a%3c * @@php-lib/@@: A folder for PHP libraries and configuration for the application&rsquo;s REST API.%0a%3c ** @@php-lib/dbconfig.inc.php@@: PHP database configuration for the REST API.%0a%3c * @@src/@@: A folder for our client-side application code.%0a%3c ** @@src/app-todos.js@@: Our application.%0a%3c * @@test/@@: A folder for test code.%0a%3c ** @@test/app-todos-test.js@@: Test code for our application.%0a%3c ** @@test/mocha.opts@@: Configuration options for mocha; we&rsquo;ll look at this in the next section.%0a%3c %0a%3c During development, we&rsquo;re only interested in three of these files, @@testem.json@@, @@src/app-todos.js@@, and @@test/app-todos-test.js@@.%0a%3c %0a%3c !!! Configuring Test&rsquo;Em%0a%3c %0a%3c The last step before actual development is defining the Test&rsquo;Em configuration. That configuration resides in the JSON-formatted @@testem.json@@, and it&rsquo;s simple enough to create in any text editor. We simply specify that we&rsquo;re using Mocha (Test&rsquo;Em supports several frameworks), and we list the JavaScript files our application and our test code requires.%0a%3c %0a%3c  {%0a%3c    "framework": "mocha",%0a%3c    "src_files": [%0a%3c      "lib/jquery-1.9.0.min.js",%0a%3c      "lib/underscore-min.js",%0a%3c      "lib/backbone-min.js",%0a%3c      "src/*.js",%0a%3c      "lib/chai.js",%0a%3c      "lib/sinon-chai.js",%0a%3c      "lib/sinon-1.5.2.js",%0a%3c      "test/*.js"%0a%3c    ]%0a%3c  }%0a%3c %0a%3c !!! Start Developing%0a%3c %0a%3c Finally, we&rsquo;re ready to code. In a command shell, navigate to the root folder of our project and execute the command @@testem@@. The Test&rsquo;Em scripts will run, clearing the terminal window and giving us a URL in the upper right. Copy and paste that URL into our browser of choice and we&rsquo;re off.%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/02-jstest-testem.png"]%0a%3c %0a%3c As soon as we launch the web browser, it will automatically execute any tests that we&rsquo;ve defined. Since we&rsquo;re just beginning development, we won&rsquo;t have any code, nor any test cases. The browser will kindly point that out to us.%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/03-jstest-browser-none.png"]%0a%3c %0a%3c The terminal window from which we launched Test&rsquo;Em will also give us the status.%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/04-jstest-console-none.png"]%0a%3c %0a%3c !!! A First Test Case%0a%3c %0a%3c In the spirit of true Test-Driven Development, we&rsquo;ll begin by writing our first test case in the @@test/app-todos-test.js@@ file. Like any good web app, we want to minimize global name space pollution. To do that, we&rsquo;ll rely on a single global variable, @@todoApp@@, to contain all of our code. Our first test case will make sure that the global name space variable exists.%0a%3c %0a%3c  var should = chai.should();%0a%3c %0a%3c  describe("Application", function() {%0a%3c    it("creates a global variable for the name space", function () {%0a%3c      should.exist(todoApp);%0a%3c    })%0a%3c  })%0a%3c %0a%3c As you can see, we need one preliminary statement to tell Mocha that we&rsquo;re using Chai assertions. Then we can begin writing tests. By convention JavaScript tests are organized into blocks (which can be nested into sub-blocks, and so on). Each block begins with a @@describe()@@ function call to identify what part of the code we&rsquo;re testing. In this case we&rsquo;re testing the overall application, so that&rsquo;s the first parameter to @@describe()@@.%0a%3c %0a%3c Within a test block, we document each test case by what it tests. That&rsquo;s the purpose of the @@it()@@ function. The way to read any test case is to combine the @@describe()@@ and @@it()@@ strings into a single statement. Our first test case, therefore, is%0a%3c %0a%3c ->Application creates a global variable for the name space%0a%3c %0a%3c The test code itself is inside the @@it()@@ block. Our test case is%0a%3c %0a%3c  should.exist(todoApp);%0a%3c %0a%3c Now we have a complete test case. As soon as we save the file, Test`Em automatically takes over. It notices that one of our files has changed, so it immediately reruns the tests. Not surprisingly (since we haven&rsquo;t written any code for the application yet), our first test fails.%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/05-jstest-browser-fail.png"]%0a%3c %0a%3c The terminal window updates automatically as well.%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/06-jstest-console-fail.png"]%0a%3c %0a%3c To make the test pass, we must create the global name space variable. We shift to the @@srcapp-todos.js@@ file and add the necessary code.%0a%3c %0a%3c  if (typeof todoApp === "undefined") todoApp = {};%0a%3c %0a%3c As soon as we save the file, Test`Em once again springs into action. We immediately get updated results for our test cases.%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/07-jstest-browser-pass.png"]%0a%3c %0a%3c Step back for a moment and consider what&rsquo;s happening! Every time we make a change, either to the test code or to our application, Test`Em immediately re-runs our entire test suite. All we have to do is keep Test&rsquo;Em&rsquo;s browser or terminal window visible in a corner of our screen, and we can see the health of our code in real time, ''as we&rsquo;re developing''. We&rsquo;ll know as soon as we introduce a bug, even if the bug manifests itself in a part of the code different from where we&rsquo;re working. No more digging back through hours, days, or weeks of new code to figure out when we introduced a bug.%0a%3c %0a%3c !!! Testing the Model%0a%3c %0a%3c With our development environment now fully established, we can begin developing the application. Since our app shows a list of todos, it might be good to create a model for those todos. The model will need to keep track of both the title of the todo and it&rsquo;s status. Let&rsquo;s add a unit test that verifies we can create an todo with reasonable defaults.%0a%3c %0a%3c  describe("Todo Model", function(){%0a%3c    describe("Initialization", function() {%0a%3c      beforeEach(function() {%0a%3c        this.todo = new todoApp.Todo();%0a%3c      })%0a%3c      it("should default the status to 'pending'",function() {%0a%3c        this.todo.get('complete').should.be.false;%0a%3c      })%0a%3c      it("should default the title to an empty string",function() {%0a%3c        this.todo.get('title').should.equal("");%0a%3c      })%0a%3c    })%0a%3c  })%0a%3c %0a%3c There are several aspects of these tests worth noting.%0a%3c %0a%3c * We can nest test blocks within each other. One test block will contain all the unit tests for the todo model, and a sub-block of those tests focuses on initialization.%0a%3c * Within a test block, we can define functionality to execute before every test. That&rsquo;s the purpose of the @@beforeEach()@@ block. In the example above, we&rsquo;re creating a new instance of a Todo before every test.%0a%3c * The Mocha framework automatically makes sure that the JavaScript context (i.e. the value of @@this@@) is consistent for all our test cases. That&rsquo;s why we can define @@this.todo@@ in one function (the @@beforeEach()@@ parameter) and safely reference it in other functions (such as the @@it()@@ parameters). Without Mocha working behind the scenes to provide this consistency, JavaScript would define different contexts for each function.%0a%3c %0a%3c Of course, since we haven&rsquo;t written the model code yet, all our tests will fail. (And we&rsquo;ll know that immediately.) But once we&rsquo;ve added the code for our model, the tests pass and we&rsquo;re on our way.%0a%3c %0a%3c  todoApp.Todo = Backbone.Model.extend({%0a%3c    defaults: {%0a%3c      title: "",%0a%3c      complete:  false%0a%3c    }%0a%3c  })%0a%3c %0a%3c !!! Using Stubs for Third Party Functionality%0a%3c %0a%3c Now that we have a simple model for todos, we can start to define its behavior. One thing our model should do is update the database whenever any of its properties change. In a unit test environment, however, we won&rsquo;t have an actual database to check. On the other hand, we&rsquo;re not actually writing any code to do the database update. Rather, we&rsquo;re relying on Backbone to handle that interaction. That suggests a unit test strategy for this test case. All we need to know is that Backbone models use the @@save()@@ method to update whatever backing store is persisting the model. In our case that backing store is the database. Here is the unit test code we can use:%0a%3c %0a%3c  describe("Persistence", function() {%0a%3c    beforeEach(function() {%0a%3c      this.todo = new todoApp.Todo();%0a%3c      this.save_stub = sinon.stub(this.todo, "save");%0a%3c    })%0a%3c    afterEach(function() {%0a%3c      this.save_stub.restore();%0a%3c    })%0a%3c    it("should update server when title is changed", function() {%0a%3c      this.todo.set("title", "New Summary");%0a%3c      this.save_stub.should.have.been.calledOnce;%0a%3c    })%0a%3c    it("should update server when status is changed", function() {%0a%3c      this.todo.set('complete',true);%0a%3c      this.save_stub.should.have.been.calledOnce;%0a%3c    })%0a%3c  })%0a%3c %0a%3c We&rsquo;ve included some additional code before each test, and we&rsquo;ve added a section of code to execute after each test. That extra code manages a sinon @@stub@@, a function that effectively nullifies another function in the code. In our case the stub nullifies the @@save()@@ method of @@this.todo@@. With the stub in place, calls to the method won&rsquo;t actually go to the Backnone library. Instead, sinon intercepts those calls and simply returns immediately. This behavior is important. If we tried to execute the actual Backbone @@save()@@ method in a unit test environment, the call would fail because there would not be a database or server API available.%0a%3c %0a%3c With the stub in place, our test cases can use it to verify the model&rsquo;s behavior. In the first test case, we immediately set the todo&rsquo;s @@title@@ to a new value. Since that changes the @@title@@ property, we want our model to update its backing store. To check that we simply verify that the stub was called. To get our model to pass these tests, we can look for change events and respond appropriately.%0a%3c %0a%3c  todoApp.Todo = Backbone.Model.extend({%0a%3c    defaults: {%0a%3c      title: "",%0a%3c      complete:  false%0a%3c    },%0a%3c    initialize: function() {%0a%3c      this.on("change", function(){ this.save(); });%0a%3c    }%0a%3c  })%0a%3c %0a%3c !!! Testing the View%0a%3c %0a%3c Of course, our app won&rsquo;t do anyone any good if it doesn&rsquo;t actually display the todos to users, and that requires creating some HTML. We&rsquo;ll use Backbone views for that functionality. In our trivial app, we simply wish to render each todo as a list item. Here are the test cases that will get us started.%0a%3c %0a%3c  describe("Todo List Item View", function() {%0a%3c    beforeEach(function(){%0a%3c      this.todo = new todoApp.Todo({title: "Summary"});%0a%3c      this.item = new todoApp.TodoListItem({model: this.todo});%0a%3c    })%0a%3c    it("render() should return the view object", function() {%0a%3c      this.item.render().should.equal(this.item);%0a%3c    });%0a%3c    it("should render as a list item", function() {%0a%3c      this.item.render().el.nodeName.should.equal("LI");%0a%3c    })%0a%3c  })%0a%3c %0a%3c We begin our tests of the view with two test cases. First we ensure that the view&rsquo;s @@render()@@ method returns the view itself. That&rsquo;s a common and very convenient convention in Backbone because it allows method chaining. Our second test case verifies that the HTML element the render creates is a list item (@@&lt;li&gt;@@). The code necessary to pass these tests is a straightforward Backbone view.%0a%3c %0a%3c  todoApp.TodoListItem = Backbone.View.extend({%0a%3c    tagName: "li",%0a%3c    render: function() {%0a%3c      return this;%0a%3c    }%0a%3c  })%0a%3c %0a%3c Next, we can develop the detailed content of that list item view. As an example, we want the full list item to look something like the following.%0a%3c %0a%3c  &lt;li&gt;%0a%3c    &lt;label&gt;%0a%3c      &lt;input type='checkbox'/&gt;%0a%3c      Summary%0a%3c    &lt;/label&gt;%0a%3c  &lt;/li&gt;%0a%3c %0a%3c For our test cases, we can take advantage of jQuery to extract individual elements from the view&rsquo;s main element.%0a%3c %0a%3c  describe("Todo List Item View", function() {%0a%3c    beforeEach(function(){%0a%3c      this.todo = new todoApp.Todo({title: "Summary"});%0a%3c      this.item = new todoApp.TodoListItem({model: this.todo});%0a%3c    })%0a%3c    describe("Template", function() {%0a%3c      beforeEach(function(){%0a%3c        this.item.render();%0a%3c      })  %0a%3c      it("should contain the todo title as text", function() {%0a%3c        this.item.$el.text().should.have.string("Summary");%0a%3c      })%0a%3c      it("should include a label for the status", function() {%0a%3c        this.item.$el.find("label").should.have.length(1);%0a%3c      })%0a%3c      it("should include an &lt;input&gt; checkbox", function() {%0a%3c        this.item.$el.find("label&gt;input[type='checkbox']").should.have.length(1);%0a%3c      })%0a%3c      it("should be clear by default (for 'pending' todos)", function() {%0a%3c        this.item.$el.find("label&gt;input[type='checkbox']").is(":checked").should.be.false;%0a%3c      })%0a%3c      it("should be set for 'complete' todos", function() {%0a%3c        this.save_stub = sinon.stub(this.todo, "save");%0a%3c        this.todo.set("complete", true);%0a%3c        this.item.render();%0a%3c        this.item.$el.find("label&gt;input[type='checkbox']").is(":checked").should.be.true;%0a%3c        this.save_stub.restore();%0a%3c      })%0a%3c    })%0a%3c  })%0a%3c %0a%3c Notice that in the last test case we&rsquo;ve stubbed the model&rsquo;s @@save()@@ method. Since we&rsquo;re changing a property from its default value, our model will dutifully try to persist that change to its backing store. In a unit test environment, however, we won&rsquo;t have a database or a server API. The stub takes the place of the missing components and allows the tests to proceed without error. To get these tests to pass, we&rsquo;ll have to add some additional code to our view.%0a%3c %0a%3c  todoApp.TodoListItem = Backbone.View.extend({%0a%3c    tagName: "li",%0a%3c    template: _.template(%0a%3c      "&lt;label&gt;"%0a%3c      +   "&lt;input type='checkbox' &lt;%25 if(complete) print('checked') %25&gt;/&gt;"%0a%3c      +   " &lt;%25= title %25&gt; "%0a%3c      + "&lt;/label&gt;"),%0a%3c    render: function() {%0a%3c      this.$el.html(this.template(this.model.attributes));%0a%3c      return this;%0a%3c    }%0a%3c  })%0a%3c %0a%3c !!! Testing Model/View Interactions%0a%3c %0a%3c Now that we&rsquo;ve verified that our view implementation creates the right HTML markup, we can test its interaction with our model. In particular, we want to make sure that users can toggle a todo&rsquo;s status by clicking on the checkbox. Our test environment doesn&rsquo;t require an actual human user, so we&rsquo;ll use jQuery to generate the click event. To do that, however, we&rsquo;ll have to add content to a real live DOM. That content is known as a test ''fixture''. Here is the unit test code.%0a%3c %0a%3c  describe("Todo List Item View", function() {%0a%3c    beforeEach(function(){%0a%3c      this.todo = new todoApp.Todo({title: "Summary"});%0a%3c      this.item = new todoApp.TodoListItem({model: this.todo});%0a%3c      this.save_stub = sinon.stub(this.todo, "save");%0a%3c    })%0a%3c    afterEach(function() {%0a%3c      this.save_stub.restore();%0a%3c    })%0a%3c    describe("Model Interaction", function() {%0a%3c      it("should update model when checkbox clicked", function() {%0a%3c        $("&lt;div&gt;").attr("id","fixture").css("display","none").appendTo("body");%0a%3c        this.item.render();%0a%3c        $("#fixture").append(this.item.$el);%0a%3c        this.item.$el.find("input").click();%0a%3c        this.todo.get('complete').should.be.true;%0a%3c        $("#fixture").remove();%0a%3c      })%0a%3c    })%0a%3c  })%0a%3c %0a%3c Notice that we&rsquo;re once again stubbing the todo&rsquo;s @@save()@@ method. Otherwise, Backbone will try to update a non-existent backing store when we change the todo status with our simulated click.%0a%3c %0a%3c For the test case itself, we begin by creating a @@&lt;div&gt;@@ element with an @@id@@ of @@fixture@@ and we add that element to our live document. The live document, in this case, is the web page displaying the results of our tests. Although we remove the element immediately after verifying the test case, we also set its @@display@@ property to @@none@@ so it won&rsquo;t interfere with Mocha&rsquo;s display of the test results. The code that implements this functionality includes a small addition to the todo model. The addition is a new @@toggleStatus()@@ method.%0a%3c %0a%3c  todoApp.Todo = Backbone.Model.extend({%0a%3c    defaults: {%0a%3c      title: "",%0a%3c      complete:  false%0a%3c    },%0a%3c    initialize: function() {%0a%3c      this.on("change", function(){ this.save(); });%0a%3c    },%0a%3c    toggleStatus: function() {%0a%3c      this.set("complete",!this.get("complete""));%0a%3c    }%0a%3c  })%0a%3c %0a%3c In the view, we want to catch click events on the @@&lt;input&gt;@@ element and call this method for the model.%0a%3c %0a%3c  todoApp.TodoListItem = Backbone.View.extend({%0a%3c    tagName: "li",%0a%3c    template: _.template(%0a%3c      "&lt;label&gt;"%0a%3c      +   "&lt;input type='checkbox' &lt;%25 if(complete) print('checked') %25&gt;/&gt;"%0a%3c      +   " &lt;%25= title %25&gt; "%0a%3c      + "&lt;/label&gt;"),%0a%3c    events: {%0a%3c      "click input": "statusChanged"%0a%3c    },%0a%3c    render: function() {%0a%3c      this.$el.html(this.template(this.model.attributes));%0a%3c      return this;%0a%3c    },%0a%3c    statusChanged: function() {%0a%3c      this.model.toggleStatus();%0a%3c    }%0a%3c  })%0a%3c %0a%3c !!! Testing the Collection%0a%3c %0a%3c At this point our application is nearly complete. The only remaining functionality is collecting all the todos together. Naturally, we&rsquo;ll use a Backbone collection. We&rsquo;re actually not going to do anything special with our collection, so we don&rsquo;t really need any unit tests.%0a%3c %0a%3c  todoApp.Todos = Backbone.Collection.extend({%0a%3c    model: todoApp.Todo,%0a%3c    url:   "api/todos"%0a%3c  })%0a%3c %0a%3c We can, however, verify that our implementation of the collection&rsquo;s view is appropriate. We want that view rendered as an unordered list (@@&lt;ul&gt;@@). The test cases don&rsquo;t require any functionality that we haven&rsquo;t seen before.%0a%3c %0a%3c  describe("Todos List View", function() {%0a%3c    beforeEach(function(){%0a%3c      this.todos = new todoApp.Todos([%0a%3c        {title: "Todo 1"},%0a%3c        {title: "Todo 2"}%0a%3c      ]);%0a%3c      this.list = new todoApp.TodosList({collection: this.todos});%0a%3c    })%0a%3c    it("render() should return the view object", function() {%0a%3c      this.list.render().should.equal(this.list);%0a%3c    });%0a%3c    it("should render as an unordered list", function() {%0a%3c      this.list.render().el.nodeName.should.equal("UL");%0a%3c    })%0a%3c    it("should include list items for all models in collection", function() {%0a%3c      this.list.render();%0a%3c      this.list.$el.find("li").should.have.length(2);%0a%3c    })%0a%3c  })%0a%3c %0a%3c The view implementation is also straightforward. It tracks any additions to the collection and updates the view. For the initial @@render()@@ it simply adds all the models in the collection one at a time.%0a%3c %0a%3c  todoApp.TodosList = Backbone.View.extend({%0a%3c    tagName: "ul",%0a%3c    initialize: function() {%0a%3c      this.collection.on("add", this.addOne, this);%0a%3c    },%0a%3c    render: function() {%0a%3c      this.addAll();%0a%3c      return this;%0a%3c    },%0a%3c    addAll: function() {%0a%3c      this.collection.each(this.addOne, this);%0a%3c    },%0a%3c    addOne: function(todo) {%0a%3c      var item = new todoApp.TodoListItem({model: todo});%0a%3c      this.$el.append(item.render().el);%0a%3c    }%0a%3c  })%0a%3c %0a%3c !!! Bonus Tests: Verifying the API%0a%3c %0a%3c Because our REST API perfectly matches the API that Backbone expects, we didn&rsquo;t need any custom code to manage the API interaction. As a result, we don&rsquo;t need any unit test cases. In the real world, you might not be quite as lucky. If your API doesn&rsquo;t conform to Backbone conventions, you may need to override or extend some of the Backbone code to deal with the non-standard API. That extra code will need unit tests as well. Fortunately, it&rsquo;s relatively easy to test API interactions, even in a unit test environment.%0a%3c %0a%3c The easiest way to test API interactions relies on the fake server functionality of Sinon.JS. Unfortunately, that functionality is only available (currently) in Sinon&rsquo;s browser implementation. It is explicitly excluded from the node.js implementation. There are some hacks to get it running in node.js, but those hacks are quite brittle and rely on internal implementation details. It would be best to avoid them if possible. Fortunately, we can get by without Sinon&rsquo;s fake server.%0a%3c %0a%3c The secret is knowing that Backbone relies on jQuery&rsquo;s @@$.ajax()@@ function to implement REST APIs. We can intercept the API interactions by stubbing that function. When we stub the function, we&rsquo;ll want to substitute our own response. The @@yieldsTo()@@ method of the stub gives us exactly that opportunity. It tells sinon what additional action it should take when the stub is called. Here&rsquo;s a complete test case to verify that our collection correctly initializes itself using the REST API.%0a%3c %0a%3c  describe("Collection's Interaction with REST API", function() {%0a%3c    it("should load using the API", function() {%0a%3c      this.ajax_stub = sinon.stub($, "ajax").yieldsTo("success", [%0a%3c        { id: 1, title: "Mock Summary 1", complete: false },%0a%3c        { id: 2, title: "Mock Summary 2", complete: true  }%0a%3c      ]);%0a%3c      this.todos = new todoApp.Todos();%0a%3c      this.todos.fetch();%0a%3c      this.todos.should.have.length(2);%0a%3c      this.todos.at(0).get('title').should.equal("Mock Summary 1");%0a%3c      this.todos.at(1).get('title').should.equal("Mock Summary 2");%0a%3c      this.ajax_stub.restore();%0a%3c    })%0a%3c  })%0a%3c %0a%3c !!! Finished!%0a%3c %0a%3c As you can see from the screen shot that follows, we&rsquo;ve now written code that passes all the unit test cases. For the time being at least, development is complete.%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/08-jstest-browser-all.png"]%0a%3c %0a%3c !! Testing During Integration%0a%3c %0a%3c Now that client-side development of our app is complete (and we have the tests to prove it), we can safely tuck our JavaScript into a source code management system. It can then be integrated into the build process for the entire application. As part of that process, we want to execute all the test cases we&rsquo;ve developed. That will ensure that the code that makes up the final deployment passes all the tests that we&rsquo;ve defined. It will also protect against "minor tweaks" to the code that inadvertently introduce new bugs.%0a%3c %0a%3c During the build process, we&rsquo;ll likely want to execute our tests from the command line rather than in a web browser. We don&rsquo;t need the details of individual test cases, just an assurance that they all pass. Node.js makes it easy enough to accommodate this requirement. We only need to make a few small additions to our source code and unit test code files.%0a%3c %0a%3c Our code needs these modifications because node.js handles global variables differently than web browsers. In a web browser, JavaScript variables are, by default, global in scope. Node.js, on the other hand, confines variables to their local module by default. In that environment, our code won&rsquo;t be able to find the third-party libraries it needs (jQuery, Underscore, and Backbone. If we add the following statements at the beginning, though, node.js will resolve references to these libraries appropriately. We&rsquo;ve constructed these statements so that they do no harm in the web browser, so we can leave them in the code permanently.%0a%3c %0a%3c  var jQuery   = jQuery   || require("jquery");%0a%3c  var _        = _        || require("underscore");%0a%3c  var Backbone = Backbone || require("backbone");%0a%3c  Backbone.$   = jQuery;%0a%3c %0a%3c We also need to adjust our test code. The test scripts need access to their own libraries (jQuery, Chai, Sinon.JS, and sinon-chai). In addition, we need to add a little extra to simulate a web browser&rsquo;s Document Object Model (DOM). Recall that our tests for click handling required us to temporarily add a "fixture" @@&lt;div&gt;@@ to the web page. Node.js, of course, doesn&rsquo;t normally have a web page. The jsdom node package, however, lets us emulate one. The code below creates a minimal, simulated web page for our tests.%0a%3c %0a%3c  if (typeof exports !== 'undefined' &amp;&amp; this.exports !== exports) {%0a%3c    global.jQuery = require("jquery");%0a%3c    global.$ = jQuery;%0a%3c    global.chai = require("chai");%0a%3c    global.sinon = require("sinon");%0a%3c    chai.use(require("sinon-chai"));%0a%3c    global.jsdom = require("jsdom").jsdom;%0a%3c    var doc = jsdom("&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;");%0a%3c    global.window = doc.createWindow();%0a%3c  }%0a%3c %0a%3c The conditional that wraps these statements tests to see if we&rsquo;re running in the node.js environment instead of a web browser. In a browser, the extra statements aren&rsquo;t necessary, so we can safely skip them.%0a%3c %0a%3c With those changes, we can execute the full test suite from the command line. Simply navigate to the project&rsquo;s root folder and execute the command @@mocha@@. The result looks quite familiar.%0a%3c %0a%3c [image src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/02/09-jstest-node.png"]%0a%3c %0a%3c Of course, @@mocha@@ returns an exit level to indicate whether or not all of the tests passed. That lets us automate the tests as part of a continuous integration process, or simply as a local pre-commit script to preserve our own sanity.%0a%3c %0a%3c !! Conclusion%0a%3c %0a%3c At this point we have accomplished our goals. We have a unit test environment that runs in the background during development and immediately notifies us when any test fails. The tests execute in a web browser, giving us full access to the browser&rsquo;s development tools while we&rsquo;re coding. The same tests also run equally well from a command line script, so we can automate their execution during the build or integration process.%0a%3c %0a%3c !! Resources%0a%3c %0a%3c Here are the main unit test resources used in the article.%0a%3c %0a%3c * Command line JavaScript execution environment: [[http://nodejs.org/ | node.js]]%0a%3c * JavaScript unit testing framework: [[http://visionmedia.github.com/mocha/ | Mocha]]%0a%3c * Test Development Environment: [[https://github.com/airportyh/testem | Test&rsquo;em]]%0a%3c * JavaScript assertion library: [[http://chaijs.com/ | Chai Assertion Library]]%0a%3c * Spies, stubs, and mocks: [[http://sinonjs.org/ | Sinon.JS]]%0a%3c * Additional assertions: [[https://github.com/domenic/sinon-chai | Sinon.JS Assertions for Chai]]%0a%3c %0a%3c http://s3.sitepoint.com/images/sp2013/ebooks_html_css.jpg%0a%3c %0a%3c ! Free ebook: Build Your Own Website The Right Way%0a%3c %0a%3c Subscribe to news and offers from SitePoint, and you'll receive a free copy of ''Build Your Own Website The Right Way Using HTML5 &amp; CSS3''.%0a%3c %0a%3c Go%0a%3c %0a%3c !!! 3 Reader comments%0a%3c %0a%3c [[http://www.sitepoint.com:80/#respond | Add new]]%0a%3c %0a%3c # http://0.gravatar.com/avatar/235f67c5eccf5b848fec257e5caf17c6?s=60&d=http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=60&r=G Daniele | February 27, 2013 at 6:21 pm Wow! More stuff here! Thank you very much for sharing.%0a%3c # http://1.gravatar.com/avatar/dc104cc2b40ef458a5a9d60c856e3e31?s=60&d=http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=60&r=G Joe Eames | March 1, 2013 at 5:53 pm thanks so much. we need so much more discussion on testing in javascript. I would like to point out that you are encouraging some testing antipatterns. Specifically duck punching your SUT by stubbing the save method. If you have to duck punch a stub in your SUT then your class has more than one responsibility. Time to break it up.%0a%3c # http://1.gravatar.com/avatar/55a0814e54da3bcf7861fbfbd7500c79?s=60&d=http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=60&r=G Paulo Moura | March 4, 2013 at 12:38 pm Congrats! Excellent article.%0a%3c %0a%3c Comments on this post are closed.%0a%3c %0a%3c * !!! About%0a%3c * [[http://www.sitepoint.com:80/about-us/ | About us]]%0a%3c * [[http://www.sitepoint.com:80/advertising | Advertise]]%0a%3c * [[http://www.sitepoint.com:80/legals | Legals]]%0a%3c * [[mailto:feedback@sitepoint.com | Feedback]]%0a%3c %0a%3c * !!! Our Sites%0a%3c * [[http://www.learnable.com | Learnable]]%0a%3c * [[http://www.sitepoint.com/forums/ | Forums]]%0a%3c * [[http://reference.sitepoint.com | Reference]]%0a%3c %0a%3c * !!! Connect%0a%3c * [[http://www.sitepoint.com:80/newsletter | '''']] [[https://www.facebook.com/sitepoint | '''']] [[http://twitter.com/sitepointdotcom | '''']]%0a%3c %0a%3c &copy; 2000 &ndash; 2013 SitePoint Pty. Ltd.%0a%3c %0a%3c (:linkwikiwords:)%0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary: This article provides a thorough examination of unit testing with Backbone.js.%0a%3c Tags: saved page%0a%3c (:tags-hide saved page:)%0a%3c (:title Unit Testing Backbone.js Applications:)%0a%3c Source: http://www.sitepoint.com/unit-testing-backbone-js-applications/%0a%3c Parent:%0a%3c includeme:%0a%3c Categories:[[!Articles]]%0a%3c >>%3c%3c%0a%3c %0a%3c Page saved at: Mon, 26 Aug 2013 08:51:39 -0500%0a%3c %0a
host:1377525123=71.63.215.130
