version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4
author=tamara
charset=ISO-8859-1
csum=add category
ctime=1288657076
host=75.144.38.217
name=Technology.GettingTheHeadOfAWebPage
rev=11
targets=Technology.GettingTheHeadOfAWebPage,Technology.Pear,Technology.LWPUserAgent
text=[[#excerpt]]%0aSometimes, all you want to retrieve is just the headers from a web page. This can be done in a number of ways depending on what language you are using. Here, I will show how one can do it in PHP and Perl.%0a[[#excerptend]]%0a%0a[[#php]]%0a!!PHP methods%0a%0a!!! HTTP.php%0a%0a!!!!Installation%0a%0aFirst, you need to install the @@HTTP.php@@ module. This is done with the [[Pear]] utility:%0a%0a(:source lang=bash:)%0a$ sudo pear install HTTP.php%0a(:sourceend:)%0a%0a!!!!Using HTTP.php%0a%0aOnce that is installed, you need to include it in your script:%0a(:source lang=php:)%0arequire_once('HTTP.php');%0a(:sourceend:)%0a%0aThen, you can call the @@head@@ method with the URL you are seeking information from:%0a(:source lang=php:)%0a$headers = HTTP::head($uri);%0a(:sourceend:)%0a%0aYou can check if there are valid headers by checking to see what type of object @@$headers@@ is:%0a(:source lang=php tabwidth=2:)%0a	if (get_class($headers) == 'PEAR_Error') {%0a		$errors[] = "Invalid URI.";%0a		return NULL;%0a	}%0a(:sourceend:)%0a%0aFrom then on, you can discover more about the headers that got returned with the call.%0a(:source lang=php :)%0aif ($headers['response_code'] >= 400) {%0a      # process error code%0a}%0a(:sourceend:)%0a%0a!!! PHP cURL Library%0a%0a[[http://us2.php.net/manual/en/book.curl.php|CURL]] is a library that handles fetching of web items that is built in to PHP. It has many many options and can also be used to fetch just the head of the page. It's not quite as convenient as using the HTTP.php pear extension, but if you can't use that, CURL is still available.%0a%0aFrom the basic curl example page on php.net:%0a%0a-> The basic idea behind the cURL functions is that you initialize a cURL session using the curl_init(), then you can set all your options for the transfer via the curl_setopt(), then you can execute the session with the curl_exec() and then you finish off your session using the curl_close().%0a%0aThe option we're most interested in here is the @@CURLOPT_HEADER@@ option, which should be set to 1 to retrieve the header.%0a%0a(:source lang=php linenum:)%0a$ch = curl_init("http://www.tamaratemple.com/"); // sets the URL to retrieve%0a$fp = fopen("example_homepage.txt", "w"); // opens a file to receive the body of the page%0a$hp = fopen("example_homepage_header.txt", "w"); // opens of file to receive the header of the page%0a%0acurl_setopt($ch, CURLOPT_FILE, $fp); // writes page contents to file%0acurl_setopt($ch, CURLOPT_HEADER, false); // do not include the header with the page contents%0acurl_setopt($ch, CURLOPT_WRITEHEADER, $hp); // file to hold the header%0a%0acurl_exec($ch); // execute the curl operation%0a%0a// close curl and file handles%0acurl_close($ch); %0afclose($fp);%0afclose($hp);%0a(:sourceend:)%0a%0aThen, you can read in the header and do something with it:%0a%0a(:source lang=php linenum:)%0a$header = file_get_contents("example_homepage_header.txt");%0aecho "Header:".PHP_EOL;%0aecho "----".PHP_EOL.$header."----".PHP_EOL;%0aecho PHP_EOL;%0a%0a// Processing the header%0a$header_lines = explode("\n",$header); // turn the text into lines in an array%0a$header_lines = array_map("rtrim",$header_lines);%0aprint_r($header_lines);%0a%0a// First line of header is the response text and code%0a$response = explode(" ",$header_lines[0], 3);%0a$protocol = explode("/",$response[0]);%0a$header_hash['Protocol'] = $protocol[0];%0a$header_hash['ProtocolVersion'] = $protocol[1];%0a$header_hash['ResponseCode'] = $response[1];%0a$header_hash['ResponseText'] = $response[2];%0a%0a// Remainder of header is field: value lines%0afor ($i=1; $i%3ccount($header_lines); $i++) { %0a  if (empty($header_lines[$i])) continue;%0a  $line = explode(": ",$header_lines[$i],2);%0a  $header_hash[$line[0]] = $line[1];%0a}%0a%0aprint_r($header_hash);%0a(:sourceend:)%0a%0aThe output from the combined example would be:%0a(:code:)%0a$ php curlexample.php %0aHeader:%0a----%0aHTTP/1.1 200 OK%0aDate: Mon, 09 Apr 2012 22:00:17 GMT%0aServer: Apache/2.2.3 (CentOS)%0aX-Powered-By: PHP/5.2.13%0aX-Pingback: http://www.tamaratemple.com/xmlrpc.php%0aSet-Cookie: PHPSESSID=h3h24ha5po4o1c2tjb76d4obk1; path=/%0aTransfer-Encoding: chunked%0aContent-Type: text/html; charset=UTF-8%0a%0a----%0a%0aArray%0a(%0a    [0] => HTTP/1.1 200 OK%0a    [1] => Date: Mon, 09 Apr 2012 22:00:17 GMT%0a    [2] => Server: Apache/2.2.3 (CentOS)%0a    [3] => X-Powered-By: PHP/5.2.13%0a    [4] => X-Pingback: http://www.tamaratemple.com/xmlrpc.php%0a    [5] => Set-Cookie: PHPSESSID=h3h24ha5po4o1c2tjb76d4obk1; path=/%0a    [6] => Transfer-Encoding: chunked%0a    [7] => Content-Type: text/html; charset=UTF-8%0a    [8] => %0a    [9] => %0a)%0aArray%0a(%0a    [Protocol] => HTTP%0a    [ProtocolVersion] => 1.1%0a    [ResponseCode] => 200%0a    [ResponseText] => OK%0a    [Date] => Mon, 09 Apr 2012 22:00:17 GMT%0a    [Server] => Apache/2.2.3 (CentOS)%0a    [X-Powered-By] => PHP/5.2.13%0a    [X-Pingback] => http://www.tamaratemple.com/xmlrpc.php%0a    [Set-Cookie] => PHPSESSID=h3h24ha5po4o1c2tjb76d4obk1; path=/%0a    [Transfer-Encoding] => chunked%0a    [Content-Type] => text/html; charset=UTF-8%0a)%0a(:codeend:)%0a[[#phpend]]%0a%0a[[#perl]]%0a!! Perl%0a%0aThe standard way of getting urls in perl is via the estimable [[LWP::UserAgent]] module. A simple example:%0a%0a(:source lang=perl linenum:)%0a#!/opt/local/bin/perl -w%0ause strict;%0ause LWP::UserAgent;%0ause Data::Dumper::Names;%0a%0amy $ua = LWP::UserAgent->new;%0amy $response = $ua->get("http://www.tamaratemple.com");%0adie "$response->status_line" if ! $response->is_success;%0a# The header is in $response->{_headers}%0a# Access fields in header with $response->header($field)%0aprint Dumper($response->{_headers}) . "\n\n";%0aprint "Content-type is: " . $response->header("Content-type") . "\n";%0a(:sourceend:)%0a%0aProduces:%0a%0a(:code:)%0a$VAR1 = bless( {%0a                 'x-meta-viewport' => 'width=device-width',%0a                 'connection' => 'close',%0a                 'set-cookie' => 'PHPSESSID=h15e25e00vqcg06fviallshsk5; path=/',%0a                 'date' => 'Mon, 09 Apr 2012 22:49:39 GMT',%0a                 'client-peer' => '97.74.126.203:80',%0a                 'client-date' => 'Mon, 09 Apr 2012 22:49:40 GMT',%0a                 'content-type' => 'text/html; charset=UTF-8',%0a                 'client-transfer-encoding' => [%0a                                                 'chunked'%0a                                               ],%0a                 'server' => 'Apache/2.2.3 (CentOS)',%0a                 'link' => [%0a                             '%3chttp://gmpg.org/xfn/11>; rel="profile"',%0a                             '%3chttp://www.tamaratemple.com/wp-content/themes/twentyeleven/style.css>; media="all"; rel="stylesheet"; type="text/css"',%0a                             '%3chttp://www.tamaratemple.com/xmlrpc.php>; rel="pingback"',%0a                             '%3chttp://www.tamaratemple.com/feed/>; rel="alternate"; title="Tamara Temple\'s Blog » Feed"; type="application/rss+xml"',%0a                             '%3chttp://www.tamaratemple.com/comments/feed/>; rel="alternate"; title="Tamara Temple\'s Blog » Comments Feed"; type="application/rss+xml"',%0a                             '%3chttp://www.tamaratemple.com/showcase/feed/>; rel="alternate"; title="Tamara Temple\'s Blog » Showcase Comments Feed"; type="application/rss+xml"',%0a                             '%3chttp://www.tamaratemple.com/wp-content/themes/twentyeleven/colors/dark.css>; id="dark-css"; media="all"; rel="stylesheet"; type="text/css"',%0a                             '%3chttp://www.tamaratemple.com/wp-content/plugins/rtsocial/styles/style.css?ver=3.3.1>; id="styleSheet-css"; media="all"; rel="stylesheet"; type="text/css"',%0a                             '%3chttp://www.tamaratemple.com/wp-content/plugins/twitter-blackbird-pie/css/blackbirdpie.css?ver=20110416>; id="blackbirdpie-css-css"; media="all"; rel="stylesheet"; type="text/css"',%0a                             '%3chttp://www.tamaratemple.com/xmlrpc.php?rsd>; rel="EditURI"; title="RSD"; type="application/rsd+xml"',%0a                             '%3chttp://www.tamaratemple.com/wp-includes/wlwmanifest.xml>; rel="wlwmanifest"; type="application/wlwmanifest+xml"',%0a                             '%3chttp://www.tamaratemple.com/visitors/>; rel="prev"; title="Visitors"',%0a                             '%3chttp://www.tamaratemple.com/posts/>; rel="next"; title="Posts"',%0a                             '%3chttp://www.tamaratemple.com/>; rel="canonical"'%0a                           ],%0a                 'x-powered-by' => 'PHP/5.2.13',%0a                 'x-meta-generator' => 'WordPress 3.3.1',%0a                 'client-response-num' => 1,%0a                 'x-meta-charset' => 'UTF-8',%0a                 'x-pingback' => 'http://www.tamaratemple.com/xmlrpc.php',%0a                 'title' => 'Tamara Temple\'s Blog | Rumblings and Ramblings of a Well-Travelled Mouse',%0a                 'x-meta-google-site-verification' => 'X8LsSEQsjd45g6RMdTR0CCVkl-3pgVAgOb4oG7s5JH0'%0a               }, 'HTTP::Headers' );%0a%0a%0aContent-type is: text/html; charset=UTF-8%0a(:codeend:)%0a%0a%0a[[#perlend]]%0a%0a(:Summary:a one line description:)%0a(:Parent:(Technology.)Development:)%0a(:IncludeMe:[[(Technology.)Development]]:)%0a(:Categories:[[!Articles]], [[!HowTos]]:)%0a(:Tags: http header, examples, php, perl:)%0a(:tags-hide http header, examples, php, perl :)%0a
time=1352135604
author:1352135604=tamara
csum:1352135604=add category
diff:1352135604:1334030423:minor=219c219%0a%3c (:Categories:[[!Articles]], [[!HowTos]]:)%0a---%0a> (:Categories:[[!Articles]]:)%0a
host:1352135604=75.144.38.217
author:1334030423=tamara
diff:1334030423:1334030386:minor=1c1%0a%3c [[#excerpt]]%0a---%0a> [#excerpt]]%0a
host:1334030423=127.0.0.1
author:1334030386=tamara
csum:1334030386=add perl section
diff:1334030386:1334011833:=
host:1334030386=127.0.0.1
author:1334011833=tamara
diff:1334011833:1334009308:=1c1%0a%3c [#excerpt]]%0a---%0a> [[#excerpt]]%0a5d4%0a%3c [[#php]]%0a147,149c146%0a%3c [[#phpend]]%0a%3c %0a%3c [[#perl]]%0a---%0a> %0a151,214c148%0a%3c %0a%3c The standard way of getting urls in perl is via the estimable [[LWP::UserAgent]] module. A simple example:%0a%3c %0a%3c (:source lang=perl linenum:)%0a%3c #!/opt/local/bin/perl -w%0a%3c use strict;%0a%3c use LWP::UserAgent;%0a%3c use Data::Dumper::Names;%0a%3c %0a%3c my $ua = LWP::UserAgent->new;%0a%3c my $response = $ua->get("http://www.tamaratemple.com");%0a%3c die "$response->status_line" if ! $response->is_success;%0a%3c # The header is in $response->{_headers}%0a%3c # Access fields in header with $response->header($field)%0a%3c print Dumper($response->{_headers}) . "\n\n";%0a%3c print "Content-type is: " . $response->header("Content-type") . "\n";%0a%3c (:sourceend:)%0a%3c %0a%3c Produces:%0a%3c %0a%3c (:code:)%0a%3c $VAR1 = bless( {%0a%3c                  'x-meta-viewport' => 'width=device-width',%0a%3c                  'connection' => 'close',%0a%3c                  'set-cookie' => 'PHPSESSID=h15e25e00vqcg06fviallshsk5; path=/',%0a%3c                  'date' => 'Mon, 09 Apr 2012 22:49:39 GMT',%0a%3c                  'client-peer' => '97.74.126.203:80',%0a%3c                  'client-date' => 'Mon, 09 Apr 2012 22:49:40 GMT',%0a%3c                  'content-type' => 'text/html; charset=UTF-8',%0a%3c                  'client-transfer-encoding' => [%0a%3c                                                  'chunked'%0a%3c                                                ],%0a%3c                  'server' => 'Apache/2.2.3 (CentOS)',%0a%3c                  'link' => [%0a%3c                              '%3chttp://gmpg.org/xfn/11>; rel="profile"',%0a%3c                              '%3chttp://www.tamaratemple.com/wp-content/themes/twentyeleven/style.css>; media="all"; rel="stylesheet"; type="text/css"',%0a%3c                              '%3chttp://www.tamaratemple.com/xmlrpc.php>; rel="pingback"',%0a%3c                              '%3chttp://www.tamaratemple.com/feed/>; rel="alternate"; title="Tamara Temple\'s Blog » Feed"; type="application/rss+xml"',%0a%3c                              '%3chttp://www.tamaratemple.com/comments/feed/>; rel="alternate"; title="Tamara Temple\'s Blog » Comments Feed"; type="application/rss+xml"',%0a%3c                              '%3chttp://www.tamaratemple.com/showcase/feed/>; rel="alternate"; title="Tamara Temple\'s Blog » Showcase Comments Feed"; type="application/rss+xml"',%0a%3c                              '%3chttp://www.tamaratemple.com/wp-content/themes/twentyeleven/colors/dark.css>; id="dark-css"; media="all"; rel="stylesheet"; type="text/css"',%0a%3c                              '%3chttp://www.tamaratemple.com/wp-content/plugins/rtsocial/styles/style.css?ver=3.3.1>; id="styleSheet-css"; media="all"; rel="stylesheet"; type="text/css"',%0a%3c                              '%3chttp://www.tamaratemple.com/wp-content/plugins/twitter-blackbird-pie/css/blackbirdpie.css?ver=20110416>; id="blackbirdpie-css-css"; media="all"; rel="stylesheet"; type="text/css"',%0a%3c                              '%3chttp://www.tamaratemple.com/xmlrpc.php?rsd>; rel="EditURI"; title="RSD"; type="application/rsd+xml"',%0a%3c                              '%3chttp://www.tamaratemple.com/wp-includes/wlwmanifest.xml>; rel="wlwmanifest"; type="application/wlwmanifest+xml"',%0a%3c                              '%3chttp://www.tamaratemple.com/visitors/>; rel="prev"; title="Visitors"',%0a%3c                              '%3chttp://www.tamaratemple.com/posts/>; rel="next"; title="Posts"',%0a%3c                              '%3chttp://www.tamaratemple.com/>; rel="canonical"'%0a%3c                            ],%0a%3c                  'x-powered-by' => 'PHP/5.2.13',%0a%3c                  'x-meta-generator' => 'WordPress 3.3.1',%0a%3c                  'client-response-num' => 1,%0a%3c                  'x-meta-charset' => 'UTF-8',%0a%3c                  'x-pingback' => 'http://www.tamaratemple.com/xmlrpc.php',%0a%3c                  'title' => 'Tamara Temple\'s Blog | Rumblings and Ramblings of a Well-Travelled Mouse',%0a%3c                  'x-meta-google-site-verification' => 'X8LsSEQsjd45g6RMdTR0CCVkl-3pgVAgOb4oG7s5JH0'%0a%3c                }, 'HTTP::Headers' );%0a%3c %0a%3c %0a%3c Content-type is: text/html; charset=UTF-8%0a%3c (:codeend:)%0a%3c %0a%3c %0a%3c [[#perlend]]%0a---%0a> (t.b.d.)%0a
host:1334011833=127.0.0.1
author:1334009308=tamara
diff:1334009308:1334008710:=82,83c82,83%0a%3c print_r($header_lines);%0a%3c %0a---%0a> var_dump($header_lines);%0a> %0a94d93%0a%3c   if (empty($header_lines[$i])) continue;%0a99c98%0a%3c print_r($header_hash);%0a---%0a> var_dump($header_hash);%0a104c103%0a%3c $ php curlexample.php %0a---%0a> miishka:tmp tamara$ php curlexample.php %0a108c107%0a%3c Date: Mon, 09 Apr 2012 22:00:17 GMT%0a---%0a> Date: Mon, 09 Apr 2012 21:39:31 GMT%0a112c111%0a%3c Set-Cookie: PHPSESSID=h3h24ha5po4o1c2tjb76d4obk1; path=/%0a---%0a> Set-Cookie: PHPSESSID=4f7gl69kqu7amroravjvij5op6; path=/%0a118,144c117,160%0a%3c Array%0a%3c (%0a%3c     [0] => HTTP/1.1 200 OK%0a%3c     [1] => Date: Mon, 09 Apr 2012 22:00:17 GMT%0a%3c     [2] => Server: Apache/2.2.3 (CentOS)%0a%3c     [3] => X-Powered-By: PHP/5.2.13%0a%3c     [4] => X-Pingback: http://www.tamaratemple.com/xmlrpc.php%0a%3c     [5] => Set-Cookie: PHPSESSID=h3h24ha5po4o1c2tjb76d4obk1; path=/%0a%3c     [6] => Transfer-Encoding: chunked%0a%3c     [7] => Content-Type: text/html; charset=UTF-8%0a%3c     [8] => %0a%3c     [9] => %0a%3c )%0a%3c Array%0a%3c (%0a%3c     [Protocol] => HTTP%0a%3c     [ProtocolVersion] => 1.1%0a%3c     [ResponseCode] => 200%0a%3c     [ResponseText] => OK%0a%3c     [Date] => Mon, 09 Apr 2012 22:00:17 GMT%0a%3c     [Server] => Apache/2.2.3 (CentOS)%0a%3c     [X-Powered-By] => PHP/5.2.13%0a%3c     [X-Pingback] => http://www.tamaratemple.com/xmlrpc.php%0a%3c     [Set-Cookie] => PHPSESSID=h3h24ha5po4o1c2tjb76d4obk1; path=/%0a%3c     [Transfer-Encoding] => chunked%0a%3c     [Content-Type] => text/html; charset=UTF-8%0a%3c )%0a---%0a> array(10) {%0a>   [0]=>%0a>   string(15) "HTTP/1.1 200 OK"%0a>   [1]=>%0a>   string(35) "Date: Mon, 09 Apr 2012 21:39:31 GMT"%0a>   [2]=>%0a>   string(29) "Server: Apache/2.2.3 (CentOS)"%0a>   [3]=>%0a>   string(24) "X-Powered-By: PHP/5.2.13"%0a>   [4]=>%0a>   string(50) "X-Pingback: http://www.tamaratemple.com/xmlrpc.php"%0a>   [5]=>%0a>   string(56) "Set-Cookie: PHPSESSID=4f7gl69kqu7amroravjvij5op6; path=/"%0a>   [6]=>%0a>   string(26) "Transfer-Encoding: chunked"%0a>   [7]=>%0a>   string(38) "Content-Type: text/html; charset=UTF-8"%0a>   [8]=>%0a>   string(0) ""%0a>   [9]=>%0a>   string(0) ""%0a> }%0a> array(10) {%0a>   ["ResponseCode"]=>%0a>   string(3) "200"%0a>   ["ResponseText"]=>%0a>   string(2) "OK"%0a>   ["Date"]=>%0a>   string(29) "Mon, 09 Apr 2012 21:39:31 GMT"%0a>   ["Server"]=>%0a>   string(21) "Apache/2.2.3 (CentOS)"%0a>   ["X-Powered-By"]=>%0a>   string(10) "PHP/5.2.13"%0a>   ["X-Pingback"]=>%0a>   string(38) "http://www.tamaratemple.com/xmlrpc.php"%0a>   ["Set-Cookie"]=>%0a>   string(44) "PHPSESSID=4f7gl69kqu7amroravjvij5op6; path=/"%0a>   ["Transfer-Encoding"]=>%0a>   string(7) "chunked"%0a>   ["Content-Type"]=>%0a>   string(24) "text/html; charset=UTF-8"%0a>   [""]=>%0a>   NULL%0a> }%0a
host:1334009308=127.0.0.1
author:1334008710=tamara
csum:1334008710=update header via curl in php section
diff:1334008710:1334008032:=82,83c82%0a%3c var_dump($header_lines);%0a%3c %0a---%0a> %0a161c160%0a%3c (:codeend:)%0a---%0a> (:code:)%0a
host:1334008710=127.0.0.1
author:1334008032=tamara
diff:1334008032:1311700506:=1,10c1,12%0a%3c [[#excerpt]]%0a%3c Sometimes, all you want to retrieve is just the headers from a web page. This can be done in a number of ways depending on what language you are using. Here, I will show how one can do it in PHP and Perl.%0a%3c [[#excerptend]]%0a%3c %0a%3c !!PHP methods%0a%3c %0a%3c !!! HTTP.php%0a%3c %0a%3c !!!!Installation%0a%3c %0a---%0a> (:Summary:retrieving just the header from a web page:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>%0a> %0a> %0a> Sometimes, all you want to retrieve is just the headers from a web page. Normally, PHP retrieves the web page contents with functions such as @@[[http://us.php.net/manual/en/function.file-get-contents.php|file_get_contents()]]@@ or using the @@[[http://us.php.net/manual/en/book.curl.php|curl]]@@ extension. An extension, known as @@HTTP.php@@ is available via [[Pear]] which provides a method for retrieving just the headers.%0a> %0a> !! HTTP.php%0a> %0a> !!!Installation%0a> %0a17,18c19,20%0a%3c !!!!Using HTTP.php%0a%3c %0a---%0a> !!!Using HTTP.php%0a> %0a44,45c46,47%0a%3c !!! PHP cURL Library%0a%3c %0a---%0a> !! CURL %0a> %0a54,170c56,61%0a%3c (:source lang=php linenum:)%0a%3c $ch = curl_init("http://www.tamaratemple.com/"); // sets the URL to retrieve%0a%3c $fp = fopen("example_homepage.txt", "w"); // opens a file to receive the body of the page%0a%3c $hp = fopen("example_homepage_header.txt", "w"); // opens of file to receive the header of the page%0a%3c %0a%3c curl_setopt($ch, CURLOPT_FILE, $fp); // writes page contents to file%0a%3c curl_setopt($ch, CURLOPT_HEADER, false); // do not include the header with the page contents%0a%3c curl_setopt($ch, CURLOPT_WRITEHEADER, $hp); // file to hold the header%0a%3c %0a%3c curl_exec($ch); // execute the curl operation%0a%3c %0a%3c // close curl and file handles%0a%3c curl_close($ch); %0a%3c fclose($fp);%0a%3c fclose($hp);%0a%3c (:sourceend:)%0a%3c %0a%3c Then, you can read in the header and do something with it:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $header = file_get_contents("example_homepage_header.txt");%0a%3c echo "Header:".PHP_EOL;%0a%3c echo "----".PHP_EOL.$header."----".PHP_EOL;%0a%3c echo PHP_EOL;%0a%3c %0a%3c // Processing the header%0a%3c $header_lines = explode("\n",$header); // turn the text into lines in an array%0a%3c $header_lines = array_map("rtrim",$header_lines);%0a%3c %0a%3c // First line of header is the response text and code%0a%3c $response = explode(" ",$header_lines[0], 3);%0a%3c $protocol = explode("/",$response[0]);%0a%3c $header_hash['Protocol'] = $protocol[0];%0a%3c $header_hash['ProtocolVersion'] = $protocol[1];%0a%3c $header_hash['ResponseCode'] = $response[1];%0a%3c $header_hash['ResponseText'] = $response[2];%0a%3c %0a%3c // Remainder of header is field: value lines%0a%3c for ($i=1; $i%3ccount($header_lines); $i++) { %0a%3c   $line = explode(": ",$header_lines[$i],2);%0a%3c   $header_hash[$line[0]] = $line[1];%0a%3c }%0a%3c %0a%3c var_dump($header_hash);%0a%3c (:sourceend:)%0a%3c %0a%3c The output from the combined example would be:%0a%3c (:code:)%0a%3c miishka:tmp tamara$ php curlexample.php %0a%3c Header:%0a%3c ----%0a%3c HTTP/1.1 200 OK%0a%3c Date: Mon, 09 Apr 2012 21:39:31 GMT%0a%3c Server: Apache/2.2.3 (CentOS)%0a%3c X-Powered-By: PHP/5.2.13%0a%3c X-Pingback: http://www.tamaratemple.com/xmlrpc.php%0a%3c Set-Cookie: PHPSESSID=4f7gl69kqu7amroravjvij5op6; path=/%0a%3c Transfer-Encoding: chunked%0a%3c Content-Type: text/html; charset=UTF-8%0a%3c %0a%3c ----%0a%3c %0a%3c array(10) {%0a%3c   [0]=>%0a%3c   string(15) "HTTP/1.1 200 OK"%0a%3c   [1]=>%0a%3c   string(35) "Date: Mon, 09 Apr 2012 21:39:31 GMT"%0a%3c   [2]=>%0a%3c   string(29) "Server: Apache/2.2.3 (CentOS)"%0a%3c   [3]=>%0a%3c   string(24) "X-Powered-By: PHP/5.2.13"%0a%3c   [4]=>%0a%3c   string(50) "X-Pingback: http://www.tamaratemple.com/xmlrpc.php"%0a%3c   [5]=>%0a%3c   string(56) "Set-Cookie: PHPSESSID=4f7gl69kqu7amroravjvij5op6; path=/"%0a%3c   [6]=>%0a%3c   string(26) "Transfer-Encoding: chunked"%0a%3c   [7]=>%0a%3c   string(38) "Content-Type: text/html; charset=UTF-8"%0a%3c   [8]=>%0a%3c   string(0) ""%0a%3c   [9]=>%0a%3c   string(0) ""%0a%3c }%0a%3c array(10) {%0a%3c   ["ResponseCode"]=>%0a%3c   string(3) "200"%0a%3c   ["ResponseText"]=>%0a%3c   string(2) "OK"%0a%3c   ["Date"]=>%0a%3c   string(29) "Mon, 09 Apr 2012 21:39:31 GMT"%0a%3c   ["Server"]=>%0a%3c   string(21) "Apache/2.2.3 (CentOS)"%0a%3c   ["X-Powered-By"]=>%0a%3c   string(10) "PHP/5.2.13"%0a%3c   ["X-Pingback"]=>%0a%3c   string(38) "http://www.tamaratemple.com/xmlrpc.php"%0a%3c   ["Set-Cookie"]=>%0a%3c   string(44) "PHPSESSID=4f7gl69kqu7amroravjvij5op6; path=/"%0a%3c   ["Transfer-Encoding"]=>%0a%3c   string(7) "chunked"%0a%3c   ["Content-Type"]=>%0a%3c   string(24) "text/html; charset=UTF-8"%0a%3c   [""]=>%0a%3c   NULL%0a%3c }%0a%3c (:code:)%0a%3c %0a%3c !! Perl%0a%3c (t.b.d.)%0a%3c %0a%3c (:Summary:a one line description:)%0a%3c (:Parent:(Technology.)Development:)%0a%3c (:IncludeMe:[[(Technology.)Development]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: http header, examples, php, perl:)%0a%3c (:tags-hide http header, examples, php, perl :)%0a---%0a> %0a> %0a> %0a> %25trail%25 '''Categories:''' [[!ComputerStuff]]%0a> %0a> %25tags%25 '''Tags:''' (:tags php, http, coding examples, source code, web development:)%0a
host:1334008032=127.0.0.1
author:1311700506=tamara
diff:1311700506:1311700451:=52c52%0a%3c -> The basic idea behind the cURL functions is that you initialize a cURL session using the curl_init(), then you can set all your options for the transfer via the curl_setopt(), then you can execute the session with the curl_exec() and then you finish off your session using the curl_close().%0a---%0a> -> Once you've compiled PHP with cURL support, you can begin using the cURL functions. The basic idea behind the cURL functions is that you initialize a cURL session using the curl_init(), then you can set all your options for the transfer via the curl_setopt(), then you can execute the session with the curl_exec() and then you finish off your session using the curl_close().%0a
host:1311700506=71.63.211.0
author:1311700451=tamara
diff:1311700451:1311699877:=9,12c9,10%0a%3c !! HTTP.php%0a%3c %0a%3c !!!Installation%0a%3c %0a---%0a> !!Installation%0a> %0a19,20c17,18%0a%3c !!!Using HTTP.php%0a%3c %0a---%0a> !!Using HTTP.php%0a> %0a45,54d42%0a%3c %0a%3c !! CURL %0a%3c %0a%3c [[http://us2.php.net/manual/en/book.curl.php|CURL]] is a library that handles fetching of web items that is built in to PHP. It has many many options and can also be used to fetch just the head of the page. It's not quite as convenient as using the HTTP.php pear extension, but if you can't use that, CURL is still available.%0a%3c %0a%3c From the basic curl example page on php.net:%0a%3c %0a%3c -> Once you've compiled PHP with cURL support, you can begin using the cURL functions. The basic idea behind the cURL functions is that you initialize a cURL session using the curl_init(), then you can set all your options for the transfer via the curl_setopt(), then you can execute the session with the curl_exec() and then you finish off your session using the curl_close().%0a%3c %0a%3c The option we're most interested in here is the @@CURLOPT_HEADER@@ option, which should be set to 1 to retrieve the header.%0a
host:1311700451=71.63.211.0
author:1311699877=tamara
csum:1311699877=change tags
diff:1311699877:1288657076:minor=6c6,7%0a%3c %0a---%0a> '''Tags:''' (:tags php, http, code examples, source code, web development:)%0a> %0a47,49c48%0a%3c %25trail%25 '''Categories:''' [[!ComputerStuff]]%0a%3c %0a%3c %25tags%25 '''Tags:''' (:tags php, http, coding examples, source code, web development:)%0a---%0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1311699877=71.63.211.0
author:1288657076=tamara
diff:1288657076:1288657076:=1,48d0%0a%3c (:Summary:retrieving just the header from a web page:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>%0a%3c %0a%3c '''Tags:''' (:tags php, http, code examples, source code, web development:)%0a%3c %0a%3c Sometimes, all you want to retrieve is just the headers from a web page. Normally, PHP retrieves the web page contents with functions such as @@[[http://us.php.net/manual/en/function.file-get-contents.php|file_get_contents()]]@@ or using the @@[[http://us.php.net/manual/en/book.curl.php|curl]]@@ extension. An extension, known as @@HTTP.php@@ is available via [[Pear]] which provides a method for retrieving just the headers.%0a%3c %0a%3c !!Installation%0a%3c %0a%3c First, you need to install the @@HTTP.php@@ module. This is done with the [[Pear]] utility:%0a%3c %0a%3c (:source lang=bash:)%0a%3c $ sudo pear install HTTP.php%0a%3c (:sourceend:)%0a%3c %0a%3c !!Using HTTP.php%0a%3c %0a%3c Once that is installed, you need to include it in your script:%0a%3c (:source lang=php:)%0a%3c require_once('HTTP.php');%0a%3c (:sourceend:)%0a%3c %0a%3c Then, you can call the @@head@@ method with the URL you are seeking information from:%0a%3c (:source lang=php:)%0a%3c $headers = HTTP::head($uri);%0a%3c (:sourceend:)%0a%3c %0a%3c You can check if there are valid headers by checking to see what type of object @@$headers@@ is:%0a%3c (:source lang=php tabwidth=2:)%0a%3c 	if (get_class($headers) == 'PEAR_Error') {%0a%3c 		$errors[] = "Invalid URI.";%0a%3c 		return NULL;%0a%3c 	}%0a%3c (:sourceend:)%0a%3c %0a%3c From then on, you can discover more about the headers that got returned with the call.%0a%3c (:source lang=php :)%0a%3c if ($headers['response_code'] >= 400) {%0a%3c       # process error code%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288657076=71.63.211.0
