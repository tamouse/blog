version=pmwiki-2.2.56 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.102 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=title, typos
ctime=1391002169
host=174.53.192.61
name=Technology.HowToSetPathInCronJobs
rev=5
targets=Technology.HowToSetPathInCronJobs,Technology.Linux,Technology.IncludeMe,Category.HowTos,Category.Technology,Category.Linux,Technology.Ruby,Technology.Rbenv,Technology.Rvm,Technology.Chruby
text=>>comment%3c%3c%0aSummary: The unix command cron(1) runs in a different environment than your login environment. Here is how to get it back.%0a(:title How To: Set the PATH in a cron job:)%0aParent: (Technology.)Linux%0aIncludeMe: [[(Technology.)Linux]]%0aCategories: [[!HowTos]], [[!Technology]], [[!Linux]]%0aTags: linux, environment, cron, crontab%0a(:tags-hide linux, environment, cron, crontab:)%0aSource: %0aPosted: Wed Jan 29 06:58:01 2014%0a>>%3c%3c%0a%0a[[#excerpt]]%0aGetting some jobs to run under [@cron(1)@] can be confusing and difficult since [@cron@] executes tasks in the [@crontab((5)@] file with a different underlying environment than a user normally runs in. What works from you login shell command line often won't from a [@cron@] job. Here is how to get it back.%0a[[#excerptend]]%0a%0a!! What determines cron's environment?%0a%0aBy default, [@cron@] runs with the barest environment. You can discover this by running the following in your [@crontab@]:%0a%0a    * * * * * (/usr/bin/date ; /usr/bin/env | /usr/bin/sort) >> /tmp/my_cron_env 2>&1%0a%0aThis will run the task every minute, with [@stdout@] and [@stderr@] sent to the file. You should make sure to remove or comment out this line after a minute or so or you'll build up quite a long file.%0a%0a-> ''If you have a local email system running, you can leave off the output redirection and the output from the cron task will be emailed to your local user instead. I sort of prefer the append-to-file approach, but the email is interesting as well.''%0a%0a-> ''Note also the command stream is wrapped in parens -- this executes them as a subshell, and collects all the output from the subshell to add to the file.''%0a%0a%0a!! Changing the environment in the crontab%0a%0aIt is rather easy to change some things in the [@crontab@] file. You can set environment variables as you would for the standard unix shell [@/bin/sh@]:%0a%0a(:source lang=bash :)%0aSHELL=/bin/bash%0aPATH=/usr/local/bin:/usr/bin/:bin%0a(:sourceend:)%0a%0aCron will not interpret the typical environment variables while setting environment variables like this. Thus you need to use absolute paths and such when executing command and setting environment variables.%0a%0a!! Changing the environment in a cron task%0a%0aThis seems to be a common way amongst the [[ruby]] community because of strange things like ruby environment managers such as [[rbenv]], [[rvm]], [[chruby]] and the like. On a server, things might be a little different, but this method seems to work well.%0a%0aThe gist of it is run your usual login shell in a login environment. Add the following to your [@crontab@] to see what happens:%0a%0a    * * * * * /bin/bash -l -c 'date ; env | sort' >>/tmp/my_cron_bash_env 2>&1%0a%0aBasically, everything inside the argument to the [@-c@] parameter will run inside your login environment. Under [@bash@] this will execute [@/etc/profile@], the contents of [@/etc/profile.d/@], and [@.bash_profile@] or [@.profile@] depending which it finds first. This should give you everything you normally have when you log in, and things should work just the same.%0a%0a
time=1391002301
title=How To: Set the PATH in a cron job
author:1391002301=tamara
csum:1391002301=title, typos
diff:1391002301:1391002274:=2c2%0a%3c Summary: The unix command cron(1) runs in a different environment than your login environment. Here is how to get it back.%0a---%0a> Summary: The unix command cron(1) runs in a different environment than you login environment. Here is how to get it back.%0a
host:1391002301=174.53.192.61
author:1391002274=tamara
diff:1391002274:1391002252:=3c3%0a%3c (:title How To: Set the PATH in a cron job:)%0a---%0a> (:title How To: Set the PATH in a [@cron@] job:)%0a
host:1391002274=174.53.192.61
author:1391002252=tamara
diff:1391002252:1391002246:=
host:1391002252=174.53.192.61
author:1391002246=tamara
diff:1391002246:1391002169:=3d2%0a%3c (:title How To: Set the PATH in a [@cron@] job:)%0a
host:1391002246=174.53.192.61
author:1391002169=tamara
csum:1391002169=new page
diff:1391002169:1391002169:=1,49d0%0a%3c >>comment%3c%3c%0a%3c Summary: The unix command cron(1) runs in a different environment than you login environment. Here is how to get it back.%0a%3c Parent: (Technology.)Linux%0a%3c IncludeMe: [[(Technology.)Linux]]%0a%3c Categories: [[!HowTos]], [[!Technology]], [[!Linux]]%0a%3c Tags: linux, environment, cron, crontab%0a%3c (:tags-hide linux, environment, cron, crontab:)%0a%3c Source: %0a%3c Posted: Wed Jan 29 06:58:01 2014%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c Getting some jobs to run under [@cron(1)@] can be confusing and difficult since [@cron@] executes tasks in the [@crontab((5)@] file with a different underlying environment than a user normally runs in. What works from you login shell command line often won't from a [@cron@] job. Here is how to get it back.%0a%3c [[#excerptend]]%0a%3c %0a%3c !! What determines cron's environment?%0a%3c %0a%3c By default, [@cron@] runs with the barest environment. You can discover this by running the following in your [@crontab@]:%0a%3c %0a%3c     * * * * * (/usr/bin/date ; /usr/bin/env | /usr/bin/sort) >> /tmp/my_cron_env 2>&1%0a%3c %0a%3c This will run the task every minute, with [@stdout@] and [@stderr@] sent to the file. You should make sure to remove or comment out this line after a minute or so or you'll build up quite a long file.%0a%3c %0a%3c -> ''If you have a local email system running, you can leave off the output redirection and the output from the cron task will be emailed to your local user instead. I sort of prefer the append-to-file approach, but the email is interesting as well.''%0a%3c %0a%3c -> ''Note also the command stream is wrapped in parens -- this executes them as a subshell, and collects all the output from the subshell to add to the file.''%0a%3c %0a%3c %0a%3c !! Changing the environment in the crontab%0a%3c %0a%3c It is rather easy to change some things in the [@crontab@] file. You can set environment variables as you would for the standard unix shell [@/bin/sh@]:%0a%3c %0a%3c (:source lang=bash :)%0a%3c SHELL=/bin/bash%0a%3c PATH=/usr/local/bin:/usr/bin/:bin%0a%3c (:sourceend:)%0a%3c %0a%3c Cron will not interpret the typical environment variables while setting environment variables like this. Thus you need to use absolute paths and such when executing command and setting environment variables.%0a%3c %0a%3c !! Changing the environment in a cron task%0a%3c %0a%3c This seems to be a common way amongst the [[ruby]] community because of strange things like ruby environment managers such as [[rbenv]], [[rvm]], [[chruby]] and the like. On a server, things might be a little different, but this method seems to work well.%0a%3c %0a%3c The gist of it is run your usual login shell in a login environment. Add the following to your [@crontab@] to see what happens:%0a%3c %0a%3c     * * * * * /bin/bash -l -c 'date ; env | sort' >>/tmp/my_cron_bash_env 2>&1%0a%3c %0a%3c Basically, everything inside the argument to the [@-c@] parameter will run inside your login environment. Under [@bash@] this will execute [@/etc/profile@], the contents of [@/etc/profile.d/@], and [@.bash_profile@] or [@.profile@] depending which it finds first. This should give you everything you normally have when you log in, and things should work just the same.%0a%3c %0a
host:1391002169=174.53.192.61
