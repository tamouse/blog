version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
author=ImportText
charset=ISO-8859-1
csum=perl switch constructs
ctime=1288654151
host=127.0.0.1
name=Technology.ToSwitchOrNotToSwitch
rev=3
targets=Technology.ToSwitchOrNotToSwitch
text=[[#excerpt]]%0aWhen it comes to choosing when to use the @@[[http://us.php.net/manual/en/control-structures.switch.php|switch]]@@ control structure, vs. a chain of @@if-elseif-else@@ statements, there are many opinions. Many find chains of @@if-elseif-else@@ statements to be crude and ugly. That said, sometimes there is no alternative. Fortunately, in PHP and Perl, there usually are alternative. The @@switch@@ control structure is remarkably flexible in what it can do.%0a[[#excerptend]]%0a%0a%0a!!Let's compare%0a%0aA typical cascading @@if-elseif-else@@ structure:%0a%0a(:source lang=php linenum:)%0aif ($result == 'image/jpeg') {%0a    $ext = 'jpg';%0a} elseif ($result == "image/gif") {%0a    $ext = "gif";%0a} elseif ($result == "image/png") {%0a    $ext = "png";%0a} else {%0a    $ext = "dat";%0a}%0a(:sourceend:)%0a%0aWhereas, if we were to use a @@switch@@ statement, we'd get:%0a%0a(:source lang=php linenum tabwidth=2:)%0a	switch ($result) {%0a		case 'image/jpeg': $ext = "jpg"; break;%0a		case 'image/gif': $ext = "gif"; break;			%0a		case 'image/png': $ext = "png"; break;			%0a		default: $ext = "dat"; break;%0a	}%0a(:sourceend:)%0a%0aWhich seems more elegant and readable to you? I tend to vote for the @@switch@@ implementation over the cascading @@if-elseif-else@@ structure.%0a%0a!!Another alternative%0a%0aWhile the above example shows the difference plainly between @@if-elseif-else@@ and @@switch@@ statements, there is actually a better alternative in this case: a lookup table.%0a%0aSomewhere in your source, create a lookup table:%0a(:source lang=php linenum:)%0a$mapmimetoextension = (%0a    'image/jpeg' => 'jpg',%0a    'image/gif' => 'gif',%0a    'image/png' => 'png',%0a    # ... and so on%0a);%0a(:sourceend:)%0a%0aThen, to determine the extension given the mimetype, you could simply do:%0a(:source lang=php linenum:)%0a$ext = isset($mapmimetoextension[$mimetype] ? $mapmimetoextension[$mimetype] : 'dat';%0a(:sourceend:)%0a%0aWhich seems a lot cheaper than either the cascading @@if-elseif-else@@ or the @@switch@@. Given the desire to keep code modular, it would also likely save on a procedure call.%0a%0aThat's fine for PHP, what about Perl?%0a%0a!!Perl Switch Constructs%0a%0aUnlike some other programming languages, Perl has no official switch or case statement. That's because Perl doesn't need one, having many ways to do the same thing. A bare block is particularly convenient for doing case structures (multiway switches). Here's one:%0a%0a(:source lang=perl linenum:)%0aSWITCH: {%0a    if (/^abc/) { $abc = 1; last SWITCH; }%0a    if (/^def/) { $def = 1; last SWITCH; }%0a    if (/^xyz/) { $xyz = 1; last SWITCH; }%0a    $nothing = 1;%0a}%0a(:sourceend:)%0a%0aand here's another:%0a%0a(:source lang=perl linenum:)%0aSWITCH: {%0a    /^abc/      && do { $abc = 1; last SWITCH; };%0a    /^def/      && do { $def = 1; last SWITCH; };%0a    /^xyz/      && do { $xyz = 1; last SWITCH; };%0a    $nothing = 1;%0a}%0a(:sourceend:)%0a%0aBoth of these constructs operate on matching the @@$_@@ variable. I prefer the second form (no nasty if's going on there. Note that the both forms can be much more convoluted there. There is no need to necessarily restrict one's self to making comparisons with the @@$_@@ variable. Basically ''any'' test can be made in the case portion of the switch construct. %0a%0aWhat makes this work is the @@last SWITCH;@@ statement. It basically quits the switch when it is executed.%0a%0a%0a(:Summary:discussion on when to use the switch control structure and alternatives:)%0a(:Parent:(Technology.)Development:)%0a(:IncludeMe:[[(Technology.)Development]]:)%0a(:Categories:[[!Articles]]:)%0a(:Tags: programming techniques, switch statement:)%0a(:tags-hide programming techniques, switch statement :)%0a
time=1334714369
author:1334714369=ImportText
diff:1334714369:1288667216:=1,5c1,9%0a%3c [[#excerpt]]%0a%3c When it comes to choosing when to use the @@[[http://us.php.net/manual/en/control-structures.switch.php|switch]]@@ control structure, vs. a chain of @@if-elseif-else@@ statements, there are many opinions. Many find chains of @@if-elseif-else@@ statements to be crude and ugly. That said, sometimes there is no alternative. Fortunately, in PHP and Perl, there usually are alternative. The @@switch@@ control structure is remarkably flexible in what it can do.%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a---%0a> (:Summary:discussion on when to use the switch control structure and alternatives:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a> '''Tags:''' (:tags php, perl, coding examples, source code, control structures, web development, making choices:)%0a> %0a> When it comes to choosing when to use the @@[[http://us.php.net/manual/en/control-structures.switch.php|switch]]@@ control structure, vs. a chain of @@if-elseif-else@@ statements, there are many opinions. Many find chains of @@if-elseif-else@@ statements to be crude and ugly. That said, sometimes there is no alternative. Fortunately, in PHP, there usually is an alternative. The @@switch@@ control structure is remarkably flexible in what it can do.%0a> %0a87,92c91%0a%3c (:Summary:discussion on when to use the switch control structure and alternatives:)%0a%3c (:Parent:(Technology.)Development:)%0a%3c (:IncludeMe:[[(Technology.)Development]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: programming techniques, switch statement:)%0a%3c (:tags-hide programming techniques, switch statement :)%0a---%0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1334714369=127.0.0.1
author:1288667216=tamara
csum:1288667216=perl switch constructs
diff:1288667216:1288654151:=6,7c6,7%0a%3c '''Tags:''' (:tags php, perl, coding examples, source code, control structures, web development, making choices:)%0a%3c %0a---%0a> '''Tags:''' (:tags php, coding examples, source code, control structures, web development, making choices:)%0a> %0a60,88c60%0a%3c That's fine for PHP, what about Perl?%0a%3c %0a%3c !!Perl Switch Constructs%0a%3c %0a%3c Unlike some other programming languages, Perl has no official switch or case statement. That's because Perl doesn't need one, having many ways to do the same thing. A bare block is particularly convenient for doing case structures (multiway switches). Here's one:%0a%3c %0a%3c (:source lang=perl linenum:)%0a%3c SWITCH: {%0a%3c     if (/^abc/) { $abc = 1; last SWITCH; }%0a%3c     if (/^def/) { $def = 1; last SWITCH; }%0a%3c     if (/^xyz/) { $xyz = 1; last SWITCH; }%0a%3c     $nothing = 1;%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c and here's another:%0a%3c %0a%3c (:source lang=perl linenum:)%0a%3c SWITCH: {%0a%3c     /^abc/      && do { $abc = 1; last SWITCH; };%0a%3c     /^def/      && do { $def = 1; last SWITCH; };%0a%3c     /^xyz/      && do { $xyz = 1; last SWITCH; };%0a%3c     $nothing = 1;%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c Both of these constructs operate on matching the @@$_@@ variable. I prefer the second form (no nasty if's going on there. Note that the both forms can be much more convoluted there. There is no need to necessarily restrict one's self to making comparisons with the @@$_@@ variable. Basically ''any'' test can be made in the case portion of the switch construct. %0a%3c %0a%3c What makes this work is the @@last SWITCH;@@ statement. It basically quits the switch when it is executed.%0a---%0a> %0a
host:1288667216=71.63.211.0
author:1288654151=tamara
diff:1288654151:1288654151:=1,63d0%0a%3c (:Summary:discussion on when to use the switch control structure and alternatives:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c '''Tags:''' (:tags php, coding examples, source code, control structures, web development, making choices:)%0a%3c %0a%3c When it comes to choosing when to use the @@[[http://us.php.net/manual/en/control-structures.switch.php|switch]]@@ control structure, vs. a chain of @@if-elseif-else@@ statements, there are many opinions. Many find chains of @@if-elseif-else@@ statements to be crude and ugly. That said, sometimes there is no alternative. Fortunately, in PHP, there usually is an alternative. The @@switch@@ control structure is remarkably flexible in what it can do.%0a%3c %0a%3c !!Let's compare%0a%3c %0a%3c A typical cascading @@if-elseif-else@@ structure:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c if ($result == 'image/jpeg') {%0a%3c     $ext = 'jpg';%0a%3c } elseif ($result == "image/gif") {%0a%3c     $ext = "gif";%0a%3c } elseif ($result == "image/png") {%0a%3c     $ext = "png";%0a%3c } else {%0a%3c     $ext = "dat";%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c Whereas, if we were to use a @@switch@@ statement, we'd get:%0a%3c %0a%3c (:source lang=php linenum tabwidth=2:)%0a%3c 	switch ($result) {%0a%3c 		case 'image/jpeg': $ext = "jpg"; break;%0a%3c 		case 'image/gif': $ext = "gif"; break;			%0a%3c 		case 'image/png': $ext = "png"; break;			%0a%3c 		default: $ext = "dat"; break;%0a%3c 	}%0a%3c (:sourceend:)%0a%3c %0a%3c Which seems more elegant and readable to you? I tend to vote for the @@switch@@ implementation over the cascading @@if-elseif-else@@ structure.%0a%3c %0a%3c !!Another alternative%0a%3c %0a%3c While the above example shows the difference plainly between @@if-elseif-else@@ and @@switch@@ statements, there is actually a better alternative in this case: a lookup table.%0a%3c %0a%3c Somewhere in your source, create a lookup table:%0a%3c (:source lang=php linenum:)%0a%3c $mapmimetoextension = (%0a%3c     'image/jpeg' => 'jpg',%0a%3c     'image/gif' => 'gif',%0a%3c     'image/png' => 'png',%0a%3c     # ... and so on%0a%3c );%0a%3c (:sourceend:)%0a%3c %0a%3c Then, to determine the extension given the mimetype, you could simply do:%0a%3c (:source lang=php linenum:)%0a%3c $ext = isset($mapmimetoextension[$mimetype] ? $mapmimetoextension[$mimetype] : 'dat';%0a%3c (:sourceend:)%0a%3c %0a%3c Which seems a lot cheaper than either the cascading @@if-elseif-else@@ or the @@switch@@. Given the desire to keep code modular, it would also likely save on a procedure call.%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288654151=71.63.211.0
