version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
author=ImportText
charset=ISO-8859-1
csum=Additional commentary, add an example of writing your own classes
ctime=1288646786
host=127.0.0.1
name=Technology.UseObjectOrientedMethodsInPHP
rev=3
targets=Technology.UseObjectOrientedMethodsInPHP,Technology.Glossary,Technology.PHP,RonR.RubyOnRails,Technology.JavaScript,Tags.Debugging,Technology.Reuse
text=[[#excerpt]]%0a[[Glossary#OOP|OOP]] is the way to go for writing clean, expressive code. Several languages support OOP concepts, including [[PHP]], [[(RonR.)RubyOnRails]], [[JavaScript]] and of course, old stand-bies like C++ and Java.%0a[[#excerptend]]%0a%0a!!Some examples of good use of OOP%0a%0aIn [[PHP]] the mysqli functions for database access are expressed in an object-oriented way (they also have a procedural interface if you do choose to go that way).%0a%0aSetting it up is as easy as:%0a%0a(:source lang=php linenum:)%0a$db = new mysqli(DBHOST, DBUSER, DBPASS, DBNAME);%0a(:sourceend:)%0a%0aAnd ''voila!'' -- you've got a database connection and handle that can be used to interact with the database.%0a%0aIn addition, mysqli defines a result object and a statement object that give good handles on using the interface.%0a%0a(:source lang=php linenum:)%0a$result = $db->query($sql_stmt);%0aif (!$result) handle_error($db->error);%0a%0a$rows = Array();%0awhile ($row = $result->fetch_assoc()) {%0a    $rows[]=$row;%0a}%0a$result->free();%0a(:sourceend:)%0a%0aNow you got a sequential array of the associative array corresponding to each row in the query%0a%0a!! Writing your own classes%0a%0aThe documentation at http://php.net is not too bad for how to write the syntax for classes and using them as objects, but it doesn't say anything about when to do this. In general, the deciding factor for going procedural vs. OO is somewhat arbitrary. If you have to associate data with certain functions, or if you want to keep certain areas of your application separate from other areas, OO is the way to go.%0a%0aIn general, the way of writing a class is to declare the class, create a constructor, and write all the public and private functions and variables for the class. Elsewhere, I talk about [[Tags.Debugging|debugging]] in PHP. Here is an example of class that can be used to handle the debugging functions:%0a%0a(:source lang=php linenum tabwidth=4:)%0aclass MyClass {%0a  function __construct () {%0a  }%0a}%0a(:sourceend:)%0a%0aTo instatiate this object, first you include it, then create a debugging object:%0a%0a(:source lang=php linenum tabwidth=4:)%0ainclude('MyClass.php');%0a%0a$objext = new MyClass();%0a(:sourcend:)%0a%0aThere are probably many, many application features that can be better encapsulated in a class, and thus preparing the way for more [[Technology.Reuse|reuse of code]]. %0a%0a(:Summary:OOP is the way to write elegant, simple code:)%0a(:Parent:(Technology.)Development:)%0a(:IncludeMe:[[(Technology.)Development]]:)%0a(:Categories:[[!Articles]]:)%0a(:Tags: oop, oo design, oo development:)%0a(:tags-hide oop, oo design, oo development :)%0a
time=1334714369
author:1334714369=ImportText
diff:1334714369:1308853970:=1c1,6%0a%3c [[#excerpt]]%0a---%0a> (:Summary:OOP is the way to write elegant, simple code:)%0a> [[%3c%3c]]%0a> %0a> %25trail%25 %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a3,6c8,10%0a%3c [[#excerptend]]%0a%3c %0a%3c !!Some examples of good use of OOP%0a%3c %0a---%0a> %0a> !!!Some examples of good use of OOP%0a> %0a39,42c43%0a%3c class MyClass {%0a%3c   function __construct () {%0a%3c   }%0a%3c }%0a---%0a> /* to be written */%0a48,50c49,51%0a%3c include('MyClass.php');%0a%3c %0a%3c $objext = new MyClass();%0a---%0a> include('class.Debug.php');%0a> %0a> $dbg = new Debug(TRUE);%0a53,60c54,73%0a%3c There are probably many, many application features that can be better encapsulated in a class, and thus preparing the way for more [[Technology.Reuse|reuse of code]]. %0a%3c %0a%3c (:Summary:OOP is the way to write elegant, simple code:)%0a%3c (:Parent:(Technology.)Development:)%0a%3c (:IncludeMe:[[(Technology.)Development]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: oop, oo design, oo development:)%0a%3c (:tags-hide oop, oo design, oo development :)%0a---%0a> The option passed to the Debug constructor, in this case @@TRUE@@, is used to initialize the state of the @@$dbg@@ object. In the implementation above, there are other parameters that may be passed as well.%0a> %0a> To use the @@$dbg@@ object, simply call one of it's methods:%0a> %0a> (:source lang=php tabwidth=4:)%0a> $dbg->print('Error message to be displayed",$variable,__FILE__,__LINE__);%0a> (:sourceend:)%0a> %0a> This shows typical usage:%0a> * an error message%0a> * an (optional) variable to dump%0a> * the current file%0a> * the current line%0a> %0a> There are probably many, many application features that can be better encapsulated in a class, and thus preparing the way for more [[Tags.Reuse|reuse of code]]. %0a> %0a> %25categories%25 '''Categories:''' [[!ComputerStuff]]%0a> %0a> %25tags%25 '''Tags:''' (:tags oop, php, ruby, jquery, best practices, web development:)%0a> %0a
host:1334714369=127.0.0.1
author:1308853970=tamara
csum:1308853970=Additional commentary, add an example of writing your own classes
diff:1308853970:1288646786:=3,4c3%0a%3c %0a%3c %25trail%25 %3c%3c|SoftwareAndWebProgramming|>>\\%0a---%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a6a6,7%0a> '''Tags:''' (:tags php, ruby, jquery, best practices, web development:)%0a> %0a36,73c37%0a%3c !! Writing your own classes%0a%3c %0a%3c The documentation at http://php.net is not too bad for how to write the syntax for classes and using them as objects, but it doesn't say anything about when to do this. In general, the deciding factor for going procedural vs. OO is somewhat arbitrary. If you have to associate data with certain functions, or if you want to keep certain areas of your application separate from other areas, OO is the way to go.%0a%3c %0a%3c In general, the way of writing a class is to declare the class, create a constructor, and write all the public and private functions and variables for the class. Elsewhere, I talk about [[Tags.Debugging|debugging]] in PHP. Here is an example of class that can be used to handle the debugging functions:%0a%3c %0a%3c (:source lang=php linenum tabwidth=4:)%0a%3c /* to be written */%0a%3c (:sourceend:)%0a%3c %0a%3c To instatiate this object, first you include it, then create a debugging object:%0a%3c %0a%3c (:source lang=php linenum tabwidth=4:)%0a%3c include('class.Debug.php');%0a%3c %0a%3c $dbg = new Debug(TRUE);%0a%3c (:sourcend:)%0a%3c %0a%3c The option passed to the Debug constructor, in this case @@TRUE@@, is used to initialize the state of the @@$dbg@@ object. In the implementation above, there are other parameters that may be passed as well.%0a%3c %0a%3c To use the @@$dbg@@ object, simply call one of it's methods:%0a%3c %0a%3c (:source lang=php tabwidth=4:)%0a%3c $dbg->print('Error message to be displayed",$variable,__FILE__,__LINE__);%0a%3c (:sourceend:)%0a%3c %0a%3c This shows typical usage:%0a%3c * an error message%0a%3c * an (optional) variable to dump%0a%3c * the current file%0a%3c * the current line%0a%3c %0a%3c There are probably many, many application features that can be better encapsulated in a class, and thus preparing the way for more [[Tags.Reuse|reuse of code]]. %0a%3c %0a%3c %25categories%25 '''Categories:''' [[!ComputerStuff]]%0a%3c %0a%3c %25tags%25 '''Tags:''' (:tags oop, php, ruby, jquery, best practices, web development:)%0a%3c %0a---%0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1308853970=71.63.211.0
author:1288646786=tamara
diff:1288646786:1288646786:=1,37d0%0a%3c (:Summary:OOP is the way to write elegant, simple code:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c '''Tags:''' (:tags php, ruby, jquery, best practices, web development:)%0a%3c %0a%3c [[Glossary#OOP|OOP]] is the way to go for writing clean, expressive code. Several languages support OOP concepts, including [[PHP]], [[(RonR.)RubyOnRails]], [[JavaScript]] and of course, old stand-bies like C++ and Java.%0a%3c %0a%3c !!!Some examples of good use of OOP%0a%3c %0a%3c In [[PHP]] the mysqli functions for database access are expressed in an object-oriented way (they also have a procedural interface if you do choose to go that way).%0a%3c %0a%3c Setting it up is as easy as:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $db = new mysqli(DBHOST, DBUSER, DBPASS, DBNAME);%0a%3c (:sourceend:)%0a%3c %0a%3c And ''voila!'' -- you've got a database connection and handle that can be used to interact with the database.%0a%3c %0a%3c In addition, mysqli defines a result object and a statement object that give good handles on using the interface.%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $result = $db->query($sql_stmt);%0a%3c if (!$result) handle_error($db->error);%0a%3c %0a%3c $rows = Array();%0a%3c while ($row = $result->fetch_assoc()) {%0a%3c     $rows[]=$row;%0a%3c }%0a%3c $result->free();%0a%3c (:sourceend:)%0a%3c %0a%3c Now you got a sequential array of the associative array corresponding to each row in the query%0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288646786=71.63.211.0
