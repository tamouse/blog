version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4
author=tamara
charset=ISO-8859-1
csum=add include tags
ctime=1275203011
host=75.144.38.217
name=Technology.GeneratingCSSWithStylish
rev=9
targets=Technology.GeneratingCSSWithStylish
text=[[#excerpt]]%0a[[https://github.com/beastaugh/stylish | Stylish]] is a ruby gem that is used to generate CSS. It can be used to generate repetitive sequences, can do variable substitution easily, and gives compact CSS code.%0a[[#excerptend]]%0a%0a!! Why use a generative tool for CSS?%0a%0aExcerpt from Stylish's [[README -> https://github.com/beastaugh/stylish/blob/master/README.md]] doc:%0a%0a>>quote%3c%3c%0a!!!Design notes%0aCSS is a remarkably succinct and powerful language, with several marked deficiencies. It lacks both variables and iteration, and its long-winded property names are often irritating. Stylish attempts to address these issues by reducing duplication, providing a cleaner namespacing syntax and reducing transcription errors. It is not intended as a replacement for hand-authored CSS, but as a supplement to it.%0a%0aStylish treats CSS as object code--but it treats it nicely.%0a>>%3c%3c%0a%0a%0aHere's an example:%0a%0a(:source lang=ruby linenum:)%0a#!/usr/bin/ruby%0arequire 'rubygems'%0arequire 'stylish'%0a%0astyle = Stylish.generate do%0a  body :background => {:color => "#FAFAFA"}, :font_size => "1em", :font_family => "Arial, sans-serif"%0a  rule "#content",%0a  :background => {:color => "#000000"},%0a  :width => "80%25",%0a  :margin => "10px auto",%0a  :padding => "5px",%0a  :border_radius => "15px"%0a  rule "#content" do%0a    p :margin => "3px 0", :padding => "0px"%0a    a :color => "blue"%0a    rule "a:visited" , :color => "purple"%0a    rule "a:active" , :color => "red"%0a    rule "a:hover" , :text_decoration => "none", :font_style => "italic"%0a  end%0aend%0a%0aputs style;%0a(:sourceend:)%0a%0aand it generates the following, very compact CSS:%0a%0a(:source lang=css -getcode:)%0abody {font-size:1em; font-family:Arial, sans-serif; background-color:#fafafa;}%0a#content {padding:5px; border-radius:15px; width:80%25; background-color:#000; margin:10px auto;}%0a#content p {padding:0px; margin:3px 0;}%0a#content a {color:blue;}%0a#content a:visited {color:purple;}%0a#content a:active {color:red;}%0a#content a:hover {text-decoration:none; font-style:italic;}%0a(:sourceend:)%0a%0aOutput formatting can be tailored to produce something more readable/maintainable. (However, why would you maintain the output when you can maintain the source?)%0a%0a!! This doesn't look all that complicated, again, Why use a generative tool?%0a%0aSimply put, programmatic generation of artifacts makes them easier to automatically test (using [[rspec -> http://rspec.info]] for example). It also allows the designers to specify palettes, sizes, and other layout and UI features that can be dropped into the code more easily, letting you change them in one place.%0a%0a[[#example2]]%0a!!! Store the palette config in a YAML file%0a%0a(:source lang=yaml linenum header="palette.yaml":)%0a---%0apage:%0a  text: ! '#000'%0a  bg: ! '#FAFAFA'%0acontent:%0a  text: ! '#FFF'%0a  bg: ! '#000'%0a  links:%0a    unvisited: blue%0a    visited: purple%0a    active: red%0a(:sourceend:)%0a%0aThe palette.yaml file can be used wherever you want to generate a style file, and is separate from the actual logic.%0a%0a!!! Use the palette YAML file in your code:%0a%0a(:source lang=ruby linenum tabwidth=4 header="mystyles.rb":)%0arequire 'rubygems'%0arequire 'stylish'%0arequire 'psych'%0a%0apalette = Psych::load_file("palette.yaml")%0a%0astyle = Stylish.generate do%0a  body :color => palette['page']['text'], :background => {:color => palette['page']['bg']}, :font_size => "1em", :font_family => "Arial, sans-serif"%0a  rule "#content",%0a  :color => palette['content']['text'],%0a  :background => {:color => palette['content']['bg']},%0a  :width => "80%25",%0a  :margin => "10px auto",%0a  :padding => "5px",%0a  :border_radius => "15px"%0a  rule "#content" do%0a    p :margin => "3px 0", :padding => "0px"%0a    a :color => palette['content']['links']['unvisited']%0a    rule "a:visited" , :color => palette['content']['links']['visited']%0a    rule "a:active" , :color => palette['content']['links']['active']%0a    rule "a:hover" , :text_decoration => "none", :font_style => "italic"%0a  end%0aend%0a%0aputs style;%0a(:sourceend:)%0a%0aAnd the output from the above is:%0a%0a(:source lang=css linenum header="css emitted from mystyles.rb":)%0abody {color:#000; background-color:#fafafa; font-size:1em; font-family:Arial, sans-serif;}%0a#content {color:#fff; background-color:#000; width:80%25; margin:10px auto; padding:5px; border-radius:15px;}%0a#content p {margin:3px 0; padding:0px;}%0a#content a {color:blue;}%0a#content a:visited {color:purple;}%0a#content a:active {color:red;}%0a#content a:hover {text-decoration:none; font-style:italic;}%0a(:sourceend:)%0a[[#example2end]]%0a%0a... in this case, the same as the first example.%0a%0aWhile with this simple example and the benefit may not be that obvious, when there are more complex issues, such as using the same palette across web sites, or in different style files, or, for example, in html emails generated by a site, the reuse of a simple, central palette can be most helpful.%0a%0a%0a(:Summary:using a ruby gem to generate CSS:)%0a(:title Generating CSS with Stylish (a Ruby Gem):)%0a(:Parent:(Technology.)CSS:)%0a(:includeme:[[(Technology.)CSS]]:)%0a(:Categories:[[!Articles]], [[!HowTos]]:)%0a(:Tags: ruby, css, styles:)%0a(:tags-hide ruby, css, styles :)
time=1352400000
title=Generating CSS with Stylish (a Ruby Gem)
author:1352400000=tamara
csum:1352400000=add include tags
diff:1352400000:1352395703:=62d61%0a%3c [[#example2]]%0a122d120%0a%3c [[#example2end]]%0a
host:1352400000=75.144.38.217
author:1352395703=tamara
csum:1352395703=extract yaml file for palette
diff:1352395703:1352311403:=5,16d4%0a%3c !! Why use a generative tool for CSS?%0a%3c %0a%3c Excerpt from Stylish's [[README -> https://github.com/beastaugh/stylish/blob/master/README.md]] doc:%0a%3c %0a%3c >>quote%3c%3c%0a%3c !!!Design notes%0a%3c CSS is a remarkably succinct and powerful language, with several marked deficiencies. It lacks both variables and iteration, and its long-winded property names are often irritating. Stylish attempts to address these issues by reducing duplication, providing a cleaner namespacing syntax and reducing transcription errors. It is not intended as a replacement for hand-authored CSS, but as a supplement to it.%0a%3c %0a%3c Stylish treats CSS as object code--but it treats it nicely.%0a%3c >>%3c%3c%0a%3c %0a%3c %0a58,59c46,47%0a%3c !! This doesn't look all that complicated, again, Why use a generative tool?%0a%3c %0a---%0a> !! But why use a generative tool?%0a> %0a62,82c50,51%0a%3c !!! Store the palette config in a YAML file%0a%3c %0a%3c (:source lang=yaml linenum header="palette.yaml":)%0a%3c ---%0a%3c page:%0a%3c   text: ! '#000'%0a%3c   bg: ! '#FAFAFA'%0a%3c content:%0a%3c   text: ! '#FFF'%0a%3c   bg: ! '#000'%0a%3c   links:%0a%3c     unvisited: blue%0a%3c     visited: purple%0a%3c     active: red%0a%3c (:sourceend:)%0a%3c %0a%3c The palette.yaml file can be used wherever you want to generate a style file, and is separate from the actual logic.%0a%3c %0a%3c !!! Use the palette YAML file in your code:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=4 header="mystyles.rb":)%0a---%0a> (:source lang=ruby linenum tabwidth=4 header="a more complete example":)%0a> #!/usr/bin/ruby%0a85,88c54,67%0a%3c require 'psych'%0a%3c %0a%3c palette = Psych::load_file("palette.yaml")%0a%3c %0a---%0a> %0a> # Define palette for use in styles%0a> palette = Hash.new()%0a> palette['page'] = Hash.new()%0a> palette['page']['text'] = '#000'%0a> palette['page']['bg'] = '#FAFAFA'%0a> palette['content'] = Hash.new()%0a> palette['content']['text'] = '#FFF'%0a> palette['content']['bg'] = '#000'%0a> palette['content']['links'] = Hash.new()%0a> palette['content']['links']['unvisited'] = 'blue'%0a> palette['content']['links']['visited'] = 'purple'%0a> palette['content']['links']['active'] = 'red'%0a> %0a107a87%0a> %0a110,126c90,92%0a%3c And the output from the above is:%0a%3c %0a%3c (:source lang=css linenum header="css emitted from mystyles.rb":)%0a%3c body {color:#000; background-color:#fafafa; font-size:1em; font-family:Arial, sans-serif;}%0a%3c #content {color:#fff; background-color:#000; width:80%25; margin:10px auto; padding:5px; border-radius:15px;}%0a%3c #content p {margin:3px 0; padding:0px;}%0a%3c #content a {color:blue;}%0a%3c #content a:visited {color:purple;}%0a%3c #content a:active {color:red;}%0a%3c #content a:hover {text-decoration:none; font-style:italic;}%0a%3c (:sourceend:)%0a%3c %0a%3c ... in this case, the same as the first example.%0a%3c %0a%3c While with this simple example and the benefit may not be that obvious, when there are more complex issues, such as using the same palette across web sites, or in different style files, or, for example, in html emails generated by a site, the reuse of a simple, central palette can be most helpful.%0a%3c %0a%3c %0a---%0a> While with this simple example, the benefit may not be that obvious, when there are more complex issues, such as using the same palette across web sites, or in different style files, or, for example, in html emails generated by a site, the reuse of a simple, central palette can be most helpful.%0a> %0a> %0a133c99%0a%3c (:tags-hide ruby, css, styles :)%0a\ No newline at end of file%0a---%0a> (:tags-hide ruby, css, styles :)%0a
host:1352395703=75.144.38.217
author:1352311403=tamara
csum:1352311403=correct second example code
diff:1352311403:1352310172:=56,57d55%0a%3c palette = Hash.new()%0a%3c palette['page'] = Hash.new()%0a60d57%0a%3c palette['content'] = Hash.new()%0a63d59%0a%3c palette['content']['links'] = Hash.new()%0a67a64,65%0a> %0a> %0a71c69%0a%3c   :color => palette['content']['text'],%0a---%0a>   :color => palette['content']['text']%0a87d84%0a%3c %0a90c87%0a%3c While with this simple example, the benefit may not be that obvious, when there are more complex issues, such as using the same palette across web sites, or in different style files, or, for example, in html emails generated by a site, the reuse of a simple, central palette can be most helpful.%0a---%0a> While with this simple example, the benefit may not be that obvious, but when there are more complex issues, such as using the same palette across web sites, or in different style files, or, for example, in html emails generated by a site, the reuse of a simple, central palette can be most helpful.%0a
host:1352311403=75.144.38.217
author:1352310172=tamara
csum:1352310172=fix extra single quote
diff:1352310172:1352310102:minor=67c67%0a%3c   body :color => palette['page']['text'], :background => {:color => palette['page']['bg']}, :font_size => "1em", :font_family => "Arial, sans-serif"%0a---%0a>   body :color => palette['page']'['text'], :background => {:color => palette['page']['bg']}, :font_size => "1em", :font_family => "Arial, sans-serif"%0a
host:1352310172=75.144.38.217
author:1352310102=tamara
csum:1352310102=add a more complete example with variable substitution
diff:1352310102:1334005354:=46,89c46,47%0a%3c !! But why use a generative tool?%0a%3c %0a%3c Simply put, programmatic generation of artifacts makes them easier to automatically test (using [[rspec -> http://rspec.info]] for example). It also allows the designers to specify palettes, sizes, and other layout and UI features that can be dropped into the code more easily, letting you change them in one place.%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=4 header="a more complete example":)%0a%3c #!/usr/bin/ruby%0a%3c require 'rubygems'%0a%3c require 'stylish'%0a%3c %0a%3c # Define palette for use in styles%0a%3c palette['page']['text'] = '#000'%0a%3c palette['page']['bg'] = '#FAFAFA'%0a%3c palette['content']['text'] = '#FFF'%0a%3c palette['content']['bg'] = '#000'%0a%3c palette['content']['links']['unvisited'] = 'blue'%0a%3c palette['content']['links']['visited'] = 'purple'%0a%3c palette['content']['links']['active'] = 'red'%0a%3c %0a%3c %0a%3c %0a%3c style = Stylish.generate do%0a%3c   body :color => palette['page']'['text'], :background => {:color => palette['page']['bg']}, :font_size => "1em", :font_family => "Arial, sans-serif"%0a%3c   rule "#content",%0a%3c   :color => palette['content']['text']%0a%3c   :background => {:color => palette['content']['bg']},%0a%3c   :width => "80%25",%0a%3c   :margin => "10px auto",%0a%3c   :padding => "5px",%0a%3c   :border_radius => "15px"%0a%3c   rule "#content" do%0a%3c     p :margin => "3px 0", :padding => "0px"%0a%3c     a :color => palette['content']['links']['unvisited']%0a%3c     rule "a:visited" , :color => palette['content']['links']['visited']%0a%3c     rule "a:active" , :color => palette['content']['links']['active']%0a%3c     rule "a:hover" , :text_decoration => "none", :font_style => "italic"%0a%3c   end%0a%3c end%0a%3c %0a%3c puts style;%0a%3c (:sourceend:)%0a%3c %0a%3c While with this simple example, the benefit may not be that obvious, but when there are more complex issues, such as using the same palette across web sites, or in different style files, or, for example, in html emails generated by a site, the reuse of a simple, central palette can be most helpful.%0a%3c %0a%3c %0a---%0a> %0a> %0a93,94c51,52%0a%3c (:includeme:[[(Technology.)CSS]]:)%0a%3c (:Categories:[[!Articles]], [[!HowTos]]:)%0a---%0a> (:IncludeMe:[[(Technology.)CSS]]:)%0a> (:Categories:[[!Articles]]:)%0a
host:1352310102=75.144.38.217
author:1334005354=tamara
csum:1334005354=change parent to CSS
diff:1334005354:1334005224:=50,51c50,51%0a%3c (:Parent:(Technology.)CSS:)%0a%3c (:IncludeMe:[[(Technology.)CSS]]:)%0a---%0a> (:Parent:(Technology.)Ruby:)%0a> (:IncludeMe:[[(Technology.)Ruby]]:)%0a
host:1334005354=127.0.0.1
author:1334005224=tamara
csum:1334005224=update to new version of stylish
diff:1334005224:1333988429:=2c2%0a%3c [[https://github.com/beastaugh/stylish | Stylish]] is a ruby gem that is used to generate CSS. It can be used to generate repetitive sequences, can do variable substitution easily, and gives compact CSS code.%0a---%0a> [[http://ionfish.github.com/stylish/index.html | Stylish]] is a ruby gem that is used to generate CSS. It can be used to generate repetitive sequences, can do variable substitution easily, and gives compact CSS code.%0a8,29c8,34%0a%3c #!/usr/bin/ruby%0a%3c require 'rubygems'%0a%3c require 'stylish'%0a%3c %0a%3c style = Stylish.generate do%0a%3c   body :background => {:color => "#FAFAFA"}, :font_size => "1em", :font_family => "Arial, sans-serif"%0a%3c   rule "#content",%0a%3c   :background => {:color => "#000000"},%0a%3c   :width => "80%25",%0a%3c   :margin => "10px auto",%0a%3c   :padding => "5px",%0a%3c   :border_radius => "15px"%0a%3c   rule "#content" do%0a%3c     p :margin => "3px 0", :padding => "0px"%0a%3c     a :color => "blue"%0a%3c     rule "a:visited" , :color => "purple"%0a%3c     rule "a:active" , :color => "red"%0a%3c     rule "a:hover" , :text_decoration => "none", :font_style => "italic"%0a%3c   end%0a%3c end%0a%3c %0a%3c puts style;%0a---%0a>  require 'rubygems'%0a>  require 'stylish'%0a> %0a>  style = Stylish.generate do%0a> %0a>     body :background => {:color => "#fafafa"}, :font_size => "15px", :font_family => "Arial, sans-serif", :line_height => "18px"%0a>     rule "div.content",%0a>         :background => {:color => "#000"},%0a>         :font_size => "15px",%0a>         :font_family => "Arial, sans-serif",%0a>         :line_height => "18px",%0a>         :margin_left => "100px",%0a>         :margin_right => "100px",%0a>         :margin_top => "10px",%0a>         :margin_bottom => "10px"%0a>     rule "div.content" do%0a>         p :margin => "10px 10px 10px 10px",%0a>             :padding => "5px 5px 5px 5px"%0a>         a :color => "blue"%0a>         rule "a:hover", :color => "red"%0a>         rule "a:active", :color => "red"%0a>         rule "a:visited", :color => "purple"%0a>     end%0a>     %0a>  end%0a> %0a>  style.print('mystyle.css')%0a35,41c40,46%0a%3c body {font-size:1em; font-family:Arial, sans-serif; background-color:#fafafa;}%0a%3c #content {padding:5px; border-radius:15px; width:80%25; background-color:#000; margin:10px auto;}%0a%3c #content p {padding:0px; margin:3px 0;}%0a%3c #content a {color:blue;}%0a%3c #content a:visited {color:purple;}%0a%3c #content a:active {color:red;}%0a%3c #content a:hover {text-decoration:none; font-style:italic;}%0a---%0a> body {font-size:15px; font-family:Arial, sans-serif; line-height:18px; background-color:#fafafa;}%0a> div.content {margin-left:100px; margin-right:100px; font-size:15px; margin-top:10px; font-family:Arial, sans-serif; margin-bottom:10px; line-height:18px; background-color:#000;}%0a> div.content p {margin:10px 10px 10px 10px; padding:5px 5px 5px 5px;}%0a> div.content a {color:blue;}%0a> div.content a:hover {color:red;}%0a> div.content a:active {color:red;}%0a> div.content a:visited {color:purple;}%0a
host:1334005224=127.0.0.1
author:1333988429=tamara
diff:1333988429:1275203011:=1,7c1,5%0a%3c [[#excerpt]]%0a%3c [[http://ionfish.github.com/stylish/index.html | Stylish]] is a ruby gem that is used to generate CSS. It can be used to generate repetitive sequences, can do variable substitution easily, and gives compact CSS code.%0a%3c [[#excerptend]]%0a%3c %0a%3c Here's an example:%0a%3c %0a%3c (:source lang=ruby linenum:)%0a---%0a> (:Summary:using a ruby gem to generate CSS:)%0a> %0a> [[http://ionfish.github.com/stylish/index.html | Stylish]] is a ruby gem that is used to generate CSS. It can be used to generate repetitive sequences, can do variable substitution easily, and gives compact CSS code. Here's an example:%0a> %0a> %0a35,36c33%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a39,48c36,43%0a%3c (:source lang=css -getcode:)%0a%3c body {font-size:15px; font-family:Arial, sans-serif; line-height:18px; background-color:#fafafa;}%0a%3c div.content {margin-left:100px; margin-right:100px; font-size:15px; margin-top:10px; font-family:Arial, sans-serif; margin-bottom:10px; line-height:18px; background-color:#000;}%0a%3c div.content p {margin:10px 10px 10px 10px; padding:5px 5px 5px 5px;}%0a%3c div.content a {color:blue;}%0a%3c div.content a:hover {color:red;}%0a%3c div.content a:active {color:red;}%0a%3c div.content a:visited {color:purple;}%0a%3c (:sourceend:)%0a%3c %0a---%0a>  body {font-size:15px; font-family:Arial, sans-serif; line-height:18px; background-color:#fafafa;} %0a>  div.content {margin-left:100px; margin-right:100px; font-size:15px; margin-top:10px; font-family:Arial, sans-serif; margin-bottom:10px; line-height:18px; background-color:#000;} %0a>  div.content p {margin:10px 10px 10px 10px; padding:5px 5px 5px 5px;}%0a>  div.content a {color:blue;}%0a>  div.content a:hover {color:red;}%0a>  div.content a:active {color:red;}%0a>  div.content a:visited {color:purple;}%0a> %0a53,59c48%0a%3c (:Summary:using a ruby gem to generate CSS:)%0a%3c (:title Generating CSS with Stylish (a Ruby Gem):)%0a%3c (:Parent:(Technology.)Ruby:)%0a%3c (:IncludeMe:[[(Technology.)Ruby]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: ruby, css, styles:)%0a%3c (:tags-hide ruby, css, styles :)%0a---%0a> %25rframe%25 '''Categories:''' [[!Uncategorized]]%0a
host:1333988429=127.0.0.1
author:1275203011=tamara
csum:1275203011=new page
diff:1275203011:1275203011:=1,48d0%0a%3c (:Summary:using a ruby gem to generate CSS:)%0a%3c %0a%3c [[http://ionfish.github.com/stylish/index.html | Stylish]] is a ruby gem that is used to generate CSS. It can be used to generate repetitive sequences, can do variable substitution easily, and gives compact CSS code. Here's an example:%0a%3c %0a%3c %0a%3c  require 'rubygems'%0a%3c  require 'stylish'%0a%3c %0a%3c  style = Stylish.generate do%0a%3c %0a%3c     body :background => {:color => "#fafafa"}, :font_size => "15px", :font_family => "Arial, sans-serif", :line_height => "18px"%0a%3c     rule "div.content",%0a%3c         :background => {:color => "#000"},%0a%3c         :font_size => "15px",%0a%3c         :font_family => "Arial, sans-serif",%0a%3c         :line_height => "18px",%0a%3c         :margin_left => "100px",%0a%3c         :margin_right => "100px",%0a%3c         :margin_top => "10px",%0a%3c         :margin_bottom => "10px"%0a%3c     rule "div.content" do%0a%3c         p :margin => "10px 10px 10px 10px",%0a%3c             :padding => "5px 5px 5px 5px"%0a%3c         a :color => "blue"%0a%3c         rule "a:hover", :color => "red"%0a%3c         rule "a:active", :color => "red"%0a%3c         rule "a:visited", :color => "purple"%0a%3c     end%0a%3c     %0a%3c  end%0a%3c %0a%3c  style.print('mystyle.css')%0a%3c %0a%3c and it generates the following, very compact CSS:%0a%3c %0a%3c  body {font-size:15px; font-family:Arial, sans-serif; line-height:18px; background-color:#fafafa;} %0a%3c  div.content {margin-left:100px; margin-right:100px; font-size:15px; margin-top:10px; font-family:Arial, sans-serif; margin-bottom:10px; line-height:18px; background-color:#000;} %0a%3c  div.content p {margin:10px 10px 10px 10px; padding:5px 5px 5px 5px;}%0a%3c  div.content a {color:blue;}%0a%3c  div.content a:hover {color:red;}%0a%3c  div.content a:active {color:red;}%0a%3c  div.content a:visited {color:purple;}%0a%3c %0a%3c Output formatting can be tailored to produce something more readable/maintainable. (However, why would you maintain the output when you can maintain the source?)%0a%3c %0a%3c %0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!Uncategorized]]%0a
host:1275203011=71.193.74.221
