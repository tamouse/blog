version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=close code tags in alert, mailcatcher web mail link
ctime=1377361029
host=71.63.215.130
name=Technology.HowToUsingActionMailerInRails
rev=4
targets=Technology.HowToUsingActionMailerInRails,Technology.Rails,Technology.IncludeMe,Category.HowTos,Category.Technology,Category.Ruby,Category.Rails,Technology.Cucumber
text=>>comment%3c%3c%0aSummary: A set of notes on working with Rails' `ActionMailer%0aParent: (Technology.)Rails%0aIncludeMe: [[(Technology.)Rails]]%0aCategories: [[!HowTos]], [[!Technology]], [[!Ruby]], [[!Rails]]%0aTags: ruby, rails, actionmailer, howtos, notes, testing%0a(:tags-hide ruby, rails, actionmailer, howtos, notes, testing:)%0aSource: %0aPosted: Sat Aug 24 10:39:09 2013%0a>>%3c%3c%0a[[#excerpt]]%0a>>lead%3c%3c%0a[[ActionMailer -> http://guides.rubyonrails.org/action_mailer_basics.html]] allows a%0aRails application to send and receive emails in a fashion similar to a%0aRails controller. You can have multi-part bodies, templates,%0aattachments, and so on. It isn't quite a complete ecosystem, as you%0aneed to have a transport for sending and recieving mail, and you need%0ato have a way of accurately testing your emails, so I'm going to write%0asome notes to complete that view.%0a>>%3c%3c%0a[[#excerptend]]%0a%0a!! First, read the documentation%0a%0a[[The Rails Guides -> http://guides.rubyonrails.org/]] provide the%0abasics for getting up and running using %0a[[ActionMailer -> #excerpt]].%0a%0aIn addition, the [[api -> http://api.rubyonrails.org/classes/ActionMailer/Base.html]]%0aprovides more details on the usage of the methods in `ActionMailer.%0a%0a!! Testing Considerations%0a%0aSince we are all good TDD/BDD -ers (we are, right?), I'm going to%0astart with how you can set up your Rails environment for testing your%0amailers.%0a%0aThe Rails Guides provide a section on %0a[[testing your mailers->http://guides.rubyonrails.org/testing.html#testing-your-mailers]],%0awhich you should go off and read right now.%0a%0a!!! Delivery Mode @@:test@@%0a%0aThe simplest setup for this, especially useful for unit and functional%0atesting, is to set the delivery mode for action mailer to @@:test@@ in%0ayour @@config/environments/test.rb@@ file:%0a%0a(:source lang=ruby linenum tabwidth=2 header="config/environments/test.rb" :)%0a  # Tell Action Mailer not to deliver emails to the real world.%0a  # The :test delivery method accumulates sent emails in the%0a  # ActionMailer::Base.deliveries array.%0a  config.action_mailer.delivery_method = :test%0a(:sourceend:)%0a%0aIn a new Rails app, this is the default setting, so you don't really need to do anything in particular.%0a%0a!!! `MailCatcher For Round-Trip Testing%0a%0aWhile it is often the case that you should not bother to test the underlying delivery mechanisms, sometimes you really want to see what your email is going to look like in the eyes of the receiver. [[MailCatcher->http://mailcatcher.me/]] to the rescue. `MailCatcher is a nice utility that emulates an SMTP connection and provides a webmail view of the mails it catches. To use `MailCatcher, after you've installed it according to the instructions, is to set up your environments files appropriately. In this case, I'm going to set it in the @@development@@ environment.%0a%0a(:source lang=ruby linenum tabwidth=2 header="config/environments/development.rb" :)%0a  config.action_mailer.deliver_method = :smtp%0a  config.action_mailer.smtp_settings = { :address => 'localhost', :port => 1025 }%0a(:sourceend:)%0a%0a>>alert.alert-info%3c%3c%0aFor feature or integration testing, using [[Technology.Cucumber|cucumber]] for example, it is better to set up a separate environment for that testing, different from unit testing that uses the @@test@@ environment. I add a @@cucumber@@ environment to the various configuration files (@@config/environments/cucumber.rb@@, @@config/database.yml@@, and so on) that lets me set up specific configuration variables like the above, without disturbing my unit test environment.%0a>>%3c%3c%0a%0aWhen you cause mails to be sent with your mailer, the mails can be seen by pointing your browser at [@http://localhost:1080@] and it works like your typical web mail reader. (You can't reply or forward, obviously.)%0a
time=1377367187
author:1377367187=tamara
csum:1377367187=close code tags in alert, mailcatcher web mail link
diff:1377367187:1377366801:minor=67c67%0a%3c For feature or integration testing, using [[Technology.Cucumber|cucumber]] for example, it is better to set up a separate environment for that testing, different from unit testing that uses the @@test@@ environment. I add a @@cucumber@@ environment to the various configuration files (@@config/environments/cucumber.rb@@, @@config/database.yml@@, and so on) that lets me set up specific configuration variables like the above, without disturbing my unit test environment.%0a---%0a> For feature or integration testing, using [[Technology.Cucumber|cucumber]] for example, it is better to set up a separate environment for that testing, different from unit testing that uses the @@test@@ environment. I add a @@cucumber@@ environment to the various configuration files (@@config/environments/cucumber.rb, config/database.yml, and so on) that lets me set up specific configuration variables like the above, without disturbing my unit test environment.%0a70c70%0a%3c When you cause mails to be sent with your mailer, the mails can be seen by pointing your browser at [@http://localhost:1080@] and it works like your typical web mail reader. (You can't reply or forward, obviously.)%0a---%0a> When you cause mails to be sent with your mailer, the mails can be seen by pointing your browser at [=http://localhost:1080=] and it works like your typical web mail reader. (You can't reply or forward, obviously.)%0a
host:1377367187=71.63.215.130
author:1377366801=tamara
csum:1377366801=fix summary
diff:1377366801:1377366171:minor=2c2%0a%3c Summary: A set of notes on working with Rails' `ActionMailer%0a---%0a> Summary: A set of notes on working with Rails' ActionMailer%0a
host:1377366801=71.63.215.130
author:1377366171=tamara
diff:1377366171:1377361029:=12d11%0a%3c >>lead%3c%3c%0a20d18%0a%3c >>%3c%3c%0a
host:1377366171=71.63.215.130
author:1377361029=tamara
csum:1377361029=new page
diff:1377361029:1377361029:=1,68d0%0a%3c >>comment%3c%3c%0a%3c Summary: A set of notes on working with Rails' ActionMailer%0a%3c Parent: (Technology.)Rails%0a%3c IncludeMe: [[(Technology.)Rails]]%0a%3c Categories: [[!HowTos]], [[!Technology]], [[!Ruby]], [[!Rails]]%0a%3c Tags: ruby, rails, actionmailer, howtos, notes, testing%0a%3c (:tags-hide ruby, rails, actionmailer, howtos, notes, testing:)%0a%3c Source: %0a%3c Posted: Sat Aug 24 10:39:09 2013%0a%3c >>%3c%3c%0a%3c [[#excerpt]]%0a%3c [[ActionMailer -> http://guides.rubyonrails.org/action_mailer_basics.html]] allows a%0a%3c Rails application to send and receive emails in a fashion similar to a%0a%3c Rails controller. You can have multi-part bodies, templates,%0a%3c attachments, and so on. It isn't quite a complete ecosystem, as you%0a%3c need to have a transport for sending and recieving mail, and you need%0a%3c to have a way of accurately testing your emails, so I'm going to write%0a%3c some notes to complete that view.%0a%3c [[#excerptend]]%0a%3c %0a%3c !! First, read the documentation%0a%3c %0a%3c [[The Rails Guides -> http://guides.rubyonrails.org/]] provide the%0a%3c basics for getting up and running using %0a%3c [[ActionMailer -> #excerpt]].%0a%3c %0a%3c In addition, the [[api -> http://api.rubyonrails.org/classes/ActionMailer/Base.html]]%0a%3c provides more details on the usage of the methods in `ActionMailer.%0a%3c %0a%3c !! Testing Considerations%0a%3c %0a%3c Since we are all good TDD/BDD -ers (we are, right?), I'm going to%0a%3c start with how you can set up your Rails environment for testing your%0a%3c mailers.%0a%3c %0a%3c The Rails Guides provide a section on %0a%3c [[testing your mailers->http://guides.rubyonrails.org/testing.html#testing-your-mailers]],%0a%3c which you should go off and read right now.%0a%3c %0a%3c !!! Delivery Mode @@:test@@%0a%3c %0a%3c The simplest setup for this, especially useful for unit and functional%0a%3c testing, is to set the delivery mode for action mailer to @@:test@@ in%0a%3c your @@config/environments/test.rb@@ file:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2 header="config/environments/test.rb" :)%0a%3c   # Tell Action Mailer not to deliver emails to the real world.%0a%3c   # The :test delivery method accumulates sent emails in the%0a%3c   # ActionMailer::Base.deliveries array.%0a%3c   config.action_mailer.delivery_method = :test%0a%3c (:sourceend:)%0a%3c %0a%3c In a new Rails app, this is the default setting, so you don't really need to do anything in particular.%0a%3c %0a%3c !!! `MailCatcher For Round-Trip Testing%0a%3c %0a%3c While it is often the case that you should not bother to test the underlying delivery mechanisms, sometimes you really want to see what your email is going to look like in the eyes of the receiver. [[MailCatcher->http://mailcatcher.me/]] to the rescue. `MailCatcher is a nice utility that emulates an SMTP connection and provides a webmail view of the mails it catches. To use `MailCatcher, after you've installed it according to the instructions, is to set up your environments files appropriately. In this case, I'm going to set it in the @@development@@ environment.%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2 header="config/environments/development.rb" :)%0a%3c   config.action_mailer.deliver_method = :smtp%0a%3c   config.action_mailer.smtp_settings = { :address => 'localhost', :port => 1025 }%0a%3c (:sourceend:)%0a%3c %0a%3c >>alert.alert-info%3c%3c%0a%3c For feature or integration testing, using [[Technology.Cucumber|cucumber]] for example, it is better to set up a separate environment for that testing, different from unit testing that uses the @@test@@ environment. I add a @@cucumber@@ environment to the various configuration files (@@config/environments/cucumber.rb, config/database.yml, and so on) that lets me set up specific configuration variables like the above, without disturbing my unit test environment.%0a%3c >>%3c%3c%0a%3c %0a%3c When you cause mails to be sent with your mailer, the mails can be seen by pointing your browser at [=http://localhost:1080=] and it works like your typical web mail reader. (You can't reply or forward, obviously.)%0a
host:1377361029=71.63.215.130
