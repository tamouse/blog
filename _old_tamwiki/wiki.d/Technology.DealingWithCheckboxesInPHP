version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0
author=tamara
charset=ISO-8859-1
csum=
ctime=1372421728
host=71.63.215.130
name=Technology.DealingWithCheckboxesInPHP
rev=2
targets=Technology.DealingWithCheckboxesInPHP,Technology.PHP,Technology.IncludeMe,Category.HowTos,Category.Articles,Profiles.Tamara
text=>>comment%3c%3c%0aSummary: A Simple Way to Handle Multiple Checkboxes In a Form in PHP: Gathering, Storing and Retrieving Sets of Values, a Simple Approach%0aParent:(Technology.)PHP%0aIncludeMe:[[(Technology.)PHP]]%0aCategories: [[!HowTos]], [[!Articles]]%0aTags: php, forms, checkboxes, howtos%0a(:tags-hide php, forms, checkboxes, howtos :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0aFrom a recent correspondence with someone on the PHP-DB list, the question of how to handle checkboxes in forms in PHP is something that comes up fairly often. This is a simple method that will work for very simple relationships.%0a[[#excerptend]]%0a%0a!! The original email request%0a%0a(:source lang=email -getcode header="The Original Email Request":)%0aFrom: Tamara Temple %3ctamouse.lists----->%0aTo: -----%0aSubject: Re: Writing multi-checkbox values to MySQL%0aDate: Fri, 28 Jun 2013 06:21:16 -0500%0a%0a> Hello,%0a%0a> You were a tremendous help to me a few months ago when I was%0a> floundering with a PHP question.  Well, I thought I knew form%0a> processing until I got to multiple checkbox inputs and writing the%0a> values to a MySQL table.  The form I'm working on has three separate%0a> multi-checkbox fields and I'm having a bit of trouble writing the%0a> values to a table.  I've done some searching to find an example that%0a> matches what I'm trying to do but so far I haven't turned anything up.%0a%0aThis is one of the places things can get more complicated, and it's%0aoften a source of confusion.%0a%0a> Here's an abbreviated version of my form code:%0a>%0a> __________________________________________________________%0a%0a(:sourcend:)%0a%0a(:source lang=html4strict linenum tabwidth=4 header="html form":)%0a%3chtml>%0a%3chead>%0a%3ctitle>Example Outreach Form%3c/title>%0a%3cmeta charset="utf-8" />%0a%3c/head>%0a%3cbody>%0a%3ch1>Example Outreach Form%3c/h1>%0a%0a%0a%3cform method="post" action="outreach_activity_process.php">%0a%3cp>%3clabel for="your_name">Your Name:%3c/label>%3cbr>%0a%3cinput type="text" name="your_name" id="your_name" size="50" maxlength="255">%3c/p>%0a%0a%3cp>%3clabel for="proj_title">1. NLM Project Title (%3ci>if applicable%3c/i>):%3c/label>%3cbr>%0a%3cinput type="text" name="proj_title" id="proj_title" size="50" maxlength="255">%3c/p>%0a%3cp>6. Type(s) of Organization(s) Involved in Activity:%0a%3cbr>%0a%3cinput type="checkbox" name="org_type[]" value="Health Sciences Library"> Health Sciences Library%0a%3cbr>%0a%3cinput type="checkbox" name="org_type[]" value="Public Library"> Public Library%0a%3cbr />%0a%3cinput type="checkbox" name="org_type[]" value="Government Agency"> Government Agency%0a%3cbr />%0a%3cinput type="checkbox" name="org_type[]" value="Public Health"> Public Health%0a%3c/p>%0a%3cp>7. Session Content:%0a%3cbr />%0a%3cinput type="checkbox" name="session_content[]" value="PubMed"> PubMed%0a%3cbr />%0a%3cinput type="checkbox" name="session_content[]" value="MedlinePlus"> MedlinePlus%0a%3cbr />%0a%3cinput type="checkbox" name="session_content[]" value="ClinicalTrials.gov"> ClinicalTrials.gov%0a%3cbr />%0a%3cinput type="checkbox" name="session_content[]" value="NCBI"> NCBI%0a%3c/p>%0a%3cp>%3cinput type="submit" name="submit" value="Submit Activity Data" />%0a%3cinput type="reset" name="reset" value="Clear the Form" />%3c/p>%0a%3c/form>%0a%0a%3c/body> %3c/html>%0a(:sourceend:)%0a%0a(:source lang=email -getcode:)%0a> Here's the corresponding processing code that I have so far:%0a(:sourceend:)%0a%0a(:source lang=php linenum tabwidth=4 header="outreach_activity_process.php":)%0a%3c?php%0a%0ainclude 'db.inc.php';%0a%0a$fields = array('your_name','proj_title','org_type',’session_content’);%0a%0aforeach ($fields as $field) {%0a        if (isset($_POST[$field])) $$field = mysqli_real_escape_string($link, $_POST[$field]);%0a}%0a        $sql = 'INSERT INTO%0amy_table(your_name,proj_title,org_type,session_content) VALUES("' . $your_name . '","' . $proj_title . '","' . $org_type . ‘”,”’ .%0a$session_content . ‘”)’;%0a%0a        if (!mysqli_query($link, $sql))%0a        {%0a                $error = 'Error adding submitted Outreach activity details: ' . mysqli_error($link);%0a                include 'error.html.php';%0a                exit();%0a        }%0a        header('Location: .');%0a        exit();%0a?>%0a(:sourceend:)%0a%0a(:source lang=email -getcode:)%0a> This code works well enough if only one box is checked but if I%0a> check more tha n one, only one value gets passed to the table.  I%0a> understand that in my form code I need to have the name values as%0a> 'org_type[]' and 'session_content[]' but beyond that I don't know what%0a> I'm doing. Shouldn't the foreach in the processing code pull in all%0a> the checkbox values?  How can I pass all checked values to the table?%0a%0aThere is both a "simple" and a "useful" way of addressing this, but they%0aaren't the same.%0a%0a(:sourceend:)%0a%0a%0a!! The Simple Method%0a%0aThe simple one, is, as you have seen, to add the [@[]@] to your field%0anames. This will get you all the checked items. However, this is where%0asimple falls down: how will you usefull store and extract that info?%0aSome people answer this by packing all the info stored into a string in%0aa single field in the table. This works, and may be the way you choose%0ato go, but using this method tends to fall down when you have anything%0aeven a bit more complex.%0a%0aIt will probably be instructive for you to make a simple html page%0awith the form you have above, and a simple script to receive the form%0asubmission. In the simple script, just dump [@$_POST@] and examine the%0acontents to get an understanding of what gets returned. In your%0a[@outreach_activity_process.php@] file, at the top, after the opening%0a[@%3c?php@], put:%0a%0a(:source lang=php linenum tabwidth=4 header="dump $_POST contents":)%0aheader("Content-type: text/plain;");%0avar_dump($_POST);%0aexit();%0a(:sourceend:)%0a%0aThen submit the form with different values checked and unchecked and you%0acan see what you're getting:%0a%0a(:source lang=text linenum tabwidth=4 -getcode header="output from form submission":)%0aarray(5) {%0a  ["your_name"]=>%0a  string(6) "glithc"%0a  ["proj_title"]=>%0a  string(4) "asdf"%0a  ["org_type"]=>%0a  array(2) {%0a    [0]=>%0a    string(23) "Health Sciences Library"%0a    [1]=>%0a    string(17) "Government Agency"%0a  }%0a  ["session_content"]=>%0a  array(2) {%0a    [0]=>%0a    string(11) "MedlinePlus"%0a    [1]=>%0a    string(18) "ClinicalTrials.gov"%0a  }%0a  ["submit"]=>%0a  string(20) "Submit Activity Data"%0a}%0a(:sourceend:)%0a%0a%0aSo you can now see that [@$_POST['org_type']@] is an array that contains%0a[@"['Health Sciences Library', 'Government Agency']"@] (and similar for%0asession content). The question is how to store that usefully.%0a%0aSome people simply pack the array values into a string with a separator%0aand save that in the table. That's usually dead simple:%0a%0a(:source lang=php:)%0a$org_type = implode("|",$org_type);%0a$session_content = implode("|",$session_content);%0a(:sourceend:)%0a%0aThen when you pull it out, do the opposite. Say you have your data%0arecord that you've retrieved from the database in a variable $row, using%0acolumn keys as indexes:%0a%0a(:source lang=php:)%0a$org_type = explode("|",$row['org_type']);%0a$session_content = explode("|",$row['session_content]');%0a(:sourceend:)%0a%0aHowever, this breaks if you ever have an org_type or session_content%0awith the separator symbol ("|") in it. Instead of that, I would suggest%0aconverting the array into a JSON data object and storing that, as it%0amakes getting the info back out in a more usable form easier:%0a%0a(:source lang=php:)%0a$org_type = json_encode($org_type);%0a$session_content = json_encode($session_content);%0a(:sourceend:)%0a%0abefore you create the [@$sql@] statement.%0a%0aThen, when you pull the data and use it someplace, just perform the%0areverse operation.%0a%0a(:source lang=php:)%0a$org_type = json_decode($row['org_type']);%0a$session_content = json_decode($row['session_content']);%0a(:sourceend:)%0a%0aThis is what things look like:%0a%0a(:source lang=text -getcode:)%0aEncoded JSON strings:%0aorg_type:%0astring(47) "["Health Sciences Library","Government Agency"]"%0asession_content:%0astring(36) "["MedlinePlus","ClinicalTrials.gov"]"%0a%0aDecoded JSON strings:%0aorg_type:%0aarray(2) {%0a  [0]=>%0a  string(23) "Health Sciences Library"%0a  [1]=>%0a  string(17) "Government Agency"%0a}%0asession_content:%0aarray(2) {%0a  [0]=>%0a  string(11) "MedlinePlus"%0a  [1]=>%0a  string(18) "ClinicalTrials.gov"%0a}%0a(:sourceend:)%0a%0aLet's say you want to search for all outreach records that have a%0asession content of [@ClinicalTrials.gov@]? Since JSON data is '''cleartext''', you%0acan do something like:%0a%0a(:source lang=sql:)%0aSELECT * FROM my_table WHERE `session_content` LIKE%0a   '%25ClinicalTrials.gov%25';%0a(:sourceend:)%0a%0aThis should give you all the records where the [@ClinicalTrials.gov@]%0acheckbox was set and saved. Then use the above [@json_decode@] calls to%0aextract the info.%0a%0aSimple? Yes. But only for simple data. Go with this for now unless you%0afind yourself doing all kinds of things with such strings of data.%0a%0a!! The Useful Method%0a%0aWhat you really have here is a relationship between 3 kinds of data:%0aOutreaches, Organization Types, and Session Content. If you application%0ais going to use any of this information in a more general way, you will%0aprobably want to use the "useful" method rather than the simple method%0aabove. :)%0a%0aWhat you will need to look at here are the relationships between the%0akinds of data you are trying to work with. We need to step back a bit%0afrom the code and think about the data models.%0a%0aYour first model, it seems, might be called an Outreach. It seems to%0aconsist of information regarding the person and their project.%0a%0aTwo other models show up now with the multiple check boxes: Organization%0aTypes and Session Content although 'Session' is so overloaded inside%0amost web application softwares and frameworks that I would not use this%0aname. Looking at the actual values you've expressed there, I would call%0athese Sources instead of Sessions. (Don't let me railroad you into%0achoosing names, though!)%0a%0aThe Outreach has what is known as a one-to-many relationship with both%0aOrganization and Source.%0a%0aHowever, both Organization and Source can also be related to many%0aOutreaches.%0a%0aThus you end up with a many-to-many relationship between Outreach and%0aOrganization, and a many-to-many relationship between Outreach and%0aSource.%0a%0aIf you haven't already, I suggest studying up on data base%0arelationships, especially things like one-to-one, one-to-many,%0amany-to-many, and how these are implemented in various database%0asystems, as they all involve setting things up in your database that%0acan become rather complicated and arcane, including such fun things as%0aforeign keys.%0a%0a(In an object-relationship management system, such as employed by Rails,%0athis all becomes extremely trivial. In PHP, there are many frameworks%0awhich also do this. This may be left for a future discussion.)%0a%0a----%0a%0a%0a(:source lang=email -getcode:)%0a_____, for now, to get you started, I suggest following the "simple"%0aroute I outlined above. The "useful" route can be picked up later,%0aprovided you keep your application very modular, to allow easy%0asubstituted parts.%0a%0aTake care, hope this helps.%0a(:sourceend:)%0a%0a%0a%0a-> &mdash; [[~tamara]] June 28, 2013, at 07:41 AM%0a%0a
time=1372423300
author:1372423300=tamara
diff:1372423300:1372421728:=17,18c17,18%0a%3c From: Tamara Temple %3ctamouse.lists----->%0a%3c To: -----%0a---%0a> From: Tamara Temple %3ctamouse.lists@gmail.com>%0a> To: "VanderHart\, Robert" %3cRobert.VanderHart@umassmed.edu>%0a21a22%0a> VanderHart, Robert %3cRobert.VanderHart@umassmed.edu> wrote:%0a24,31c25,31%0a%3c > You were a tremendous help to me a few months ago when I was%0a%3c > floundering with a PHP question.  Well, I thought I knew form%0a%3c > processing until I got to multiple checkbox inputs and writing the%0a%3c > values to a MySQL table.  The form I'm working on has three separate%0a%3c > multi-checkbox fields and I'm having a bit of trouble writing the%0a%3c > values to a table.  I've done some searching to find an example that%0a%3c > matches what I'm trying to do but so far I haven't turned anything up.%0a%3c %0a---%0a> Hi, Robert,%0a> %0a> > You were a tremendous help to me a few months ago when I was floundering with a PHP question.  Well, I thought I knew form processing until I%0a> > got to multiple checkbox inputs and writing the values to a MySQL table.  The form I'm working on has three separate multi-checkbox fields and%0a> > I'm having a bit of trouble writing the values to a table.  I've done some searching to find an example that matches what I'm trying to do but%0a> > so far I haven't turned anything up.%0a> %0a129c129%0a%3c The simple one, is, as you have seen, to add the [@[]@] to your field%0a---%0a> The simple one, is, as you have seen, to add the [] to your field%0a137,140c137,139%0a%3c It will probably be instructive for you to make a simple html page%0a%3c with the form you have above, and a simple script to receive the form%0a%3c submission. In the simple script, just dump [@$_POST@] and examine the%0a%3c contents to get an understanding of what gets returned. In your%0a---%0a> It will probably be instructive for you to simple make a page with the%0a> form you have above, and just dump $_POST and examine the contents to%0a> get an understanding of what gets returned. In your%0a180c179%0a%3c [@"['Health Sciences Library', 'Government Agency']"@] (and similar for%0a---%0a> ['Health Sciences Library', 'Government Agency'] (and similar for%0a183c182%0a%3c Some people simply pack the array values into a string with a separator%0a---%0a> Some people simply pack the two values into a string with a separator%0a210,211c209,210%0a%3c before you create the [@$sql@] statement.%0a%3c %0a---%0a> before you create the $sql statement.%0a> %0a220,245c219,220%0a%3c This is what things look like:%0a%3c %0a%3c (:source lang=text -getcode:)%0a%3c Encoded JSON strings:%0a%3c org_type:%0a%3c string(47) "["Health Sciences Library","Government Agency"]"%0a%3c session_content:%0a%3c string(36) "["MedlinePlus","ClinicalTrials.gov"]"%0a%3c %0a%3c Decoded JSON strings:%0a%3c org_type:%0a%3c array(2) {%0a%3c   [0]=>%0a%3c   string(23) "Health Sciences Library"%0a%3c   [1]=>%0a%3c   string(17) "Government Agency"%0a%3c }%0a%3c session_content:%0a%3c array(2) {%0a%3c   [0]=>%0a%3c   string(11) "MedlinePlus"%0a%3c   [1]=>%0a%3c   string(18) "ClinicalTrials.gov"%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a---%0a> That's the simple method. It will work for simplisitic information.%0a> %0a247c222%0a%3c session content of [@ClinicalTrials.gov@]? Since JSON data is '''cleartext''', you%0a---%0a> session content of ClinicalTrials.gov? Since JSON data is cleartext, you%0a255,256c230,231%0a%3c This should give you all the records where the [@ClinicalTrials.gov@]%0a%3c checkbox was set and saved. Then use the above [@json_decode@] calls to%0a---%0a> This should give you all the records where the ClinicalTrials.gov%0a> checkbox was set and saved. Then use the above json_decode calls to%0a305,307c280,282%0a%3c ----%0a%3c %0a%3c %0a---%0a> ---%0a> %0a> %0a309c284%0a%3c _____, for now, to get you started, I suggest following the "simple"%0a---%0a> Robert, for now, to get you started, I suggest following the "simple"%0a319c294%0a%3c -> &mdash; [[~tamara]] June 28, 2013, at 07:41 AM%0a---%0a> %0a
host:1372423300=71.63.215.130
author:1372421728=tamara
diff:1372421728:1372421728:=1,295d0%0a%3c >>comment%3c%3c%0a%3c Summary: A Simple Way to Handle Multiple Checkboxes In a Form in PHP: Gathering, Storing and Retrieving Sets of Values, a Simple Approach%0a%3c Parent:(Technology.)PHP%0a%3c IncludeMe:[[(Technology.)PHP]]%0a%3c Categories: [[!HowTos]], [[!Articles]]%0a%3c Tags: php, forms, checkboxes, howtos%0a%3c (:tags-hide php, forms, checkboxes, howtos :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c From a recent correspondence with someone on the PHP-DB list, the question of how to handle checkboxes in forms in PHP is something that comes up fairly often. This is a simple method that will work for very simple relationships.%0a%3c [[#excerptend]]%0a%3c %0a%3c !! The original email request%0a%3c %0a%3c (:source lang=email -getcode header="The Original Email Request":)%0a%3c From: Tamara Temple %3ctamouse.lists@gmail.com>%0a%3c To: "VanderHart\, Robert" %3cRobert.VanderHart@umassmed.edu>%0a%3c Subject: Re: Writing multi-checkbox values to MySQL%0a%3c Date: Fri, 28 Jun 2013 06:21:16 -0500%0a%3c %0a%3c VanderHart, Robert %3cRobert.VanderHart@umassmed.edu> wrote:%0a%3c > Hello,%0a%3c %0a%3c Hi, Robert,%0a%3c %0a%3c > You were a tremendous help to me a few months ago when I was floundering with a PHP question.  Well, I thought I knew form processing until I%0a%3c > got to multiple checkbox inputs and writing the values to a MySQL table.  The form I'm working on has three separate multi-checkbox fields and%0a%3c > I'm having a bit of trouble writing the values to a table.  I've done some searching to find an example that matches what I'm trying to do but%0a%3c > so far I haven't turned anything up.%0a%3c %0a%3c This is one of the places things can get more complicated, and it's%0a%3c often a source of confusion.%0a%3c %0a%3c > Here's an abbreviated version of my form code:%0a%3c >%0a%3c > __________________________________________________________%0a%3c %0a%3c (:sourcend:)%0a%3c %0a%3c (:source lang=html4strict linenum tabwidth=4 header="html form":)%0a%3c %3chtml>%0a%3c %3chead>%0a%3c %3ctitle>Example Outreach Form%3c/title>%0a%3c %3cmeta charset="utf-8" />%0a%3c %3c/head>%0a%3c %3cbody>%0a%3c %3ch1>Example Outreach Form%3c/h1>%0a%3c %0a%3c %0a%3c %3cform method="post" action="outreach_activity_process.php">%0a%3c %3cp>%3clabel for="your_name">Your Name:%3c/label>%3cbr>%0a%3c %3cinput type="text" name="your_name" id="your_name" size="50" maxlength="255">%3c/p>%0a%3c %0a%3c %3cp>%3clabel for="proj_title">1. NLM Project Title (%3ci>if applicable%3c/i>):%3c/label>%3cbr>%0a%3c %3cinput type="text" name="proj_title" id="proj_title" size="50" maxlength="255">%3c/p>%0a%3c %3cp>6. Type(s) of Organization(s) Involved in Activity:%0a%3c %3cbr>%0a%3c %3cinput type="checkbox" name="org_type[]" value="Health Sciences Library"> Health Sciences Library%0a%3c %3cbr>%0a%3c %3cinput type="checkbox" name="org_type[]" value="Public Library"> Public Library%0a%3c %3cbr />%0a%3c %3cinput type="checkbox" name="org_type[]" value="Government Agency"> Government Agency%0a%3c %3cbr />%0a%3c %3cinput type="checkbox" name="org_type[]" value="Public Health"> Public Health%0a%3c %3c/p>%0a%3c %3cp>7. Session Content:%0a%3c %3cbr />%0a%3c %3cinput type="checkbox" name="session_content[]" value="PubMed"> PubMed%0a%3c %3cbr />%0a%3c %3cinput type="checkbox" name="session_content[]" value="MedlinePlus"> MedlinePlus%0a%3c %3cbr />%0a%3c %3cinput type="checkbox" name="session_content[]" value="ClinicalTrials.gov"> ClinicalTrials.gov%0a%3c %3cbr />%0a%3c %3cinput type="checkbox" name="session_content[]" value="NCBI"> NCBI%0a%3c %3c/p>%0a%3c %3cp>%3cinput type="submit" name="submit" value="Submit Activity Data" />%0a%3c %3cinput type="reset" name="reset" value="Clear the Form" />%3c/p>%0a%3c %3c/form>%0a%3c %0a%3c %3c/body> %3c/html>%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=email -getcode:)%0a%3c > Here's the corresponding processing code that I have so far:%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=php linenum tabwidth=4 header="outreach_activity_process.php":)%0a%3c %3c?php%0a%3c %0a%3c include 'db.inc.php';%0a%3c %0a%3c $fields = array('your_name','proj_title','org_type',’session_content’);%0a%3c %0a%3c foreach ($fields as $field) {%0a%3c         if (isset($_POST[$field])) $$field = mysqli_real_escape_string($link, $_POST[$field]);%0a%3c }%0a%3c         $sql = 'INSERT INTO%0a%3c my_table(your_name,proj_title,org_type,session_content) VALUES("' . $your_name . '","' . $proj_title . '","' . $org_type . ‘”,”’ .%0a%3c $session_content . ‘”)’;%0a%3c %0a%3c         if (!mysqli_query($link, $sql))%0a%3c         {%0a%3c                 $error = 'Error adding submitted Outreach activity details: ' . mysqli_error($link);%0a%3c                 include 'error.html.php';%0a%3c                 exit();%0a%3c         }%0a%3c         header('Location: .');%0a%3c         exit();%0a%3c ?>%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=email -getcode:)%0a%3c > This code works well enough if only one box is checked but if I%0a%3c > check more tha n one, only one value gets passed to the table.  I%0a%3c > understand that in my form code I need to have the name values as%0a%3c > 'org_type[]' and 'session_content[]' but beyond that I don't know what%0a%3c > I'm doing. Shouldn't the foreach in the processing code pull in all%0a%3c > the checkbox values?  How can I pass all checked values to the table?%0a%3c %0a%3c There is both a "simple" and a "useful" way of addressing this, but they%0a%3c aren't the same.%0a%3c %0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c !! The Simple Method%0a%3c %0a%3c The simple one, is, as you have seen, to add the [] to your field%0a%3c names. This will get you all the checked items. However, this is where%0a%3c simple falls down: how will you usefull store and extract that info?%0a%3c Some people answer this by packing all the info stored into a string in%0a%3c a single field in the table. This works, and may be the way you choose%0a%3c to go, but using this method tends to fall down when you have anything%0a%3c even a bit more complex.%0a%3c %0a%3c It will probably be instructive for you to simple make a page with the%0a%3c form you have above, and just dump $_POST and examine the contents to%0a%3c get an understanding of what gets returned. In your%0a%3c [@outreach_activity_process.php@] file, at the top, after the opening%0a%3c [@%3c?php@], put:%0a%3c %0a%3c (:source lang=php linenum tabwidth=4 header="dump $_POST contents":)%0a%3c header("Content-type: text/plain;");%0a%3c var_dump($_POST);%0a%3c exit();%0a%3c (:sourceend:)%0a%3c %0a%3c Then submit the form with different values checked and unchecked and you%0a%3c can see what you're getting:%0a%3c %0a%3c (:source lang=text linenum tabwidth=4 -getcode header="output from form submission":)%0a%3c array(5) {%0a%3c   ["your_name"]=>%0a%3c   string(6) "glithc"%0a%3c   ["proj_title"]=>%0a%3c   string(4) "asdf"%0a%3c   ["org_type"]=>%0a%3c   array(2) {%0a%3c     [0]=>%0a%3c     string(23) "Health Sciences Library"%0a%3c     [1]=>%0a%3c     string(17) "Government Agency"%0a%3c   }%0a%3c   ["session_content"]=>%0a%3c   array(2) {%0a%3c     [0]=>%0a%3c     string(11) "MedlinePlus"%0a%3c     [1]=>%0a%3c     string(18) "ClinicalTrials.gov"%0a%3c   }%0a%3c   ["submit"]=>%0a%3c   string(20) "Submit Activity Data"%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c So you can now see that [@$_POST['org_type']@] is an array that contains%0a%3c ['Health Sciences Library', 'Government Agency'] (and similar for%0a%3c session content). The question is how to store that usefully.%0a%3c %0a%3c Some people simply pack the two values into a string with a separator%0a%3c and save that in the table. That's usually dead simple:%0a%3c %0a%3c (:source lang=php:)%0a%3c $org_type = implode("|",$org_type);%0a%3c $session_content = implode("|",$session_content);%0a%3c (:sourceend:)%0a%3c %0a%3c Then when you pull it out, do the opposite. Say you have your data%0a%3c record that you've retrieved from the database in a variable $row, using%0a%3c column keys as indexes:%0a%3c %0a%3c (:source lang=php:)%0a%3c $org_type = explode("|",$row['org_type']);%0a%3c $session_content = explode("|",$row['session_content]');%0a%3c (:sourceend:)%0a%3c %0a%3c However, this breaks if you ever have an org_type or session_content%0a%3c with the separator symbol ("|") in it. Instead of that, I would suggest%0a%3c converting the array into a JSON data object and storing that, as it%0a%3c makes getting the info back out in a more usable form easier:%0a%3c %0a%3c (:source lang=php:)%0a%3c $org_type = json_encode($org_type);%0a%3c $session_content = json_encode($session_content);%0a%3c (:sourceend:)%0a%3c %0a%3c before you create the $sql statement.%0a%3c %0a%3c Then, when you pull the data and use it someplace, just perform the%0a%3c reverse operation.%0a%3c %0a%3c (:source lang=php:)%0a%3c $org_type = json_decode($row['org_type']);%0a%3c $session_content = json_decode($row['session_content']);%0a%3c (:sourceend:)%0a%3c %0a%3c That's the simple method. It will work for simplisitic information.%0a%3c %0a%3c Let's say you want to search for all outreach records that have a%0a%3c session content of ClinicalTrials.gov? Since JSON data is cleartext, you%0a%3c can do something like:%0a%3c %0a%3c (:source lang=sql:)%0a%3c SELECT * FROM my_table WHERE `session_content` LIKE%0a%3c    '%25ClinicalTrials.gov%25';%0a%3c (:sourceend:)%0a%3c %0a%3c This should give you all the records where the ClinicalTrials.gov%0a%3c checkbox was set and saved. Then use the above json_decode calls to%0a%3c extract the info.%0a%3c %0a%3c Simple? Yes. But only for simple data. Go with this for now unless you%0a%3c find yourself doing all kinds of things with such strings of data.%0a%3c %0a%3c !! The Useful Method%0a%3c %0a%3c What you really have here is a relationship between 3 kinds of data:%0a%3c Outreaches, Organization Types, and Session Content. If you application%0a%3c is going to use any of this information in a more general way, you will%0a%3c probably want to use the "useful" method rather than the simple method%0a%3c above. :)%0a%3c %0a%3c What you will need to look at here are the relationships between the%0a%3c kinds of data you are trying to work with. We need to step back a bit%0a%3c from the code and think about the data models.%0a%3c %0a%3c Your first model, it seems, might be called an Outreach. It seems to%0a%3c consist of information regarding the person and their project.%0a%3c %0a%3c Two other models show up now with the multiple check boxes: Organization%0a%3c Types and Session Content although 'Session' is so overloaded inside%0a%3c most web application softwares and frameworks that I would not use this%0a%3c name. Looking at the actual values you've expressed there, I would call%0a%3c these Sources instead of Sessions. (Don't let me railroad you into%0a%3c choosing names, though!)%0a%3c %0a%3c The Outreach has what is known as a one-to-many relationship with both%0a%3c Organization and Source.%0a%3c %0a%3c However, both Organization and Source can also be related to many%0a%3c Outreaches.%0a%3c %0a%3c Thus you end up with a many-to-many relationship between Outreach and%0a%3c Organization, and a many-to-many relationship between Outreach and%0a%3c Source.%0a%3c %0a%3c If you haven't already, I suggest studying up on data base%0a%3c relationships, especially things like one-to-one, one-to-many,%0a%3c many-to-many, and how these are implemented in various database%0a%3c systems, as they all involve setting things up in your database that%0a%3c can become rather complicated and arcane, including such fun things as%0a%3c foreign keys.%0a%3c %0a%3c (In an object-relationship management system, such as employed by Rails,%0a%3c this all becomes extremely trivial. In PHP, there are many frameworks%0a%3c which also do this. This may be left for a future discussion.)%0a%3c %0a%3c ---%0a%3c %0a%3c %0a%3c (:source lang=email -getcode:)%0a%3c Robert, for now, to get you started, I suggest following the "simple"%0a%3c route I outlined above. The "useful" route can be picked up later,%0a%3c provided you keep your application very modular, to allow easy%0a%3c substituted parts.%0a%3c %0a%3c Take care, hope this helps.%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %0a
host:1372421728=71.63.215.130
