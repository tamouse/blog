version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19
author=tamara
charset=ISO-8859-1
csum=move page from main
ctime=1317981781
host=127.0.0.1
name=Technology.AutoInsert
rev=2
targets=Technology.AutoInsert,Technology.YaSnippets
text=[[#excerpt]]%0aautoinsert is a standard package included in the Emacs%0adistribution. It provides a mechanism to automatically insert text%0ainto a newly created file.%0a[[#excerptend]]%0a%0aThe autoinsert mechanism is based on matching a filename spec with a%0atemplate, and possibly some code to tweak the contents of the template%0ato the local situation.%0a%0aAutoinsert has some preexisting content, but is not enabled by%0adefault. To enable it, add @@(auto-insert-mode t)@@ to you @@.emacs@@%0afile.%0a%0a!!Extending auto insertion functions%0a%0aAutoinsert has a nifty feature that lets you specify an elisp function%0ato execute on the buffer after the template has been inserted into the%0anew file. This allows you to customize the inserted template to the%0afile being created, such as adding comments including the file name,%0aauthor, email, copyright, and such information.%0a%0aI've created a configuration file that i load in my @@.emacs@@ file:%0a%0a(:source lang=lisp header=conf-autoinsert.el linenum tabwidth=4:)%0a;; auto-insert stuff%0a;; From http://www.emacswiki.org/emacs/AutoInsertMode%0a%0a;;; Commentary:%0a%0a;; Provides for inserting standard file templates with variable%0a;; substitution based on the file's type (given by it's extention).%0a;; %0a;; New templates should go into the directory specified by %0a;; `auto-insert-directory' and added to the `auto-insert-alist'%0a;; variable.%0a%0a;;; Code:%0a%0a(require 'autoinsert)%0a(auto-insert-mode t)%0a(setq auto-insert-query nil)%0a(setq auto-insert-directory (expand-file-name "~/.emacs.d/file-templates/"))%0a%0a;; Set the alist of file type and actions to take when encountered%0a;; Node format:%0a;;   ((file-type-regex . description) [template-name customizing-function])%0a;;%0a;; file-type-regex (regex) -- how to determine which template to use%0a;; description (string) -- file type description%0a;; template-name (string) -- file name (within `auto-insert-directory')%0a;; customizing-function (function) -- name of function that will run%0a;;    when the auto insert occurs. This is where you set up the variable%0a;;    substititutions.%0a%0a(add-to-list 'auto-insert-alist%0a	     '(("\\.[Cc][Pp][Pp]$" . "C++ Files") .%0a	       ["insert.cpp" auto-update-c-source-file]))%0a%0a(add-to-list 'auto-insert-alist%0a	     '(("\\.[Hh]$" . "C/C++ Header Files") .%0a	       ["insert.h" auto-update-header-file]))%0a%0a(add-to-list 'auto-insert-alist%0a	     '(("\\.[Cc]$" . "C files") .%0a	       ["insert.c" auto-update-c-source-file]))%0a%0a(add-to-list 'auto-insert-alist%0a	     '(("\\.[Ss][Hh]$" . "Shell Script") .%0a	       ["insert.sh" auto-update-other-source-file]))%0a%0a(add-to-list 'auto-insert-alist%0a	     '(("\\.[Pp][Hh][Pp][345]?$" . "PHP Script") .%0a	       ["insert.php" auto-update-other-source-file]))%0a%0a(add-to-list 'auto-insert-alist%0a	     '(("\\.[Pp][Ll]$" . "Perl Script") .%0a	       ["insert.pl" auto-update-other-source-file]))%0a%0a(add-to-list 'auto-insert-alist%0a	     '(("\\.[Cc][Ss][Ss]$" . "Cascading Style Sheet") .%0a		["insert.css" auto-update-other-source-file]))%0a%0a(add-to-list 'auto-insert-alist%0a	     '(("\\.[Ss]?[Hh][Tt][Mm][Ll]?$" . "HTML Page") .%0a		["insert.html" auto-update-other-source-file]))%0a%0a;(setq auto-insert 'other)%0a%0a%0a%0a;; Handle substitutions for .h files (used in C/C++)%0a;; function replaces the string '@@@' by the current file%0a;; name. You could use a similar approach to insert name and date into%0a;; your file.%0a(defun auto-update-header-file ()%0a  (save-excursion%0a    (while (search-forward "@@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match (upcase (file-name-nondirectory buffer-file-name)))%0a	(subst-char-in-region (point-min) (point-max) ?. ?_)%0a	))%0a    )%0a  )%0a%0a;; Handle substitutions for .c/.cpp files%0a(defun auto-update-c-source-file ()%0a  (save-excursion%0a    ;; Replace HHHH with file name sans suffix%0a    (while (search-forward "HHHH" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match (concat (file-name-sans-extension (file-name-nondirectory buffer-file-name)) ".h") t%0a		       )%0a	))%0a    )%0a  (save-excursion%0a    ;; Replace @@@ with file name%0a    (while (search-forward "@@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match (file-name-nondirectory buffer-file-name))%0a	))%0a    )%0a  (save-excursion%0a    ;; replace DDDD with today's date%0a    (while (search-forward "DDDD" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match "")%0a	(insert-today)%0a	))%0a    )%0a  )%0a%0a;; Handle substitutions for other types of files%0a;; Standard update to templates%0a;; Replaces the following strings:%0a;;  @@AUTHOR@@ -- user's full name%0a;;  @@AUTHOREMAIL@@ -- users email address%0a;;  @@FILENAMENS@@ -- file name without extension%0a;;  @@FILENAME@@ -- file name%0a;;  @@TODAY@@ -- today's date%0a;;  @@YEAR@@ -- current year%0a;;  @@ORGANIZATION@@ -- value of envar ORGANIZATION%0a(defun auto-update-other-source-file ()%0a  (save-excursion%0a    ;; Replace @@AUTHOR@@ with user's full name%0a    (while (search-forward "@@AUTHOR@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match user-full-name t)%0a	))%0a    )%0a  (save-excursion%0a    ;; Replace @@AUTHOREMAIL@@ with user's email address%0a    (while (search-forward "@@AUTHOREMAIL@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match user-mail-address t)%0a	))%0a    )%0a  (save-excursion%0a    ;; Replace @@FILENAMENS@@ with file name sans suffix%0a    (while (search-forward "@@FILENAMENS@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match (file-name-sans-extension (file-name-nondirectory buffer-file-name)) t)%0a	))%0a    )%0a  (save-excursion%0a    ;; Replace @@FILENAME@@ with file name%0a    (while (search-forward "@@FILENAME@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match (file-name-nondirectory buffer-file-name))%0a	))%0a    )%0a  (save-excursion%0a    ;; replace @@TODAY@@ with today's date%0a    (while (search-forward "@@TODAY@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match "")%0a	(insert-today)%0a	))%0a    )%0a  (save-excursion%0a    ;; replace @@YEAR@@ with today's date%0a    (while (search-forward "@@YEAR@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match "")%0a	(insert-year)%0a	))%0a    )%0a  (save-excursion%0a    ;; replace @@ORGANIZATION@@ with today's date%0a    (while (search-forward "@@ORGANIZATION@@" nil t)%0a      (save-restriction%0a	(narrow-to-region (match-beginning 0) (match-end 0))%0a	(replace-match "")%0a	(insert (getenv "ORGANIZATION"))%0a	))%0a    )%0a%0a%0a  )%0a(:sourceend:)%0a%0aA sample template looks like this:%0a%0a(:source lang=php header=insert.php linenum tabwidth=4:)%0a%3c?php%0a/**%0a *%0a * @@FILENAMENS@@%0a *%0a * Author: @@AUTHOR@@ %3c@@AUTHOREMAIL@@>%0a * Created: @@TODAY@@%0a * Copyright (c) @@YEAR@@ @@ORGANIZATION@@%0a *%0a */%0a%0a%0a/**%0a * DOC BLOCK%0a */%0a%0a(:sourceend:)%0a%0aThe @@auto-update-other-source-file@@ function takes care of%0asubstituting the appropriate values in the template, resulting in%0asomething like the following:%0a%0a(:source lang=php header=sample.php linenum tabwidth=4:)%0a%3c?php%0a/**%0a *%0a * sample%0a *%0a * Author: Tamara Temple %3ctamara@tamaratemple.com>%0a * Created: 2011/10/07%0a * Copyright (c) 2011 Tamara Temple Web Development%0a *%0a */%0a%0a%0a/**%0a * DOC BLOCK%0a */%0a(:sourceend:)%0a%0aCombined with YaSnippets, autoinsert is quite the gem!%0a%0a(:Summary:Automatically insert text when creating a new file in Emacs:)%0a(:Parent:(Technology.)Emacs:)%0a(:IncludeMe:[[(Technology.)Emacs]]:)%0a(:Categories:[[!Articles]]:)%0a(:Tags: emacs:)%0a(:tags-hide emacs :)%0a
time=1333980689
author:1333980689=tamara
csum:1333980689=move page from main
diff:1333980689:1317981781:=1c1,3%0a%3c [[#excerpt]]%0a---%0a> (:Summary:automatically insert text when creating a file:)(:Trail:[[Main/]] | [[Main/ComputerStuff]] | [[Main/SoftwareAndWebProgramming]] | %3c%3c|[[Main/Emacs]]|>>:)%0a> %25categories%25 '''Categories:''' [[!ComputerStuff]]%0a> %0a5,6c7%0a%3c [[#excerptend]]%0a%3c %0a---%0a> %0a15,16c16,17%0a%3c !!Extending auto insertion functions%0a%3c %0a---%0a> !!!Extending auto insertion functions%0a> %0a257,262c258,261%0a%3c (:Summary:Automatically insert text when creating a new file in Emacs:)%0a%3c (:Parent:(Technology.)Emacs:)%0a%3c (:IncludeMe:[[(Technology.)Emacs]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: emacs:)%0a%3c (:tags-hide emacs :)%0a---%0a> %0a> %0a> %0a> %25tags%25 '''Tags:''' (:tags emacs, editors, tools, text editors:)%0a
host:1333980689=127.0.0.1
author:1317981781=tamara
csum:1317981781=new page
diff:1317981781:1317981781:=1,261d0%0a%3c (:Summary:automatically insert text when creating a file:)(:Trail:[[Main/]] | [[Main/ComputerStuff]] | [[Main/SoftwareAndWebProgramming]] | %3c%3c|[[Main/Emacs]]|>>:)%0a%3c %25categories%25 '''Categories:''' [[!ComputerStuff]]%0a%3c %0a%3c autoinsert is a standard package included in the Emacs%0a%3c distribution. It provides a mechanism to automatically insert text%0a%3c into a newly created file.%0a%3c %0a%3c The autoinsert mechanism is based on matching a filename spec with a%0a%3c template, and possibly some code to tweak the contents of the template%0a%3c to the local situation.%0a%3c %0a%3c Autoinsert has some preexisting content, but is not enabled by%0a%3c default. To enable it, add @@(auto-insert-mode t)@@ to you @@.emacs@@%0a%3c file.%0a%3c %0a%3c !!!Extending auto insertion functions%0a%3c %0a%3c Autoinsert has a nifty feature that lets you specify an elisp function%0a%3c to execute on the buffer after the template has been inserted into the%0a%3c new file. This allows you to customize the inserted template to the%0a%3c file being created, such as adding comments including the file name,%0a%3c author, email, copyright, and such information.%0a%3c %0a%3c I've created a configuration file that i load in my @@.emacs@@ file:%0a%3c %0a%3c (:source lang=lisp header=conf-autoinsert.el linenum tabwidth=4:)%0a%3c ;; auto-insert stuff%0a%3c ;; From http://www.emacswiki.org/emacs/AutoInsertMode%0a%3c %0a%3c ;;; Commentary:%0a%3c %0a%3c ;; Provides for inserting standard file templates with variable%0a%3c ;; substitution based on the file's type (given by it's extention).%0a%3c ;; %0a%3c ;; New templates should go into the directory specified by %0a%3c ;; `auto-insert-directory' and added to the `auto-insert-alist'%0a%3c ;; variable.%0a%3c %0a%3c ;;; Code:%0a%3c %0a%3c (require 'autoinsert)%0a%3c (auto-insert-mode t)%0a%3c (setq auto-insert-query nil)%0a%3c (setq auto-insert-directory (expand-file-name "~/.emacs.d/file-templates/"))%0a%3c %0a%3c ;; Set the alist of file type and actions to take when encountered%0a%3c ;; Node format:%0a%3c ;;   ((file-type-regex . description) [template-name customizing-function])%0a%3c ;;%0a%3c ;; file-type-regex (regex) -- how to determine which template to use%0a%3c ;; description (string) -- file type description%0a%3c ;; template-name (string) -- file name (within `auto-insert-directory')%0a%3c ;; customizing-function (function) -- name of function that will run%0a%3c ;;    when the auto insert occurs. This is where you set up the variable%0a%3c ;;    substititutions.%0a%3c %0a%3c (add-to-list 'auto-insert-alist%0a%3c 	     '(("\\.[Cc][Pp][Pp]$" . "C++ Files") .%0a%3c 	       ["insert.cpp" auto-update-c-source-file]))%0a%3c %0a%3c (add-to-list 'auto-insert-alist%0a%3c 	     '(("\\.[Hh]$" . "C/C++ Header Files") .%0a%3c 	       ["insert.h" auto-update-header-file]))%0a%3c %0a%3c (add-to-list 'auto-insert-alist%0a%3c 	     '(("\\.[Cc]$" . "C files") .%0a%3c 	       ["insert.c" auto-update-c-source-file]))%0a%3c %0a%3c (add-to-list 'auto-insert-alist%0a%3c 	     '(("\\.[Ss][Hh]$" . "Shell Script") .%0a%3c 	       ["insert.sh" auto-update-other-source-file]))%0a%3c %0a%3c (add-to-list 'auto-insert-alist%0a%3c 	     '(("\\.[Pp][Hh][Pp][345]?$" . "PHP Script") .%0a%3c 	       ["insert.php" auto-update-other-source-file]))%0a%3c %0a%3c (add-to-list 'auto-insert-alist%0a%3c 	     '(("\\.[Pp][Ll]$" . "Perl Script") .%0a%3c 	       ["insert.pl" auto-update-other-source-file]))%0a%3c %0a%3c (add-to-list 'auto-insert-alist%0a%3c 	     '(("\\.[Cc][Ss][Ss]$" . "Cascading Style Sheet") .%0a%3c 		["insert.css" auto-update-other-source-file]))%0a%3c %0a%3c (add-to-list 'auto-insert-alist%0a%3c 	     '(("\\.[Ss]?[Hh][Tt][Mm][Ll]?$" . "HTML Page") .%0a%3c 		["insert.html" auto-update-other-source-file]))%0a%3c %0a%3c ;(setq auto-insert 'other)%0a%3c %0a%3c %0a%3c %0a%3c ;; Handle substitutions for .h files (used in C/C++)%0a%3c ;; function replaces the string '@@@' by the current file%0a%3c ;; name. You could use a similar approach to insert name and date into%0a%3c ;; your file.%0a%3c (defun auto-update-header-file ()%0a%3c   (save-excursion%0a%3c     (while (search-forward "@@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match (upcase (file-name-nondirectory buffer-file-name)))%0a%3c 	(subst-char-in-region (point-min) (point-max) ?. ?_)%0a%3c 	))%0a%3c     )%0a%3c   )%0a%3c %0a%3c ;; Handle substitutions for .c/.cpp files%0a%3c (defun auto-update-c-source-file ()%0a%3c   (save-excursion%0a%3c     ;; Replace HHHH with file name sans suffix%0a%3c     (while (search-forward "HHHH" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match (concat (file-name-sans-extension (file-name-nondirectory buffer-file-name)) ".h") t%0a%3c 		       )%0a%3c 	))%0a%3c     )%0a%3c   (save-excursion%0a%3c     ;; Replace @@@ with file name%0a%3c     (while (search-forward "@@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match (file-name-nondirectory buffer-file-name))%0a%3c 	))%0a%3c     )%0a%3c   (save-excursion%0a%3c     ;; replace DDDD with today's date%0a%3c     (while (search-forward "DDDD" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match "")%0a%3c 	(insert-today)%0a%3c 	))%0a%3c     )%0a%3c   )%0a%3c %0a%3c ;; Handle substitutions for other types of files%0a%3c ;; Standard update to templates%0a%3c ;; Replaces the following strings:%0a%3c ;;  @@AUTHOR@@ -- user's full name%0a%3c ;;  @@AUTHOREMAIL@@ -- users email address%0a%3c ;;  @@FILENAMENS@@ -- file name without extension%0a%3c ;;  @@FILENAME@@ -- file name%0a%3c ;;  @@TODAY@@ -- today's date%0a%3c ;;  @@YEAR@@ -- current year%0a%3c ;;  @@ORGANIZATION@@ -- value of envar ORGANIZATION%0a%3c (defun auto-update-other-source-file ()%0a%3c   (save-excursion%0a%3c     ;; Replace @@AUTHOR@@ with user's full name%0a%3c     (while (search-forward "@@AUTHOR@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match user-full-name t)%0a%3c 	))%0a%3c     )%0a%3c   (save-excursion%0a%3c     ;; Replace @@AUTHOREMAIL@@ with user's email address%0a%3c     (while (search-forward "@@AUTHOREMAIL@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match user-mail-address t)%0a%3c 	))%0a%3c     )%0a%3c   (save-excursion%0a%3c     ;; Replace @@FILENAMENS@@ with file name sans suffix%0a%3c     (while (search-forward "@@FILENAMENS@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match (file-name-sans-extension (file-name-nondirectory buffer-file-name)) t)%0a%3c 	))%0a%3c     )%0a%3c   (save-excursion%0a%3c     ;; Replace @@FILENAME@@ with file name%0a%3c     (while (search-forward "@@FILENAME@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match (file-name-nondirectory buffer-file-name))%0a%3c 	))%0a%3c     )%0a%3c   (save-excursion%0a%3c     ;; replace @@TODAY@@ with today's date%0a%3c     (while (search-forward "@@TODAY@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match "")%0a%3c 	(insert-today)%0a%3c 	))%0a%3c     )%0a%3c   (save-excursion%0a%3c     ;; replace @@YEAR@@ with today's date%0a%3c     (while (search-forward "@@YEAR@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match "")%0a%3c 	(insert-year)%0a%3c 	))%0a%3c     )%0a%3c   (save-excursion%0a%3c     ;; replace @@ORGANIZATION@@ with today's date%0a%3c     (while (search-forward "@@ORGANIZATION@@" nil t)%0a%3c       (save-restriction%0a%3c 	(narrow-to-region (match-beginning 0) (match-end 0))%0a%3c 	(replace-match "")%0a%3c 	(insert (getenv "ORGANIZATION"))%0a%3c 	))%0a%3c     )%0a%3c %0a%3c %0a%3c   )%0a%3c (:sourceend:)%0a%3c %0a%3c A sample template looks like this:%0a%3c %0a%3c (:source lang=php header=insert.php linenum tabwidth=4:)%0a%3c %3c?php%0a%3c /**%0a%3c  *%0a%3c  * @@FILENAMENS@@%0a%3c  *%0a%3c  * Author: @@AUTHOR@@ %3c@@AUTHOREMAIL@@>%0a%3c  * Created: @@TODAY@@%0a%3c  * Copyright (c) @@YEAR@@ @@ORGANIZATION@@%0a%3c  *%0a%3c  */%0a%3c %0a%3c %0a%3c /**%0a%3c  * DOC BLOCK%0a%3c  */%0a%3c %0a%3c (:sourceend:)%0a%3c %0a%3c The @@auto-update-other-source-file@@ function takes care of%0a%3c substituting the appropriate values in the template, resulting in%0a%3c something like the following:%0a%3c %0a%3c (:source lang=php header=sample.php linenum tabwidth=4:)%0a%3c %3c?php%0a%3c /**%0a%3c  *%0a%3c  * sample%0a%3c  *%0a%3c  * Author: Tamara Temple %3ctamara@tamaratemple.com>%0a%3c  * Created: 2011/10/07%0a%3c  * Copyright (c) 2011 Tamara Temple Web Development%0a%3c  *%0a%3c  */%0a%3c %0a%3c %0a%3c /**%0a%3c  * DOC BLOCK%0a%3c  */%0a%3c (:sourceend:)%0a%3c %0a%3c Combined with YaSnippets, autoinsert is quite the gem!%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %25tags%25 '''Tags:''' (:tags emacs, editors, tools, text editors:)%0a
host:1317981781=71.63.211.0
