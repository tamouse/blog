version=pmwiki-2.2.56 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=
ctime=1365687313
host=71.63.215.130
name=Technology.HowToChangeTheRailsLoggerFormatter
rev=7
targets=Technology.HowToChangeTheRailsLoggerFormatter,Technology.ActiveSupport,Technology.RubyOnRails,Category.HowTos,Category.Ruby,Category.Rails,Category.Technology
text=[[#excerpt]]%0aStarting in Rails 3.2, it is possible to change the formatter used for the @@Rails.logger@@, but it requires a bit of metaprogramming that depends on understanding of the way @@Rails.logger@@ is created. '''Update:''' In Rails 4.0, it got even ''easier!''%0a[[#excerptend]]%0a%0a!! Rails 4%0a%0aThis is the easiest implementation yet, as Rails 4 ActiveSupport::Logger is a direct inheritor of the famed Logger module.%0a%0aSetting the formatter becomes a simple assignment of the formatter proc:%0a%0a(:source lang=ruby linenum tabwidth=2  :)%0aRails.logger.formatter = proc  do |sev, ts, prog, msg|%0a  "#{ts.strftime("%25Y-%25m-%25dT%25H:%25M:%25S")} #{sev} [#{prog}] #{msg}"%0aend%0a(:sourceend:)%0a%0aPut this in @@config/initializers/@@ and you should be good to go!%0a%0a%0a!! Background%0a%0a>>warning%3c%3c%0a''Note'': This depends on Rails 3.2 implementation of [@ActiveSupport::BufferedLogger@].%0a>>%3c%3c%0a%0aStarting in Rails 3.2, Rails.logger is an instance of [@ActiveSupport::TaggedLogging@], which in turn pulls in [@ActiveSupport::BufferedLogger@]. Neither of these modules permits directly setting the formatter for log messages. This initializer reaches into [@ActiveSupport::TaggedLogging@] to modify the [@ @logger@] instance variable, which is an instance of [@ActiveSupport::BufferedLogger@]. [@ActiveSupport::BufferedLogger@] contains an instance variable, [@@log@], which is an instance of [@Logger@]. With that information, we perform a nested instance_eval operation to set the formatter.%0a%0a!! Implementation%0a%0aCreate a file in [@config/initializers/@] called [@logger.rb@]:%0a%0a(:source lang=ruby linenum header="Rails.root/config/initializers/logger.rb":)%0aRails.logger.instance_eval(%25q{@logger.instance_eval(%25q{@log.formatter= proc {|s,d,p,m| "#{s} #{d} #{m}\n" }})})%0a(:sourceend:)%0a%0aWhat we're doing here is first reaching inside the [@Rails.logger@] object, and evaluating a bit of Ruby code on the [@@logger@] instance variable inside [@Rails.logger@].%0a%0aUpon that instance variable, which is an [@ActiveSupport::BufferedLogger@] instance, we reach further inside and evaluate another bit of Ruby code on the [@@log@] instance variable, which is an instance of [@Logger@], to set the logging formatter, which is an anonymous procedure that returns the formatted string as we want it.%0a%0a!! Pre-Rails 3.2%0a%0aIn 3.1, there is no [@ActiveSupport::TaggedLogging@] module, and Rails.logger is an instance of [@ActiveSupport::BufferedLogger@] instead. However, the 3.1 version does '''not''' use [@Logger@], and instead opts for doing it's own thing.%0a%0aIt is possible to change the Rails.logger in 3.1 by passing in a [@Logger@] instance to [@ActiveSupport::BufferedLogger.new@], giving you the ability to set the formatter. In [@Rails.app/config/initializers/logging.rb@], put:%0a%0a(:source lang=ruby linenum header="Rails.root/config/initializers/logging.rb":)%0arequire 'logger'%0a%0aMyApp::Application::Logger = Logger.new(Rails.root.join("log",Rails.env+".log"))%0a%0aRails.logger.instance_eval(%25Q{@log=ActiveSupport::BufferedLogger.new(#{MyApp::Application::Logger})})%0aRails.logger.instance_eval(%25q{@log.formatter= proc {|s,d,p,t| "#{s} #{d} #{m}\n" }})%0a(:sourceend:)%0a%0aremoving one level of [@instance_eval@]%0a%0a!! References%0a%0a!!! 4.0:%0a* https://github.com/rails/rails/blob/4-0-stable/activesupport/lib/active_support/logger.rb#L6%0a%0a!!! 3.2:%0a* https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/buffered_logger.rb%0a* https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/tagged_logging.rb%0a%0a!!! 3.1:%0a* https://github.com/rails/rails/blob/3-1-stable/activesupport/lib/active_support/buffered_logger.rb%0a%0a%0a>>comment%3c%3c%0aSummary:The default Rails.logger format in Rails 3.2 can be changed by adding a bit of metaprogramming in an initializer. %0aParent:(Technology.)RubyOnRails%0aincludeme:[[(Technology.)RubyOnRails]]%0aCategories:[[!HowTos]], [[!Ruby]], [[!Rails]], [[!Technology]]%0aTags: ruby, rails, logging, howtos, metaprogramming%0a(:tags-hide ruby, rails, logging, howtos, metaprogramming:)%0a>>%3c%3c
time=1383576370
author:1383576370=tamara
diff:1383576370:1383576316:=60c60%0a%3c * https://github.com/rails/rails/blob/4-0-stable/activesupport/lib/active_support/logger.rb#L6%0a---%0a> * https://github.com/rails/rails/blob/95f5f8167ff86550d7fa9f5f7419cc9b38ef9704/activesupport/lib/active_support/logger.rb#L6%0a
host:1383576370=71.63.215.130
author:1383576316=tamara
diff:1383576316:1383576207:=59,61d58%0a%3c !!! 4.0:%0a%3c * https://github.com/rails/rails/blob/95f5f8167ff86550d7fa9f5f7419cc9b38ef9704/activesupport/lib/active_support/logger.rb#L6%0a%3c %0a77c74%0a%3c >>%3c%3c%0a\ No newline at end of file%0a---%0a> >>%3c%3c%0a
host:1383576316=71.63.215.130
author:1383576207=tamara
csum:1383576207=Updated for Rails 4.0!
diff:1383576207:1365693269:=2c2%0a%3c Starting in Rails 3.2, it is possible to change the formatter used for the @@Rails.logger@@, but it requires a bit of metaprogramming that depends on understanding of the way @@Rails.logger@@ is created. '''Update:''' In Rails 4.0, it got even ''easier!''%0a---%0a> Starting in Rails 3.2, it is possible to change the formatter used for the @@Rails.logger@@, but it requires a bit of metaprogramming that depends on understanding of the way @@Rails.logger@@ is created.%0a4,17d3%0a%3c %0a%3c !! Rails 4%0a%3c %0a%3c This is the easiest implementation yet, as Rails 4 ActiveSupport::Logger is a direct inheritor of the famed Logger module.%0a%3c %0a%3c Setting the formatter becomes a simple assignment of the formatter proc:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2  :)%0a%3c Rails.logger.formatter = proc  do |sev, ts, prog, msg|%0a%3c   "#{ts.strftime("%25Y-%25m-%25dT%25H:%25M:%25S")} #{sev} [#{prog}] #{msg}"%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c Put this in @@config/initializers/@@ and you should be good to go!%0a
host:1383576207=71.63.215.130
author:1365693269=tamara
csum:1365693269=add some info for 3.1
diff:1365693269:1365691131:=12,13c12,13%0a%3c Starting in Rails 3.2, Rails.logger is an instance of [@ActiveSupport::TaggedLogging@], which in turn pulls in [@ActiveSupport::BufferedLogger@]. Neither of these modules permits directly setting the formatter for log messages. This initializer reaches into [@ActiveSupport::TaggedLogging@] to modify the [@ @logger@] instance variable, which is an instance of [@ActiveSupport::BufferedLogger@]. [@ActiveSupport::BufferedLogger@] contains an instance variable, [@@log@], which is an instance of [@Logger@]. With that information, we perform a nested instance_eval operation to set the formatter.%0a%3c %0a---%0a> Starting in Rails 3.2, Rails.logger is an instance of [@ActiveSupport::TaggedLogging@], which in turn pulls in [@ActiveSupport::BufferedLogger@]. Neither of these modules permits directly setting the formatter for log messages. This initializer reaches into [@ActiveSupport::TaggedLogging@] to modify the [@\@logger@] instance variable, which is an instance of [@ActiveSupport::BufferedLogger@]. [@ActiveSupport::BufferedLogger@] contains an instance variable, [@\@log@], which is an instance of [@Logger@]. With that information, we perform a nested instance_eval operation to set the formatter.%0a> %0a22,50c22,24%0a%3c What we're doing here is first reaching inside the [@Rails.logger@] object, and evaluating a bit of Ruby code on the [@@logger@] instance variable inside [@Rails.logger@].%0a%3c %0a%3c Upon that instance variable, which is an [@ActiveSupport::BufferedLogger@] instance, we reach further inside and evaluate another bit of Ruby code on the [@@log@] instance variable, which is an instance of [@Logger@], to set the logging formatter, which is an anonymous procedure that returns the formatted string as we want it.%0a%3c %0a%3c !! Pre-Rails 3.2%0a%3c %0a%3c In 3.1, there is no [@ActiveSupport::TaggedLogging@] module, and Rails.logger is an instance of [@ActiveSupport::BufferedLogger@] instead. However, the 3.1 version does '''not''' use [@Logger@], and instead opts for doing it's own thing.%0a%3c %0a%3c It is possible to change the Rails.logger in 3.1 by passing in a [@Logger@] instance to [@ActiveSupport::BufferedLogger.new@], giving you the ability to set the formatter. In [@Rails.app/config/initializers/logging.rb@], put:%0a%3c %0a%3c (:source lang=ruby linenum header="Rails.root/config/initializers/logging.rb":)%0a%3c require 'logger'%0a%3c %0a%3c MyApp::Application::Logger = Logger.new(Rails.root.join("log",Rails.env+".log"))%0a%3c %0a%3c Rails.logger.instance_eval(%25Q{@log=ActiveSupport::BufferedLogger.new(#{MyApp::Application::Logger})})%0a%3c Rails.logger.instance_eval(%25q{@log.formatter= proc {|s,d,p,t| "#{s} #{d} #{m}\n" }})%0a%3c (:sourceend:)%0a%3c %0a%3c removing one level of [@instance_eval@]%0a%3c %0a%3c !! References%0a%3c %0a%3c !!! 3.2:%0a%3c * https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/buffered_logger.rb%0a%3c * https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/tagged_logging.rb%0a%3c %0a%3c !!! 3.1:%0a%3c * https://github.com/rails/rails/blob/3-1-stable/activesupport/lib/active_support/buffered_logger.rb%0a---%0a> What we're doing here is first reaching inside the [@Rails.logger@] object, and evaluating a bit of Ruby code on the [@\@logger@] instance variable inside [@Rails.logger@].%0a> %0a> Upon that instance variable, which is an [@ActiveSupport::BufferedLogger@] instance, we reach further inside and evaluate another bit of Ruby code on the [@\@log@] instance variable, which is an instance of [@Logger@], to set the logging formatter, which is an anonymous procedure that returns the formatted string as we want it.%0a
host:1365693269=71.63.215.130
author:1365691131=tamara
diff:1365691131:1365687390:=8c8%0a%3c >>warning%3c%3c%0a---%0a> >>important%3c%3c%0a
host:1365691131=71.63.215.130
author:1365687390=tamara
diff:1365687390:1365687313:=29,30c29,30%0a%3c Parent:(Technology.)RubyOnRails%0a%3c includeme:[[(Technology.)RubyOnRails]]%0a---%0a> Parent:(Technology.)Rails%0a> includeme:[[(Technology.)Rails]]%0a
host:1365687390=71.63.215.130
author:1365687313=tamara
diff:1365687313:1365687313:=1,34d0%0a%3c [[#excerpt]]%0a%3c Starting in Rails 3.2, it is possible to change the formatter used for the @@Rails.logger@@, but it requires a bit of metaprogramming that depends on understanding of the way @@Rails.logger@@ is created.%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a%3c !! Background%0a%3c %0a%3c >>important%3c%3c%0a%3c ''Note'': This depends on Rails 3.2 implementation of [@ActiveSupport::BufferedLogger@].%0a%3c >>%3c%3c%0a%3c %0a%3c Starting in Rails 3.2, Rails.logger is an instance of [@ActiveSupport::TaggedLogging@], which in turn pulls in [@ActiveSupport::BufferedLogger@]. Neither of these modules permits directly setting the formatter for log messages. This initializer reaches into [@ActiveSupport::TaggedLogging@] to modify the [@\@logger@] instance variable, which is an instance of [@ActiveSupport::BufferedLogger@]. [@ActiveSupport::BufferedLogger@] contains an instance variable, [@\@log@], which is an instance of [@Logger@]. With that information, we perform a nested instance_eval operation to set the formatter.%0a%3c %0a%3c !! Implementation%0a%3c %0a%3c Create a file in [@config/initializers/@] called [@logger.rb@]:%0a%3c %0a%3c (:source lang=ruby linenum header="Rails.root/config/initializers/logger.rb":)%0a%3c Rails.logger.instance_eval(%25q{@logger.instance_eval(%25q{@log.formatter= proc {|s,d,p,m| "#{s} #{d} #{m}\n" }})})%0a%3c (:sourceend:)%0a%3c %0a%3c What we're doing here is first reaching inside the [@Rails.logger@] object, and evaluating a bit of Ruby code on the [@\@logger@] instance variable inside [@Rails.logger@].%0a%3c %0a%3c Upon that instance variable, which is an [@ActiveSupport::BufferedLogger@] instance, we reach further inside and evaluate another bit of Ruby code on the [@\@log@] instance variable, which is an instance of [@Logger@], to set the logging formatter, which is an anonymous procedure that returns the formatted string as we want it.%0a%3c %0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:The default Rails.logger format in Rails 3.2 can be changed by adding a bit of metaprogramming in an initializer. %0a%3c Parent:(Technology.)Rails%0a%3c includeme:[[(Technology.)Rails]]%0a%3c Categories:[[!HowTos]], [[!Ruby]], [[!Rails]], [[!Technology]]%0a%3c Tags: ruby, rails, logging, howtos, metaprogramming%0a%3c (:tags-hide ruby, rails, logging, howtos, metaprogramming:)%0a%3c >>%3c%3c%0a
host:1365687313=71.63.215.130
