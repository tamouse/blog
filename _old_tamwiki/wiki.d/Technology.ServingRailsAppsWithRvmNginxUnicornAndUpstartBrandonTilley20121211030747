version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.19 (KHTML, like Gecko) Ubuntu/11.10 Chromium/18.0.1025.168 Chrome/18.0.1025.168 Safari/535.19
author=tamara
charset=ISO-8859-1
csum=Page moved to Technology.ServingRailsAppsWithRvmNginxUnicornAndUpstartBrandonTilley20121211030747 from SavedArticles.ServingRailsAppsWithRvmNginxUnicornAndUpstartBrandonTilley20121211030747
ctime=1355217659
host=71.63.215.130
name=Technology.ServingRailsAppsWithRvmNginxUnicornAndUpstartBrandonTilley20121211030747
rev=2
targets=Technology.ServingRailsAppsWithRvmNginxUnicornAndUpstartBrandonTilley20121211030747,Technology.RubyOnRails,Category.HowTos,Category.Saved
text=(:nolinkwikiwords:)%0a>>quote%3c%3c%0a! Serving Rails Apps with RVM, Nginx, Unicorn and Upstart%0a%0a* Posted Saturday, January 29, 2011%0a* [[http://brandontilley.com | Brandon Tilley.com]]%0a%0a%0aEver since reading [[https://github.com/blog/517-unicorn | GitHub&rsquo;s blog post on Unicorn]], I&rsquo;ve been interested in trying it out. This post will document the process I used to get Unicorn serving a Rails application behind Nginx, with RVM&nbsp;managing Ruby. If you&rsquo;ve read GitHub&rsquo;s post, some of the config will look very familiar. Ideally, though, you should be able to follow this post from start to finish and have a working setup going.%0a%0a! Introduction%0a%0aI installed this setup on Ubuntu 10.04 LTS Server Edition, 64-bit. You should be able to follow along pretty well on any sane system; that being said, I do use Upstart to manage the services toward the end of the guide. If you don&rsquo;t use Upstart, you will need to substitute in your own SysVinit scripts (or scripts for whatever you use instead).%0a%0aIn a few listings, I use curl with Gist URLs to fetch the contents of files; the contents of these files are shown below the shell commands, for reference.%0a%0a! Installing RVM%0a%0aSince we&rsquo;ll use RVM to manage our Rubies and gemsets on the server, we&rsquo;ll start with a server-wide install of RVM. We&rsquo;ll start out by installing curl and git, if necessary, then RVM, and finally the other packages RVM asks us to install. (Be sure to pay attention to these; you can view them again via @@rvm notes@@. You may need to install additional packages for your distro of Linux or for the Rubies you wish to use). I&rsquo;m using Ruby 1.9.2-p136 here.%0a%0aWe&rsquo;ll also take care to add the current user to the &lsquo;rvm&rsquo; group. Finally, we&rsquo;ll create a user called &lsquo;unicorn&rsquo; to own our test application, later.%0a%0a(:source lang=bash:)%0a# Install RVM and dependencies%0asudo aptitude install curl git-core%0asudo bash %3c %3c( curl -L http://bit.ly/rvm-install-system-wide )%0asudo aptitude install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev%0asudo adduser `whoami` rvm%0aecho 'source /usr/local/lib/rvm' >> ~/.bashrc%0a# Set up users and groups%0asudo useradd --home /var/www --create-home --groups rvm unicorn && sudo chmod g+w /var/www%0asudo adduser `whoami` unicorn%0a#%0a# >> Log out and back in to SSH, open a new shell, etc. -- something to reload your environment%0a#%0a# Install Ruby 1.9.2-p136 and make it default%0arvm install ruby-1.9.2-p136%0a# Make a sandwich while you wait (or have someone make you one: http://xkcd.com/149/)%0arvm use ruby-1.9.2-p136 --default%0a(:sourceend:)%0a%0a%0a! Installing and Configuring Nginx%0a%0aFor simplicity&rsquo;s sake, we&rsquo;ll be using Nginx from APT. To make sure we&rsquo;re up to date, we&rsquo;ll use Nginx&rsquo;s PPA.%0a%0aYou can see in the configuration file that I&rsquo;ve jumped the gun and included the location of the shared socket we&rsquo;ll use with our Unicorn application.%0a%0a(:source lang=bash:)%0a# Install Nginx%0asudo bash -c 'echo "deb http://ppa.launchpad.net/nginx/stable/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/nginx-stable-$(lsb_release -cs).list'%0asudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C300EE8C && sudo aptitude update%0asudo aptitude install nginx%0asudo bash -c 'curl -L https://gist.github.com/raw/802568/3a62636146eb2615cf42081b2574e8602d199658/nginx.conf > /etc/nginx/nginx.conf'%0a(:sourceend:)%0a%0a(:source lang=text header="/etc/nginx/nginx.conf":)%0aworker_processes 1;%0auser www-data www-data;%0a%0apid /tmp/nginx.pid;%0aerror_log /tmp/nginx.error.log;%0a%0aevents {%0a  worker_connections 1024;%0a  accept_mutex off;%0a}%0a%0ahttp {%0a  include mime.types;%0a  default_type application/octet-stream;%0a  access_log /tmp/nginx.access.log combined;%0a%0a  sendfile on;%0a  tcp_nopush on;%0a  tcp_nodelay off;%0a%0a  gzip on;%0a  gzip_http_version 1.0;%0a  gzip_proxied any;%0a  gzip_min_length 500;%0a  gzip_disable "MSIE [1-6]\.";%0a  gzip_types text/plain text/html text/xml text/css%0a             text/comma-separated-values%0a             text/javascript application/x-javascript%0a             application/atom+xml;%0a%0a  upstream unicorn_test {%0a    server unix:/var/www/test_app/tmp/sockets/unicorn.sock fail_timeout=0;%0a  }%0a%0a  server {%0a    listen 80;%0a    client_max_body_size 4G;%0a    server_name _;%0a%0a    keepalive_timeout 5;%0a%0a    root /var/www/test_app/public;%0a%0a    location / {%0a      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;%0a      proxy_set_header Host $http_host;%0a      proxy_redirect off;%0a%0a      if (!-f $request_filename) {%0a        proxy_pass http://unicorn_test;%0a        break;%0a      }%0a    }%0a%0a    error_page 500 502 503 504 /500.html;%0a    location = /500.html {%0a      root /var/www/test_app/public;%0a    }%0a  }%0a}%0a(:sourceend:)%0a%0a%0a! Configuring Upstart for Nginx%0a%0aIf you don&rsquo;t use Upstart, or you don&rsquo;t want to use Upstart, feel free to skip this section. By default, you can start Nginx with @@sudo /etc/init.d/nginx start@@.%0a%0a(:source lang=bash:)%0asudo rm /etc/init.d/nginx%0afor file in $(ls /etc/rc*/*nginx); do sudo rm $file; done%0asudo bash -c 'curl -L https://gist.github.com/raw/802568/e210f8754abdf137027daeb4c41db8cc301b36ad/nginx.conf > /etc/init/nginx.conf'%0asudo start nginx%0a(:sourceend:)%0a%0a(:source lang=text header="/etc/init/nginx.conf:)%0adescription "nginx http daemon"%0a%0astart on runlevel [2]%0astop on runlevel [016]%0a%0aconsole owner%0a%0aexec /usr/sbin/nginx -c /etc/nginx/nginx.conf -g "daemon off;"%0a%0arespawn%0a(:sourceend:)%0a%0a%0a! Creating a Sample Rails Application%0a%0aNow we&rsquo;ll create a test Rails application in /var/www/test_app. We&rsquo;ll use a gemset called rails_app to demonstrate Unicorn&rsquo;s ability to figure out which gemset it should use for our application (for more details on this, check out step four in [[http://brandontilley.com:80/2011/01/29/rvm-unicorn-and-upstart.html | my earlier post on Unicorn and Upstart]]). For this to work, we&rsquo;ll also create an RVM wrapper for Unicorn. And, of course, don&rsquo;t forget your config/unicorn.rb file.%0a%0aAgain, we&rsquo;ll use Upstart to start and manage our Unicorn process, but you can use whatever you&rsquo;d like. If you just want to test it out, try running @@unicorn -c /var/www/test_app/config/unicorn.rb@@ from the &lsquo;global&rsquo; gemset.%0a%0a(:source lang=bash:)%0a# Install Unicorn in the global gemset, and create a wrapper (yo yo yo in the hooouuuuuse!?)%0arvm use ruby-1.9.2-p136@global%0agem install unicorn --no-ri --no-rdoc%0arvm wrapper ruby-1.9.2-p136 r192 unicorn%0a# Create and switch to a new gemset%0arvm gemset create rails_app && rvm gemset use rails_app%0agem install rails --no-ri --no-rdoc%0a# Create a sample Rails application%0acd /var/www%0arails new test_app%0aecho 'rvm use ruby-1.9.2-p136@rails_app --create' > test_app/.rvmrc%0acd test_app%0a#%0a# >> Accept the .rvmrc warning%0a#%0aecho "gem 'unicorn'" >> Gemfile && bundle install%0acurl -L https://gist.github.com/raw/802568/998ac7c702e43d600f94fc3ee63ea05179315a0d/unicorn.rb > config/unicorn.rb%0asudo bash -c 'curl -L https://gist.github.com/raw/802568/ee3f5f320c34ec2e1d1b55521776d7dccd9140d4/test_app.conf > /etc/init/test_app.conf'%0asudo start test_app%0a(:sourceend:)%0a%0a(:source lang=text header="/etc/init/test_app.conf":)%0adescription "Test rails application"%0a%0astart on runlevel [2]%0astop on runlevel [016]%0a%0aconsole owner%0a%0aexec /usr/local/rvm/bin/r192_unicorn -c /var/www/test_app/config/unicorn.rb%0a%0arespawn%0a(:sourceend:)%0a%0a(:source lang=ruby header="/var/www/test_app/config/unicorn.rb":)%0aAPP_ROOT = File.expand_path(File.dirname(File.dirname(__FILE__)))%0a%0aif ENV['MY_RUBY_HOME'] && ENV['MY_RUBY_HOME'].include?('rvm')%0a  begin%0a    rvm_path = File.dirname(File.dirname(ENV['MY_RUBY_HOME']))%0a    rvm_lib_path = File.join(rvm_path, 'lib')%0a    $LOAD_PATH.unshift rvm_lib_path%0a    require 'rvm'%0a    RVM.use_from_path! APP_ROOT%0a  rescue LoadError%0a    raise "RVM ruby lib is currently unavailable."%0a  end%0aend%0a%0aENV['BUNDLE_GEMFILE'] = File.expand_path('../Gemfile', File.dirname(__FILE__))%0arequire 'bundler/setup'%0a%0aworker_processes 4%0aworking_directory APP_ROOT%0a%0apreload_app true%0a%0atimeout 30%0a%0alisten APP_ROOT + "/tmp/sockets/unicorn.sock", :backlog => 64%0a%0apid APP_ROOT + "/tmp/pids/unicorn.pid"%0a%0astderr_path APP_ROOT + "/log/unicorn.stderr.log"%0astdout_path APP_ROOT + "/log/unicorn.stdout.log"%0a%0abefore_fork do |server, worker|%0a  defined?(ActiveRecord::Base) && ActiveRecord::Base.connection.disconnect!%0a%0a  old_pid = RAILS_ROOT + '/tmp/pids/unicorn.pid.oldbin'%0a  if File.exists?(old_pid) && server.pid != old_pid%0a    begin%0a      Process.kill("QUIT", File.read(old_pid).to_i)%0a    rescue Errno::ENOENT, Errno::ESRCH%0a      puts "Old master alerady dead"%0a    end%0a  end%0aend%0a%0aafter_fork do |server, worker|%0a  defined?(ActiveRecord::Base) && ActiveRecord::Base.establish_connection%0aend%0a(:sourceend:)%0a%0a%0a! Profit!%0a%0aAnd that&rsquo;s that! Upstart will manage both Nginx and Unicorn (although either could benefit from something like Monit or God, but I&rsquo;ll leave that as an exercise for the reader and/or a future blog post).%0a(:linkwikiwords:)%0a>>%3c%3c%0a%0a>>comment%3c%3c%0aSummary: Setting up a rails application for deployment%0aTags: rails, applicaitons, web development, deployment, rvm, nginx, unicorn, upstart%0a(:tags-hide rails, applicaitons, web development, deployment, rvm, nginx, unicorn, upstart:)%0a(:title Serving Rails Apps with RVM, Nginx, Unicorn and Upstart | Brandon Tilley:)%0aSource: http://brandontilley.com/2011/01/29/serving-rails-apps-with-rvm-nginx-unicorn-and-upstart.html%0aParent: (Technology.)RubyOnRails%0aincludeme:[[Technology.RubyOnRails]]%0aCategories:[[!HowTos]], [[!Saved]]%0a>>%3c%3c%0a%0aPage saved at: Tue, 11 Dec 2012 03:07:47 -0600%0a%0a
time=1355217672
title=Serving Rails Apps with RVM, Nginx, Unicorn and Upstart | Brandon Tilley
author:1355217672=tamara
csum:1355217672=Page moved to Technology.ServingRailsAppsWithRvmNginxUnicornAndUpstartBrandonTilley20121211030747 from SavedArticles.ServingRailsAppsWithRvmNginxUnicornAndUpstartBrandonTilley20121211030747
diff:1355217672:1355217659:=
host:1355217672=71.63.215.130
author:1355217659=tamara
csum:1355217659=new saved page
diff:1355217659:1355217659:=1,256d0%0a%3c (:nolinkwikiwords:)%0a%3c >>quote%3c%3c%0a%3c ! Serving Rails Apps with RVM, Nginx, Unicorn and Upstart%0a%3c %0a%3c * Posted Saturday, January 29, 2011%0a%3c * [[http://brandontilley.com | Brandon Tilley.com]]%0a%3c %0a%3c %0a%3c Ever since reading [[https://github.com/blog/517-unicorn | GitHub&rsquo;s blog post on Unicorn]], I&rsquo;ve been interested in trying it out. This post will document the process I used to get Unicorn serving a Rails application behind Nginx, with RVM&nbsp;managing Ruby. If you&rsquo;ve read GitHub&rsquo;s post, some of the config will look very familiar. Ideally, though, you should be able to follow this post from start to finish and have a working setup going.%0a%3c %0a%3c ! Introduction%0a%3c %0a%3c I installed this setup on Ubuntu 10.04 LTS Server Edition, 64-bit. You should be able to follow along pretty well on any sane system; that being said, I do use Upstart to manage the services toward the end of the guide. If you don&rsquo;t use Upstart, you will need to substitute in your own SysVinit scripts (or scripts for whatever you use instead).%0a%3c %0a%3c In a few listings, I use curl with Gist URLs to fetch the contents of files; the contents of these files are shown below the shell commands, for reference.%0a%3c %0a%3c ! Installing RVM%0a%3c %0a%3c Since we&rsquo;ll use RVM to manage our Rubies and gemsets on the server, we&rsquo;ll start with a server-wide install of RVM. We&rsquo;ll start out by installing curl and git, if necessary, then RVM, and finally the other packages RVM asks us to install. (Be sure to pay attention to these; you can view them again via @@rvm notes@@. You may need to install additional packages for your distro of Linux or for the Rubies you wish to use). I&rsquo;m using Ruby 1.9.2-p136 here.%0a%3c %0a%3c We&rsquo;ll also take care to add the current user to the &lsquo;rvm&rsquo; group. Finally, we&rsquo;ll create a user called &lsquo;unicorn&rsquo; to own our test application, later.%0a%3c %0a%3c (:source lang=bash:)%0a%3c # Install RVM and dependencies%0a%3c sudo aptitude install curl git-core%0a%3c sudo bash %3c %3c( curl -L http://bit.ly/rvm-install-system-wide )%0a%3c sudo aptitude install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev%0a%3c sudo adduser `whoami` rvm%0a%3c echo 'source /usr/local/lib/rvm' >> ~/.bashrc%0a%3c # Set up users and groups%0a%3c sudo useradd --home /var/www --create-home --groups rvm unicorn && sudo chmod g+w /var/www%0a%3c sudo adduser `whoami` unicorn%0a%3c #%0a%3c # >> Log out and back in to SSH, open a new shell, etc. -- something to reload your environment%0a%3c #%0a%3c # Install Ruby 1.9.2-p136 and make it default%0a%3c rvm install ruby-1.9.2-p136%0a%3c # Make a sandwich while you wait (or have someone make you one: http://xkcd.com/149/)%0a%3c rvm use ruby-1.9.2-p136 --default%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c ! Installing and Configuring Nginx%0a%3c %0a%3c For simplicity&rsquo;s sake, we&rsquo;ll be using Nginx from APT. To make sure we&rsquo;re up to date, we&rsquo;ll use Nginx&rsquo;s PPA.%0a%3c %0a%3c You can see in the configuration file that I&rsquo;ve jumped the gun and included the location of the shared socket we&rsquo;ll use with our Unicorn application.%0a%3c %0a%3c (:source lang=bash:)%0a%3c # Install Nginx%0a%3c sudo bash -c 'echo "deb http://ppa.launchpad.net/nginx/stable/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/nginx-stable-$(lsb_release -cs).list'%0a%3c sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C300EE8C && sudo aptitude update%0a%3c sudo aptitude install nginx%0a%3c sudo bash -c 'curl -L https://gist.github.com/raw/802568/3a62636146eb2615cf42081b2574e8602d199658/nginx.conf > /etc/nginx/nginx.conf'%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=text header="/etc/nginx/nginx.conf":)%0a%3c worker_processes 1;%0a%3c user www-data www-data;%0a%3c %0a%3c pid /tmp/nginx.pid;%0a%3c error_log /tmp/nginx.error.log;%0a%3c %0a%3c events {%0a%3c   worker_connections 1024;%0a%3c   accept_mutex off;%0a%3c }%0a%3c %0a%3c http {%0a%3c   include mime.types;%0a%3c   default_type application/octet-stream;%0a%3c   access_log /tmp/nginx.access.log combined;%0a%3c %0a%3c   sendfile on;%0a%3c   tcp_nopush on;%0a%3c   tcp_nodelay off;%0a%3c %0a%3c   gzip on;%0a%3c   gzip_http_version 1.0;%0a%3c   gzip_proxied any;%0a%3c   gzip_min_length 500;%0a%3c   gzip_disable "MSIE [1-6]\.";%0a%3c   gzip_types text/plain text/html text/xml text/css%0a%3c              text/comma-separated-values%0a%3c              text/javascript application/x-javascript%0a%3c              application/atom+xml;%0a%3c %0a%3c   upstream unicorn_test {%0a%3c     server unix:/var/www/test_app/tmp/sockets/unicorn.sock fail_timeout=0;%0a%3c   }%0a%3c %0a%3c   server {%0a%3c     listen 80;%0a%3c     client_max_body_size 4G;%0a%3c     server_name _;%0a%3c %0a%3c     keepalive_timeout 5;%0a%3c %0a%3c     root /var/www/test_app/public;%0a%3c %0a%3c     location / {%0a%3c       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;%0a%3c       proxy_set_header Host $http_host;%0a%3c       proxy_redirect off;%0a%3c %0a%3c       if (!-f $request_filename) {%0a%3c         proxy_pass http://unicorn_test;%0a%3c         break;%0a%3c       }%0a%3c     }%0a%3c %0a%3c     error_page 500 502 503 504 /500.html;%0a%3c     location = /500.html {%0a%3c       root /var/www/test_app/public;%0a%3c     }%0a%3c   }%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c ! Configuring Upstart for Nginx%0a%3c %0a%3c If you don&rsquo;t use Upstart, or you don&rsquo;t want to use Upstart, feel free to skip this section. By default, you can start Nginx with @@sudo /etc/init.d/nginx start@@.%0a%3c %0a%3c (:source lang=bash:)%0a%3c sudo rm /etc/init.d/nginx%0a%3c for file in $(ls /etc/rc*/*nginx); do sudo rm $file; done%0a%3c sudo bash -c 'curl -L https://gist.github.com/raw/802568/e210f8754abdf137027daeb4c41db8cc301b36ad/nginx.conf > /etc/init/nginx.conf'%0a%3c sudo start nginx%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=text header="/etc/init/nginx.conf:)%0a%3c description "nginx http daemon"%0a%3c %0a%3c start on runlevel [2]%0a%3c stop on runlevel [016]%0a%3c %0a%3c console owner%0a%3c %0a%3c exec /usr/sbin/nginx -c /etc/nginx/nginx.conf -g "daemon off;"%0a%3c %0a%3c respawn%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c ! Creating a Sample Rails Application%0a%3c %0a%3c Now we&rsquo;ll create a test Rails application in /var/www/test_app. We&rsquo;ll use a gemset called rails_app to demonstrate Unicorn&rsquo;s ability to figure out which gemset it should use for our application (for more details on this, check out step four in [[http://brandontilley.com:80/2011/01/29/rvm-unicorn-and-upstart.html | my earlier post on Unicorn and Upstart]]). For this to work, we&rsquo;ll also create an RVM wrapper for Unicorn. And, of course, don&rsquo;t forget your config/unicorn.rb file.%0a%3c %0a%3c Again, we&rsquo;ll use Upstart to start and manage our Unicorn process, but you can use whatever you&rsquo;d like. If you just want to test it out, try running @@unicorn -c /var/www/test_app/config/unicorn.rb@@ from the &lsquo;global&rsquo; gemset.%0a%3c %0a%3c (:source lang=bash:)%0a%3c # Install Unicorn in the global gemset, and create a wrapper (yo yo yo in the hooouuuuuse!?)%0a%3c rvm use ruby-1.9.2-p136@global%0a%3c gem install unicorn --no-ri --no-rdoc%0a%3c rvm wrapper ruby-1.9.2-p136 r192 unicorn%0a%3c # Create and switch to a new gemset%0a%3c rvm gemset create rails_app && rvm gemset use rails_app%0a%3c gem install rails --no-ri --no-rdoc%0a%3c # Create a sample Rails application%0a%3c cd /var/www%0a%3c rails new test_app%0a%3c echo 'rvm use ruby-1.9.2-p136@rails_app --create' > test_app/.rvmrc%0a%3c cd test_app%0a%3c #%0a%3c # >> Accept the .rvmrc warning%0a%3c #%0a%3c echo "gem 'unicorn'" >> Gemfile && bundle install%0a%3c curl -L https://gist.github.com/raw/802568/998ac7c702e43d600f94fc3ee63ea05179315a0d/unicorn.rb > config/unicorn.rb%0a%3c sudo bash -c 'curl -L https://gist.github.com/raw/802568/ee3f5f320c34ec2e1d1b55521776d7dccd9140d4/test_app.conf > /etc/init/test_app.conf'%0a%3c sudo start test_app%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=text header="/etc/init/test_app.conf":)%0a%3c description "Test rails application"%0a%3c %0a%3c start on runlevel [2]%0a%3c stop on runlevel [016]%0a%3c %0a%3c console owner%0a%3c %0a%3c exec /usr/local/rvm/bin/r192_unicorn -c /var/www/test_app/config/unicorn.rb%0a%3c %0a%3c respawn%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=ruby header="/var/www/test_app/config/unicorn.rb":)%0a%3c APP_ROOT = File.expand_path(File.dirname(File.dirname(__FILE__)))%0a%3c %0a%3c if ENV['MY_RUBY_HOME'] && ENV['MY_RUBY_HOME'].include?('rvm')%0a%3c   begin%0a%3c     rvm_path = File.dirname(File.dirname(ENV['MY_RUBY_HOME']))%0a%3c     rvm_lib_path = File.join(rvm_path, 'lib')%0a%3c     $LOAD_PATH.unshift rvm_lib_path%0a%3c     require 'rvm'%0a%3c     RVM.use_from_path! APP_ROOT%0a%3c   rescue LoadError%0a%3c     raise "RVM ruby lib is currently unavailable."%0a%3c   end%0a%3c end%0a%3c %0a%3c ENV['BUNDLE_GEMFILE'] = File.expand_path('../Gemfile', File.dirname(__FILE__))%0a%3c require 'bundler/setup'%0a%3c %0a%3c worker_processes 4%0a%3c working_directory APP_ROOT%0a%3c %0a%3c preload_app true%0a%3c %0a%3c timeout 30%0a%3c %0a%3c listen APP_ROOT + "/tmp/sockets/unicorn.sock", :backlog => 64%0a%3c %0a%3c pid APP_ROOT + "/tmp/pids/unicorn.pid"%0a%3c %0a%3c stderr_path APP_ROOT + "/log/unicorn.stderr.log"%0a%3c stdout_path APP_ROOT + "/log/unicorn.stdout.log"%0a%3c %0a%3c before_fork do |server, worker|%0a%3c   defined?(ActiveRecord::Base) && ActiveRecord::Base.connection.disconnect!%0a%3c %0a%3c   old_pid = RAILS_ROOT + '/tmp/pids/unicorn.pid.oldbin'%0a%3c   if File.exists?(old_pid) && server.pid != old_pid%0a%3c     begin%0a%3c       Process.kill("QUIT", File.read(old_pid).to_i)%0a%3c     rescue Errno::ENOENT, Errno::ESRCH%0a%3c       puts "Old master alerady dead"%0a%3c     end%0a%3c   end%0a%3c end%0a%3c %0a%3c after_fork do |server, worker|%0a%3c   defined?(ActiveRecord::Base) && ActiveRecord::Base.establish_connection%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c ! Profit!%0a%3c %0a%3c And that&rsquo;s that! Upstart will manage both Nginx and Unicorn (although either could benefit from something like Monit or God, but I&rsquo;ll leave that as an exercise for the reader and/or a future blog post).%0a%3c (:linkwikiwords:)%0a%3c >>%3c%3c%0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary: Setting up a rails application for deployment%0a%3c Tags: rails, applicaitons, web development, deployment, rvm, nginx, unicorn, upstart%0a%3c (:tags-hide rails, applicaitons, web development, deployment, rvm, nginx, unicorn, upstart:)%0a%3c (:title Serving Rails Apps with RVM, Nginx, Unicorn and Upstart | Brandon Tilley:)%0a%3c Source: http://brandontilley.com/2011/01/29/serving-rails-apps-with-rvm-nginx-unicorn-and-upstart.html%0a%3c Parent: (Technology.)RubyOnRails%0a%3c includeme:[[Technology.RubyOnRails]]%0a%3c Categories:[[!HowTos]], [[!Saved]]%0a%3c >>%3c%3c%0a%3c %0a%3c Page saved at: Tue, 11 Dec 2012 03:07:47 -0600%0a%3c %0a
host:1355217659=71.63.215.130
