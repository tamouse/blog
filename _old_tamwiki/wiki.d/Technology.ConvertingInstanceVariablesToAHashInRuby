version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.71 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=update: link to CreatingNestedHashFromNestedActiveRecord
ctime=1361769534
host=71.63.215.130
name=Technology.ConvertingInstanceVariablesToAHashInRuby
rev=3
targets=Technology.ConvertingInstanceVariablesToAHashInRuby,Technology.YAML,Technology.Ruby,Technology.WhatsAllThisAboutMonkeyPatchingInRuby,Technology.ActiveRecord,Technology.CreatingNestedHashFromNestedActiveRecord,Technology.RubyOnRails,Technology.IncludeMe,Category.Technology,Category.Languages,Category.Ruby,Category.HowTos
text=[[#excerpt]]%0aOn a recent post in ruby-talk, the question was asked how to convert something to [[YAML]]. Extending this generally to [[Ruby]] Objects, I went searching for something that would work besides a brute-force creation of a Hash.%0a%0aFinding a useful answer on [[http://stackoverflow.com/questions/7638982/better-way-to-convert-several-instance-variables-into-hash-with-ruby|stackoverflow]] and digging into the [[code -> https://github.com/rails/rails/blob/c20838596bcb40bf1590f27f6ba735d0a5f4fe8f/activesupport/lib/active_support/core_ext/object/instance_variables.rb#L12]] given in one of the responses, I came up with the following, which can be [[monkey-patched -> WhatsAllThisAboutMonkeyPatchingInRuby]] into Object.%0a[[#excerptend]]%0a%0a'''Update:''' for a neat way to do this with nested ActiveRecord models, see Technology/CreatingNestedHashFromNestedActiveRecord.%0a%0a!! Introduction%0a%0aThe original request was to be able to generate the following YAML from a result:%0a%0a(:source lang=yaml linenum tabwidth=4  header="YAML result":)%0a---%0a- name: device-1%0a  parameters:%0a    app_folder: deploy_project%0a    app_id: "1"%0a    tar_file: deploy_project.tar.gz%0a    profile_id: "3"%0a    version_id: "2"%0a  classes:%0a  - install%0a(:sourceend:)%0a%0aIf one were to take that and feed it back into Ruby via YAML.load, one gets the following structure:%0a%0a(:source lang=ruby linenum tabwidth=4  header="ruby structure from yaml":)%0a[{"name"=>"device-1",%0a  "parameters"=>{"app_folder"=>"deploy_project",%0a     "app_id"=>"1",%0a     "tar_file"=>"deploy_project.tar.gz",%0a     "profile_id"=>"3",%0a     "version_id"=>"2"},%0a   "classes"=>["install"]}]%0a(:sourceend:)%0a%0aSo an obvious structure is revealed. However, simply brute-forcing this from a result seemed not quite what I would want, so I went searching.%0a%0a!! What happens if you yamlize an Object directly%0a%0aLet's say we build a couple of classes that can be used with the above information (ignoring that it may have come from a database for the non).%0a%0a(:source lang=ruby linenum tabwidth=4  header="Deply and Params classes":)%0aclass Deploy%0a  attr_accessor :name, :parameters, :classes%0a  def initialize(n,p,c)%0a    self.name = n%0a    self.parameters = p%0a    self.classes = c%0a  end%0aend%0a%0aclass Params%0a  attr_accessor :folder, :id, :file, :profile, :version%0a  def initialize(fo, id, fi, p, v)%0a    self.folder = fo%0a    self.id = id%0a    self.file = fi%0a    self.profile = p%0a    self.version = v%0a  end%0aend%0a(:sourceend:)%0a%0aIf we load up an array with the above classes using the data from the original request, we can see this:%0a%0a(:source lang=ruby:)%0a1.9.3-head :074 > d=Array.new%0a => [] %0a1.9.3-head :075 > d%3c%3cDeploy.new('dev01',Params.new('dep1',1,'dep1.tar.gz',1,1),['install'])%0a => [#%3cDeploy:0xa06bf80 @name="dev01", @parameters=#%3cParams:0xa06bfbc @folder="dep1", @id=1, @file="dep1.tar.gz", @profile=1, @version=1>, @classes=["install"]>] %0a1.9.3-head :077 > puts d.to_yaml%0a---%0a- !ruby/object:Deploy%0a  name: dev01%0a  parameters: !ruby/object:Params%0a    folder: dep1%0a    id: 1%0a    file: dep1.tar.gz%0a    profile: 1%0a    version: 1%0a  classes:%0a  - install%0a => nil %0a(:sourceend:)%0a%0aSimply yamlizing an Object doesn't give us what we want -- when loaded, it will look for the classes Deploy and Params to create objects from. We don't want this, exactly, we just want it in the form originally requested.%0a%0a!! How to just get the instance variables into a Hash?%0a%0aIn [[http://stackoverflow.com/questions/7638982/better-way-to-convert-several-instance-variables-into-hash-with-ruby | this question]] on stackoverflow, one of the respondents points to the @@instance_values@@ method on @@Object@@ in [[RubyOnRails|Rails]] ([[github code -> https://github.com/rails/rails/blob/c20838596bcb40bf1590f27f6ba735d0a5f4fe8f/activesupport/lib/active_support/core_ext/object/instance_variables.rb#L12]]). This is pretty simple, and could be more helpful in a non-Rails environment. I decided to write a recursive version that can be monkey-patched into the Object class:%0a%0a(:source lang=ruby linenum tabwidth=4  header="instance_values_recurse":)%0aclass Object%0a  def instance_values_recurse%0a    Hash[instance_variables.map do |name|%0a           [name.to_s[1..-1],%0a            instance_variable_get(name).instance_variables.count %3c 1 ?%0a            instance_variable_get(name) :%0a            instance_variable_get(name).instance_values_recurse%0a           ]%0a         end%0a        ]%0a  end%0aend%0a(:sourceend:)%0a%0aUsing that same data above, we can get;%0a%0a(:source lang=ruby:)%0a1.9.3p335 :035 > puts d.map{|e| e.instance_values_recurse}.to_yaml%0a---%0a- name: dev01%0a  parameters:%0a    folder: dep1%0a    id: 1%0a    file: dep1.tar.gz%0a    profile: 1%0a    version: 1%0a  classes:%0a  - install%0a(:sourceend:)%0a%0aand Voila!%0a%0aThis won't do *everything* in-and-of-itself. For instance, if any of the instance variables consists of an Array of Objects, it won't recurse into them. Refinement will be needed.%0a%0aStill, an interesting exercise!%0a%0a%0a%0a%0a>>comment%3c%3c%0aSummary:How To: Convert an Object's Instance Variables to a Hash (recursively) in Ruby%0a(:title How To: Converting Instance Variables to a Hash in Ruby:)%0aParent:(Technology.)Ruby%0aIncludeMe:[[(Technology.)Ruby]]%0aCategories:[[!Technology]], [[!Languages]], [[!Ruby]], [[!HowTos]]%0aTags: ruby, languages, technology, howto%0a(:tags-hide ruby, languages, technology, howto :)%0a>>%3c%3c
time=1374655564
title=How To: Converting Instance Variables to a Hash in Ruby
author:1374655564=tamara
csum:1374655564=update: link to CreatingNestedHashFromNestedActiveRecord
diff:1374655564:1364096583:=7,8c7%0a%3c '''Update:''' for a neat way to do this with nested ActiveRecord models, see Technology/CreatingNestedHashFromNestedActiveRecord.%0a%3c %0a---%0a> %0a142c141%0a%3c >>%3c%3c%0a\ No newline at end of file%0a---%0a> >>%3c%3c%0a
host:1374655564=71.63.215.130
author:1364096583=tamara
csum:1364096583=add a nice title
diff:1364096583:1361769534:=135d134%0a%3c (:title How To: Converting Instance Variables to a Hash in Ruby:)%0a
host:1364096583=71.63.215.130
author:1361769534=tamara
csum:1361769534=new page
diff:1361769534:1361769534:=1,140d0%0a%3c [[#excerpt]]%0a%3c On a recent post in ruby-talk, the question was asked how to convert something to [[YAML]]. Extending this generally to [[Ruby]] Objects, I went searching for something that would work besides a brute-force creation of a Hash.%0a%3c %0a%3c Finding a useful answer on [[http://stackoverflow.com/questions/7638982/better-way-to-convert-several-instance-variables-into-hash-with-ruby|stackoverflow]] and digging into the [[code -> https://github.com/rails/rails/blob/c20838596bcb40bf1590f27f6ba735d0a5f4fe8f/activesupport/lib/active_support/core_ext/object/instance_variables.rb#L12]] given in one of the responses, I came up with the following, which can be [[monkey-patched -> WhatsAllThisAboutMonkeyPatchingInRuby]] into Object.%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a%3c !! Introduction%0a%3c %0a%3c The original request was to be able to generate the following YAML from a result:%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=4  header="YAML result":)%0a%3c ---%0a%3c - name: device-1%0a%3c   parameters:%0a%3c     app_folder: deploy_project%0a%3c     app_id: "1"%0a%3c     tar_file: deploy_project.tar.gz%0a%3c     profile_id: "3"%0a%3c     version_id: "2"%0a%3c   classes:%0a%3c   - install%0a%3c (:sourceend:)%0a%3c %0a%3c If one were to take that and feed it back into Ruby via YAML.load, one gets the following structure:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=4  header="ruby structure from yaml":)%0a%3c [{"name"=>"device-1",%0a%3c   "parameters"=>{"app_folder"=>"deploy_project",%0a%3c      "app_id"=>"1",%0a%3c      "tar_file"=>"deploy_project.tar.gz",%0a%3c      "profile_id"=>"3",%0a%3c      "version_id"=>"2"},%0a%3c    "classes"=>["install"]}]%0a%3c (:sourceend:)%0a%3c %0a%3c So an obvious structure is revealed. However, simply brute-forcing this from a result seemed not quite what I would want, so I went searching.%0a%3c %0a%3c !! What happens if you yamlize an Object directly%0a%3c %0a%3c Let's say we build a couple of classes that can be used with the above information (ignoring that it may have come from a database for the non).%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=4  header="Deply and Params classes":)%0a%3c class Deploy%0a%3c   attr_accessor :name, :parameters, :classes%0a%3c   def initialize(n,p,c)%0a%3c     self.name = n%0a%3c     self.parameters = p%0a%3c     self.classes = c%0a%3c   end%0a%3c end%0a%3c %0a%3c class Params%0a%3c   attr_accessor :folder, :id, :file, :profile, :version%0a%3c   def initialize(fo, id, fi, p, v)%0a%3c     self.folder = fo%0a%3c     self.id = id%0a%3c     self.file = fi%0a%3c     self.profile = p%0a%3c     self.version = v%0a%3c   end%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c If we load up an array with the above classes using the data from the original request, we can see this:%0a%3c %0a%3c (:source lang=ruby:)%0a%3c 1.9.3-head :074 > d=Array.new%0a%3c  => [] %0a%3c 1.9.3-head :075 > d%3c%3cDeploy.new('dev01',Params.new('dep1',1,'dep1.tar.gz',1,1),['install'])%0a%3c  => [#%3cDeploy:0xa06bf80 @name="dev01", @parameters=#%3cParams:0xa06bfbc @folder="dep1", @id=1, @file="dep1.tar.gz", @profile=1, @version=1>, @classes=["install"]>] %0a%3c 1.9.3-head :077 > puts d.to_yaml%0a%3c ---%0a%3c - !ruby/object:Deploy%0a%3c   name: dev01%0a%3c   parameters: !ruby/object:Params%0a%3c     folder: dep1%0a%3c     id: 1%0a%3c     file: dep1.tar.gz%0a%3c     profile: 1%0a%3c     version: 1%0a%3c   classes:%0a%3c   - install%0a%3c  => nil %0a%3c (:sourceend:)%0a%3c %0a%3c Simply yamlizing an Object doesn't give us what we want -- when loaded, it will look for the classes Deploy and Params to create objects from. We don't want this, exactly, we just want it in the form originally requested.%0a%3c %0a%3c !! How to just get the instance variables into a Hash?%0a%3c %0a%3c In [[http://stackoverflow.com/questions/7638982/better-way-to-convert-several-instance-variables-into-hash-with-ruby | this question]] on stackoverflow, one of the respondents points to the @@instance_values@@ method on @@Object@@ in [[RubyOnRails|Rails]] ([[github code -> https://github.com/rails/rails/blob/c20838596bcb40bf1590f27f6ba735d0a5f4fe8f/activesupport/lib/active_support/core_ext/object/instance_variables.rb#L12]]). This is pretty simple, and could be more helpful in a non-Rails environment. I decided to write a recursive version that can be monkey-patched into the Object class:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=4  header="instance_values_recurse":)%0a%3c class Object%0a%3c   def instance_values_recurse%0a%3c     Hash[instance_variables.map do |name|%0a%3c            [name.to_s[1..-1],%0a%3c             instance_variable_get(name).instance_variables.count %3c 1 ?%0a%3c             instance_variable_get(name) :%0a%3c             instance_variable_get(name).instance_values_recurse%0a%3c            ]%0a%3c          end%0a%3c         ]%0a%3c   end%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c Using that same data above, we can get;%0a%3c %0a%3c (:source lang=ruby:)%0a%3c 1.9.3p335 :035 > puts d.map{|e| e.instance_values_recurse}.to_yaml%0a%3c ---%0a%3c - name: dev01%0a%3c   parameters:%0a%3c     folder: dep1%0a%3c     id: 1%0a%3c     file: dep1.tar.gz%0a%3c     profile: 1%0a%3c     version: 1%0a%3c   classes:%0a%3c   - install%0a%3c (:sourceend:)%0a%3c %0a%3c and Voila!%0a%3c %0a%3c This won't do *everything* in-and-of-itself. For instance, if any of the instance variables consists of an Array of Objects, it won't recurse into them. Refinement will be needed.%0a%3c %0a%3c Still, an interesting exercise!%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:How To: Convert an Object's Instance Variables to a Hash (recursively) in Ruby%0a%3c Parent:(Technology.)Ruby%0a%3c IncludeMe:[[(Technology.)Ruby]]%0a%3c Categories:[[!Technology]], [[!Languages]], [[!Ruby]], [[!HowTos]]%0a%3c Tags: ruby, languages, technology, howto%0a%3c (:tags-hide ruby, languages, technology, howto :)%0a%3c >>%3c%3c%0a
host:1361769534=71.63.215.130
