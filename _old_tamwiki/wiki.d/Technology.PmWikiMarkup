version=pmwiki-2.2.38 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10.5; rv:14.0) Gecko/20100101 Firefox/14.0.1
author=tamara
charset=ISO-8859-1
csum=add more detailed example
ctime=1332293595
host=71.63.211.0
name=Technology.PmWikiMarkup
rev=6
targets=Technology.PmWikiMarkup,Technology.PmWiki,Glossary.SemanticWeb,Technology.ParseArgs,Technology.IncludeMe,Category.HowTos
text=[[#excerpt]]%0aPmWiki provides a lot of flexibility and extensibility. One of these features is the ability to write [[PmWiki:CustomMarkup|custom wiki markup]]. %0a[[#excerptend]]%0a%0aTo create custom markup, the @@Markup()@@ function is available from within the pmwiki environment.%0a%0a!! {{LaTeX}} logo markup%0aFor example, I recently had the need (or desire) to render the standard [=LaTeX=] logo as it appears when typeset, thusly: {{LaTeX}}.%0a%0aHere's the markup I wrote to render the logo:%0a%0a(:source lang=php linenum highlight="3" header="Markup to render LaTeX logo":)%0aMarkup('latex','inline',%0a       '/{{LaTeX}}/',%0a       '%3cspan class="texhtml" style="font-family:cmr10, LMRoman10-Regular, Times, serif;">L%3cspan style="text-transform: uppercase; font-size: 70%25; margin-left: -0.36em; vertical-align: 0.3em; line-height: 0; margin-right: -0.15em;">a%3c/span>T%3cspan style="text-transform: uppercase; margin-left: -0.1667em; vertical-align: -0.5ex; line-height: 0; margin-right: -0.125em;">e%3c/span>X%3c/span>');%0a(:sourceend:)%0a%0aIf you decide to snag the code, beware not to fold or split the last line with the HTML code in it, as any white space between the letters may render the logo poorly.%0a%0aThe result is here: {{LaTeX}}%0a%0a!! A little more complex example%0a%0aFor something that is a little more complex than a simple replacement, You can arrange for `MarkUp() to call a function. The best way to do this is to use the Keep() function, and have your function return the string of text you want it to keep.%0a%0a(:source lang=php linenum tabwidth=4 header="an example of a MarkUp that calculates something more complex than a simple substitution":)%0a// Add the (:addlink [PageName]:) markup and HandleAddLink actions.%0aMarkup('addlink', 'inline', '/\\(:addlink\\s*(.*?):\\)/e', %0a  "Keep(CreateBookmarklet(\$pagename,'$1'))");%0a%0a// Function to create the bookmarklet%0afunction CreateBookmarklet($pagename, $linkpage) {%0a  global $WikiTitle;%0a  if ($linkpage) $pagename = MakePageName($pagename, $linkpage);%0a  $bookmarklet="%3ca href=\"javascript:var tags, u, a, d=document,w=window,e=w.getSelection,k=d.getSelection,x=d.selection,s = (e ? e() : (k) ? k() : (x ? x.createRange().text : 0 )),f = '\$PageUrl?action=addlink',l = d.location,en = encodeURIComponent;if (s == '') s = prompt('Descriptive Text:');tags=prompt('Enter comma-separated tags:');u = f + '?url=' + en(l.href) + '&title=' + en(d.title) + '&selection=' + en(s) + '&tags=' + en(tags);a = function () {if (!w.open(u, 't', '')) l.href = u;};if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0);else a();void(0)\" title=\"send to \$WikiTitle/\$pagename\">send to ".$WikiTitle."/".$pagename."%3c/a>";%0a  return FmtPageName("Bookmarklet: $bookmarklet - drag to bookmark bar", $pagename);%0a%0a}%0a(:sourceend:)%0a%0aThe pattern to match includes an option (well, actually it sends everything after a space following the addlink trigger) that is passed into the [@CreateBookmarklet@] function. Note the amount of quoting going on here. The replacement contents are quoted, in spite of the fact that it contain a function call ([@CreateBookmarklet@]) inside of a function call ([@Keep@]). Both the [@$pagename@] variable, and pattern match variable [@$1@] are also quoted '''inside''' of that.%0a%0aThe [@CreateBookmarklet@] function does a bit of checking to see if the given page or a link page should be the target. It sets the bookmarklet, then returns the formatted page with the link added. The Keep function packs this on and pmwiki renders it when appropriate.%0a%0a!! Adding options to the markup, a la [[PmWiki:PageDirectives]]%0a%0aMarkup replacements can get extra exciting when you start to add more options and the ability to do different things.%0a%0aBelow is an example of markup that inserts the standard Creative Commons format to build the [[Glossary.SemanticWeb|semantic web]] links.%0a%0a(:source lang=perl linenum tabwidth=4 -getcode header="Markup for Creative Commons forms":)%0a// Usage: (:cc-license [type=(by|by-nc|by-nc-sa)] [title=%3cname of work>] [work=%3cURL of work>] [author=%3cname of author>] [permissions=%3clink to more permissions page]:)%0a//%0a// Defaults:%0a//   type: by-nc-sa%0a//   title: $WikiTitle%0a//   work: $ScriptDirUrl%0a//   author: Anonymous%0a//   permissions: $ScriptDirUrl?n=Site.Permissions%0a//%0aMarkup('creativecommonslicenses', /* unique markup identifier */%0a       '%3clinks',		  /* don't want pmwiki to reprocess urls in text */%0a       '/\\(:cc-license\\s*?(.*?):\\)/ei', /* regex for markup recognition */%0a       "cc_license_markup('$1')");%0afunction cc_license_markup($parameters='')%0a{%0a  @sms('parameters=',$parameters,__FILE__,__LINE__,__FUNCTION__);%0a  $parameters=stripslashes($parameters);%0a  @sms('parameters=(after stripslashes)',$parameters,__FILE__,__LINE__,__FUNCTION__);%0a  global $WikiTitle, $ScriptUrl;%0a  /* defaults */%0a  $defaults = array('type'=>'by-nc-sa',%0a		    'title'=>$WikiTitle,%0a		    'work'=>$ScriptUrl,%0a		    'author'=>'Anonymous',%0a		    'permissions'=>"$ScriptUrl?n=Site.Permissions");%0a  @sms('$defaults=',$defaults,__FILE__,__LINE__,__FUNCTION__);%0a  $args = array_merge($defaults, ParseArgs($parameters));%0a  @sms('$args=',$args,__FILE__,__LINE__,__FUNCTION__);%0a  switch ($type) {%0a  case 'by':%0a    $type_string = 'Attribution';%0a    break;%0a%0a  case 'by-nc':%0a    $type_string = 'Attribution-NonCommercial';%0a    break;%0a%0a  case 'by-nc-sa':%0a    $type_string = 'Attribution-NonCommercial-ShareAlike';%0a    break;%0a%0a  default:%0a    $type_string = 'Attribution';%0a    break;%0a  }%0a  %0a  $licenseUrl = "http://creativecommons.org/licenses/$type/3.0/";%0a  $licenseLogoSrc = "http://i.creativecommons.org/l/$type/3.0/80x15.png";%0a  $licenseLogoAlt = "Creative Commons Licence";%0a%0a  $return_text = "%3ca rel='license' href='$licenseUrl'>%3cimg alt='$licenseLogoAlt' style='border-width:0' src='$licenseLogoSrc' />%3c/a> %3cspan xmlns:dct='http://purl.org/dc/terms/' href='http://purl.org/dc/dcmitype/Text' property='dct:title' rel='dct:type'>$title%3c/span> by %3ca xmlns:cc='http://creativecommons.org/ns#' href='$work' property='cc:attributionName' rel='cc:attributionURL'>$author%3c/a> is licensed under a %3ca rel='license' href='$licenseUrl'>Creative Commons $type_string 3.0 Unported License%3c/a>. Permissions beyond the scope of this license may be available at %3ca xmlns:cc='http://creativecommons.org/ns#' href='$permissions' rel='cc:morePermissions'>$permissions%3c/a>.";%0a  %0a  return Keep($return_text);%0a%0a}%0a%0a(:sourceend:)%0a%0aSome details to point out, that make this interesting:%0a%0a* In the third parameter to Markup, the regex is followed by "ie" -- which turns the search case-insensitive, '''and''' permits the replacement to be an expression. This lets the fourth parameter be a function call which will return the substitution.%0a%0a* The regex saves everything following the markup tag itself as a string and passes it into the function.%0a%0a* The function uses the ParseArgs() function provided by pmwiki to extract the passed arguments into a hash, which is merged with a hash of default parameters.%0a%0a* The function returns the value of Keep(), which is passed the generated string of HTML code.%0a%0a>>comment%3c%3c%0aThis goes at the bottom of the page, hidden by comment block class%0aSummary:markup snippets used in pmwiki%0a(:title Pm Wiki Markup:)%0aParent:(Technology.)PmWiki%0aIncludeMe:[[Technology.PmWiki]]%0aCategories:[[!HowTos]]%0aTags: pmwiki, snippets, markup%0a(:tags-hide pmwiki, snippets, markup:)%0a>>%3c%3c%0a
time=1342646246
title=Pm Wiki Markup
author:1342646246=tamara
csum:1342646246=add more detailed example
diff:1342646246:1341798288:=45,118c45,46%0a%3c !! Adding options to the markup, a la [[PmWiki:PageDirectives]]%0a%3c %0a%3c Markup replacements can get extra exciting when you start to add more options and the ability to do different things.%0a%3c %0a%3c Below is an example of markup that inserts the standard Creative Commons format to build the [[Glossary.SemanticWeb|semantic web]] links.%0a%3c %0a%3c (:source lang=perl linenum tabwidth=4 -getcode header="Markup for Creative Commons forms":)%0a%3c // Usage: (:cc-license [type=(by|by-nc|by-nc-sa)] [title=%3cname of work>] [work=%3cURL of work>] [author=%3cname of author>] [permissions=%3clink to more permissions page]:)%0a%3c //%0a%3c // Defaults:%0a%3c //   type: by-nc-sa%0a%3c //   title: $WikiTitle%0a%3c //   work: $ScriptDirUrl%0a%3c //   author: Anonymous%0a%3c //   permissions: $ScriptDirUrl?n=Site.Permissions%0a%3c //%0a%3c Markup('creativecommonslicenses', /* unique markup identifier */%0a%3c        '%3clinks',		  /* don't want pmwiki to reprocess urls in text */%0a%3c        '/\\(:cc-license\\s*?(.*?):\\)/ei', /* regex for markup recognition */%0a%3c        "cc_license_markup('$1')");%0a%3c function cc_license_markup($parameters='')%0a%3c {%0a%3c   @sms('parameters=',$parameters,__FILE__,__LINE__,__FUNCTION__);%0a%3c   $parameters=stripslashes($parameters);%0a%3c   @sms('parameters=(after stripslashes)',$parameters,__FILE__,__LINE__,__FUNCTION__);%0a%3c   global $WikiTitle, $ScriptUrl;%0a%3c   /* defaults */%0a%3c   $defaults = array('type'=>'by-nc-sa',%0a%3c 		    'title'=>$WikiTitle,%0a%3c 		    'work'=>$ScriptUrl,%0a%3c 		    'author'=>'Anonymous',%0a%3c 		    'permissions'=>"$ScriptUrl?n=Site.Permissions");%0a%3c   @sms('$defaults=',$defaults,__FILE__,__LINE__,__FUNCTION__);%0a%3c   $args = array_merge($defaults, ParseArgs($parameters));%0a%3c   @sms('$args=',$args,__FILE__,__LINE__,__FUNCTION__);%0a%3c   switch ($type) {%0a%3c   case 'by':%0a%3c     $type_string = 'Attribution';%0a%3c     break;%0a%3c %0a%3c   case 'by-nc':%0a%3c     $type_string = 'Attribution-NonCommercial';%0a%3c     break;%0a%3c %0a%3c   case 'by-nc-sa':%0a%3c     $type_string = 'Attribution-NonCommercial-ShareAlike';%0a%3c     break;%0a%3c %0a%3c   default:%0a%3c     $type_string = 'Attribution';%0a%3c     break;%0a%3c   }%0a%3c   %0a%3c   $licenseUrl = "http://creativecommons.org/licenses/$type/3.0/";%0a%3c   $licenseLogoSrc = "http://i.creativecommons.org/l/$type/3.0/80x15.png";%0a%3c   $licenseLogoAlt = "Creative Commons Licence";%0a%3c %0a%3c   $return_text = "%3ca rel='license' href='$licenseUrl'>%3cimg alt='$licenseLogoAlt' style='border-width:0' src='$licenseLogoSrc' />%3c/a> %3cspan xmlns:dct='http://purl.org/dc/terms/' href='http://purl.org/dc/dcmitype/Text' property='dct:title' rel='dct:type'>$title%3c/span> by %3ca xmlns:cc='http://creativecommons.org/ns#' href='$work' property='cc:attributionName' rel='cc:attributionURL'>$author%3c/a> is licensed under a %3ca rel='license' href='$licenseUrl'>Creative Commons $type_string 3.0 Unported License%3c/a>. Permissions beyond the scope of this license may be available at %3ca xmlns:cc='http://creativecommons.org/ns#' href='$permissions' rel='cc:morePermissions'>$permissions%3c/a>.";%0a%3c   %0a%3c   return Keep($return_text);%0a%3c %0a%3c }%0a%3c %0a%3c (:sourceend:)%0a%3c %0a%3c Some details to point out, that make this interesting:%0a%3c %0a%3c * In the third parameter to Markup, the regex is followed by "ie" -- which turns the search case-insensitive, '''and''' permits the replacement to be an expression. This lets the fourth parameter be a function call which will return the substitution.%0a%3c %0a%3c * The regex saves everything following the markup tag itself as a string and passes it into the function.%0a%3c %0a%3c * The function uses the ParseArgs() function provided by pmwiki to extract the passed arguments into a hash, which is merged with a hash of default parameters.%0a%3c %0a%3c * The function returns the value of Keep(), which is passed the generated string of HTML code.%0a---%0a> %0a> %0a
host:1342646246=71.63.211.0
author:1341798288=tamara
diff:1341798288:1341798043:=51c51%0a%3c (:title Pm Wiki Markup:)%0a---%0a> (:title PmWiki Markup:)%0a
host:1341798288=71.63.211.0
author:1341798043=tamara
diff:1341798043:1341797982:=2c2%0a%3c PmWiki provides a lot of flexibility and extensibility. One of these features is the ability to write [[PmWiki:CustomMarkup|custom wiki markup]]. %0a---%0a> PmWiki provides a lot of flexibility and extensibility. One of these features is the ability to write [[PmWiki:CustomMarkup|custom wiki markup]]. For example, I recently had the need (or desire) to render the standard [=LaTeX=] logo as it appears when typeset, thusly: {{LaTeX}}.%0a8d7%0a%3c For example, I recently had the need (or desire) to render the standard [=LaTeX=] logo as it appears when typeset, thusly: {{LaTeX}}.%0a
host:1341798043=71.63.211.0
author:1341797982=tamara
csum:1341797982=add more complex markup example
diff:1341797982:1332293782:=21,42c21,22%0a%3c !! A little more complex example%0a%3c %0a%3c For something that is a little more complex than a simple replacement, You can arrange for `MarkUp() to call a function. The best way to do this is to use the Keep() function, and have your function return the string of text you want it to keep.%0a%3c %0a%3c (:source lang=php linenum tabwidth=4 header="an example of a MarkUp that calculates something more complex than a simple substitution":)%0a%3c // Add the (:addlink [PageName]:) markup and HandleAddLink actions.%0a%3c Markup('addlink', 'inline', '/\\(:addlink\\s*(.*?):\\)/e', %0a%3c   "Keep(CreateBookmarklet(\$pagename,'$1'))");%0a%3c %0a%3c // Function to create the bookmarklet%0a%3c function CreateBookmarklet($pagename, $linkpage) {%0a%3c   global $WikiTitle;%0a%3c   if ($linkpage) $pagename = MakePageName($pagename, $linkpage);%0a%3c   $bookmarklet="%3ca href=\"javascript:var tags, u, a, d=document,w=window,e=w.getSelection,k=d.getSelection,x=d.selection,s = (e ? e() : (k) ? k() : (x ? x.createRange().text : 0 )),f = '\$PageUrl?action=addlink',l = d.location,en = encodeURIComponent;if (s == '') s = prompt('Descriptive Text:');tags=prompt('Enter comma-separated tags:');u = f + '?url=' + en(l.href) + '&title=' + en(d.title) + '&selection=' + en(s) + '&tags=' + en(tags);a = function () {if (!w.open(u, 't', '')) l.href = u;};if (/Firefox/.test(navigator.userAgent)) setTimeout(a, 0);else a();void(0)\" title=\"send to \$WikiTitle/\$pagename\">send to ".$WikiTitle."/".$pagename."%3c/a>";%0a%3c   return FmtPageName("Bookmarklet: $bookmarklet - drag to bookmark bar", $pagename);%0a%3c %0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c The pattern to match includes an option (well, actually it sends everything after a space following the addlink trigger) that is passed into the [@CreateBookmarklet@] function. Note the amount of quoting going on here. The replacement contents are quoted, in spite of the fact that it contain a function call ([@CreateBookmarklet@]) inside of a function call ([@Keep@]). Both the [@$pagename@] variable, and pattern match variable [@$1@] are also quoted '''inside''' of that.%0a%3c %0a%3c The [@CreateBookmarklet@] function does a bit of checking to see if the given page or a link page should be the target. It sets the bookmarklet, then returns the formatted page with the link added. The Keep function packs this on and pmwiki renders it when appropriate.%0a---%0a> %0a> %0a
host:1341797982=71.63.211.0
author:1332293782=tamara
csum:1332293782=set title
diff:1332293782:1332293595:=30d29%0a%3c (:title PmWiki Markup:)%0a
host:1332293782=71.63.211.0
author:1332293595=tamara
csum:1332293595=new article
diff:1332293595:1332293595:=1,35d0%0a%3c [[#excerpt]]%0a%3c PmWiki provides a lot of flexibility and extensibility. One of these features is the ability to write [[PmWiki:CustomMarkup|custom wiki markup]]. For example, I recently had the need (or desire) to render the standard [=LaTeX=] logo as it appears when typeset, thusly: {{LaTeX}}.%0a%3c [[#excerptend]]%0a%3c %0a%3c To create custom markup, the @@Markup()@@ function is available from within the pmwiki environment.%0a%3c %0a%3c !! {{LaTeX}} logo markup%0a%3c %0a%3c Here's the markup I wrote to render the logo:%0a%3c %0a%3c (:source lang=php linenum highlight="3" header="Markup to render LaTeX logo":)%0a%3c Markup('latex','inline',%0a%3c        '/{{LaTeX}}/',%0a%3c        '%3cspan class="texhtml" style="font-family:cmr10, LMRoman10-Regular, Times, serif;">L%3cspan style="text-transform: uppercase; font-size: 70%25; margin-left: -0.36em; vertical-align: 0.3em; line-height: 0; margin-right: -0.15em;">a%3c/span>T%3cspan style="text-transform: uppercase; margin-left: -0.1667em; vertical-align: -0.5ex; line-height: 0; margin-right: -0.125em;">e%3c/span>X%3c/span>');%0a%3c (:sourceend:)%0a%3c %0a%3c If you decide to snag the code, beware not to fold or split the last line with the HTML code in it, as any white space between the letters may render the logo poorly.%0a%3c %0a%3c The result is here: {{LaTeX}}%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %0a%3c >>comment%3c%3c%0a%3c This goes at the bottom of the page, hidden by comment block class%0a%3c Summary:markup snippets used in pmwiki%0a%3c Parent:(Technology.)PmWiki%0a%3c IncludeMe:[[Technology.PmWiki]]%0a%3c Categories:[[!HowTos]]%0a%3c Tags: pmwiki, snippets, markup%0a%3c (:tags-hide pmwiki, snippets, markup:)%0a%3c >>%3c%3c%0a
host:1332293595=71.63.211.0
