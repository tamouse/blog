version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0
author=tamara
charset=ISO-8859-1
csum=mark the todo todone :)
ctime=1355214325
host=71.63.215.130
name=Technology.DefinitiveGuideToAFullRailsApp
rev=8
targets=Technology.DefinitiveGuideToAFullRailsApp,Technology.MyApp,Technology.RSpec,Technology.RubyOnRails,Technology.IncludeMe,Category.HowTos
text=[[#excerpt]]%0aRecently tilting up a rails application for a quote data base, and decided to pull everything together into a nice startup.%0a%0a'''Update:''' Look, folks, I'm not burying the lead here. All this below is interesting and stuff, but just go get [[https://github.com/RailsApps/rails_apps_composer|Rails Apps Composer]] which basically does all the stuff below, only better, cos, yeah, I'm weak.%0a%0a[[#excerptend]]%0a%0aTurns out, ''everyone'' has thought of this. And people have built some amazing things. If you look up [[https://www.google.com/search?client=ubuntu&channel=fs&q=rails+application+template&ie=utf-8&oe=utf-8|"rails application template"]] on %25blue%25G%25red%25o%25yellow%25o%25blue%25g%25green%25l%25red%25e%25%25, the first few hits give you a wealth of info:%0a%0a* http://guides.rubyonrails.org/rails_application_templates.html%0a* http://edgeguides.rubyonrails.org/rails_application_templates.html&#8206;%0a* https://www.ruby-toolbox.com/categories/rails_app_templates%0a* http://railsapps.github.io/rails-application-templates.html (which lists a ''whole'' bunch of generators!)%0a%0a%0a%0a!! Rails isn't enough%0a%0a%0a%0aJust starting out with @@rails new MyApp@@ isn't really enough to get everything together for a very modern rails app. In addition, I wanted to be running rspec tests, cucumber with a web driver of some kind, spork to speed up spec tests, watchr to keep running tests when I change an application file or a spec test, and using haml instead of erb.%0a%0aHere's the steps I've gone through, and links to web pages where I found answers.%0a%0a!! Getting Rails 3 running with RSpec 2%0a%0a[[http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html | How To Get Rails 3 and RSpec 2 Running Specs Fast (From Scratch)]] by Peter Cooper over at [[http://www.rubyinside.com |Ruby Inside]] gives a great tutorial on getting Rails 3 and RSpec 2 playing together.%0a%0aIt's best to do this integration before you do any work on your application, as it sets things up really slick.%0a%0a!!! Install a new rails app%0a%0a(:source lang=bash header="Instsall new rails app":)%0a$ rails new myapp --skip-test-unit%0a(:sourceend:)%0a%0a!!! Edit the @@myapp/Gemfile@@%0a%0aUncomment the following gems:%0a%0a* therubyracer%0a* jquery-rails%0a* bcrypt-ruby%0a* jbuilder%0a* unicorn%0a* capistrano%0a* debugger%0a%0aAdd the following:%0a(:source lang=ruby linenum header="Additions to Gemfile":)%0agem 'haml'%0a%0agroup :development, :test do%0a  gem 'rspec-rails'%0a  gem 'watchr'%0a  gem 'spork'%0aend%0a%0agroup :development do%0a  gem 'haml-rails'%0a  gem 'hpricot'%0a  gem 'ruby_parser'%0a  gem 'html2haml'%0aend%0a%0agroup :cucumber do%0a  gem 'cucumber-rails', :require => false%0a  gem 'webrat'%0a  gem 'database_cleaner'%0aend%0a(:sourceend:)%0a%0aThen execute:%0a%0a(:source lang=bash linenum:)%0a$ bundle%0a$ rails generate rspec:install%0a$ rails generate cucumber:install%0a(:sourceend:)%0a%0a!!! Set up watchr%0a%0aCreate @@myapp/.watchr.rb@@:%0a%0a(:source lang=ruby linenum header="myapp/.watchr.rb":)%0adef run_spec(file)%0a  unless File.exist?(file)%0a    puts "#{file} does not exist"%0a    return%0a  end%0a%0a  puts "Running #{file}"%0a  system "bundle exec rspec #{file}"%0a  puts%0aend%0a%0awatch("spec/.*/*_spec.rb") do |match|%0a  run_spec match[0]%0aend%0a%0awatch("app/(.*/.*).rb") do |match|%0a  run_spec %25{spec/#{match[1]}_spec.rb}%0aend%0a(:sourceend:)%0a%0aCreate @@lib/tasks/watchr.rake@@:%0a%0a(:source lang=ruby linenum header="myapp/lib/tasks/watchr.rake":)%0adesc "Run watchr"%0atask :watchr do%0a  sh %25{bundle exec watchr .watchr.rb}%0aend%0a(:sourceend:)%0a%0a!!! Set up spork%0a%0aRun:%0a%0a(:source lang=bash:)%0a$ spork --bootstrap%0a(:sourceend:)%0a%0aThen edit @@myapp/spec/spec_helper.rb@@ as stated in the instructions @@spork@@ just added. (Basically, move everything up into @@Spork.prefork@@.)%0a%0aEdit @@myapp/.rspec@@ by adding @@--drb@@ to the file. File contents should be:%0a%0a(:source lang=text linenum header="myapp/.rspec":)%0a--colour%0a--drb%0a(:sourceend:)%0a%0aCopy @@config/environments/test.rb@@ to @@config/environments/cucumber.rb@@.%0a%0aEdit @@config/environments/test.rb@@ and change @@config.cache_classes@@ from @@true@@ to @@false@@.%0a%0a!! Stand up database for first time%0a%0aFor a new rails application, you have to ensure the database is there to start developing. To do this, just run:%0a%0a(:source lang=bash:)%0a$ bundle exec rake db:migrate%0a(:sourceend:)%0a%0aand you'll be good to go.%0a%0a----%0a%0a!! Standing the application up for development and test%0a%0a!!! Foreman%0a%0a[[https://github.com/ddollar/foreman#readme|Foreman]] is a wonderful utility that can run your rails server, spork, watchr, tail the log file, and whatever else you need running to make your application fly.%0a%0a!!! Set up the Foreman Procfile%0a%0a(:source lang=text linenum header="Procfile":)%0aweb: bundle exec rails server -d%0aspork: spork%0awatchr: bundle exec rake watchr%0alog: tail -f log/development.log%0a(:sourceend:)%0a%0a!!! Start up Foreman%0a%0a(:source lang=bash:)%0a$ foreman start%0a(:sourceend:)%0a%0a!!! Now, run some tests%0a%0aNothing is there yet, let's see what passes.%0a%0aTo utilizy @@spork@@ effectively, don't run the standard @@rake@@ task. Instead run:%0a%0a(:source lang=bash:)%0a$ rspec spec%0a(:sourceend:)%0a%0aRunning cucumber tests is a slightly different matter. We've created a cucumber environment, so let's use it:%0a%0a(:source lang=bash:)%0a$ RAILS_ENV='cucumber' rake cucumber%0a(:sourceend:)%0a%0a!!! Set up HAML%0a%0aThere is nothing you need to particularly do to use HAML other than include the gems in the @@Gemfile@@ as shown above.%0a%0aThere are some gems that do not play well with HAML though, insisting on creating erb files instead. Over at [[http://xpressivecode.com | XPressive Code . com]] however, they've come up with a [@rake@] task to make the conversion easy -> http://xpressivecode.com/2012/2/9/rails-rake-task-for-html2haml.aspx]].%0a%0aCreate a new task in @@lib/tasks@@ called @@erb2haml.rake@@:%0a%0a(:source lang=ruby linenum header="myapp/lib/tasks/erb2haml.rake":)%0anamespace :erb do%0a  namespace :to do%0a    desc "Converts all .html.erb files to .html.haml"%0a    task :haml do%0a      print "looking for erb views..\n"%0a      files = Dir.glob(File.join(Rails.root,"app","views","**","*.html.erb"))%0a      files.each_line do |file|%0a        file.strip!%0a        print "parsing file: #{file}\n"%0a        sh "bundle exec html2haml #{file} | cat > #{file.gsub(/\.erb$/, ".haml")}"%0a        File.unlink(file)%0a      end%0a    end%0a  end%0aend%0a(:sourceend:)%0a%0awhich can then be used to convert any generated erb files to haml files thusly:%0a%0a(:source lang=bash:)%0a$ rake erb:to:haml%0a(:sourceend:)%0a%0a!! Proceed with incremental testing and development, with refactoring%0a%0aNow you can stand up your application, and things should be cool. Write some spec tests, some cucumber features, and some code. With @@watchr@@ and @@spork@@ running, new files and changes to files in the @@myapp/spec@@ and @@myapp/app@@ directories should cause the spec tests to run.%0a%0a!! {-TODO: create a rails application template that does all this-}%0a%0a'''TODONE!''' See https://github.com/RailsApps/rails_apps_composer for such a beast.%0a%0aRails lets you create application templates that bundle your own version of a new rails application together to be run with [@rails new@]:%0a%0a(:source lang=bash:)%0a$ rails new APP_PATH --template=TEMPLATE%0a(:sourceend:)%0a%0a%0a%0a>>comment%3c%3c%0aSummary:How to get a fully-loaded Rails app with rspec, cucumber, watchr, spork, haml%0aParent:(Technology.)RubyOnRails%0aIncludeMe:[[(Technology.)RubyOnRails]]%0aCategories:[[!HowTos]]%0aTags: ruby, rails, application, web development, setup, howto%0a(:tags-hide ruby, rails, application, web development, setup, howto :)%0a>>%3c%3c%0a
time=1370349095
author:1370349095=tamara
csum:1370349095=mark the todo todone :)
diff:1370349095:1370348991:minor=221,223c221%0a%3c !! {-TODO: create a rails application template that does all this-}%0a%3c %0a%3c '''TODONE!''' See https://github.com/RailsApps/rails_apps_composer for such a beast.%0a---%0a> !! TODO: create a rails application template that does all this%0a
host:1370349095=71.63.215.130
author:1370348991=tamara
csum:1370348991=update to look at rails_apps_composer and other generators
diff:1370348991:1370194991:=3,5d2%0a%3c %0a%3c '''Update:''' Look, folks, I'm not burying the lead here. All this below is interesting and stuff, but just go get [[https://github.com/RailsApps/rails_apps_composer|Rails Apps Composer]] which basically does all the stuff below, only better, cos, yeah, I'm weak.%0a%3c %0a8,16d4%0a%3c Turns out, ''everyone'' has thought of this. And people have built some amazing things. If you look up [[https://www.google.com/search?client=ubuntu&channel=fs&q=rails+application+template&ie=utf-8&oe=utf-8|"rails application template"]] on %25blue%25G%25red%25o%25yellow%25o%25blue%25g%25green%25l%25red%25e%25%25, the first few hits give you a wealth of info:%0a%3c %0a%3c * http://guides.rubyonrails.org/rails_application_templates.html%0a%3c * http://edgeguides.rubyonrails.org/rails_application_templates.html&#8206;%0a%3c * https://www.ruby-toolbox.com/categories/rails_app_templates%0a%3c * http://railsapps.github.io/rails-application-templates.html (which lists a ''whole'' bunch of generators!)%0a%3c %0a%3c %0a%3c %0a18,19d5%0a%3c %0a%3c %0a
host:1370348991=71.63.215.130
author:1370194991=tamara
csum:1370194991=clean up some source fields, add headers, line numbers, etc
diff:1370194991:1370194258:minor=19,20c19,20%0a%3c (:source lang=bash header="Instsall new rails app":)%0a%3c $ rails new myapp --skip-test-unit%0a---%0a> (:source lang=bash:)%0a> rails new myapp --skip-test-unit%0a26,34c26,35%0a%3c %0a%3c * therubyracer%0a%3c * jquery-rails%0a%3c * bcrypt-ruby%0a%3c * jbuilder%0a%3c * unicorn%0a%3c * capistrano%0a%3c * debugger%0a%3c %0a---%0a> (:source lang=ruby:)%0a> therubyracer%0a> jquery-rails%0a> bcrypt-ruby%0a> jbuilder%0a> unicorn%0a> capistrano%0a> debugger%0a> (:sourceend:)%0a> %0a36c37%0a%3c (:source lang=ruby linenum header="Additions to Gemfile":)%0a---%0a> (:source lang=ruby:)%0a56a58%0a> %0a60,64c62,65%0a%3c %0a%3c (:source lang=bash linenum:)%0a%3c $ bundle%0a%3c $ rails generate rspec:install%0a%3c $ rails generate cucumber:install%0a---%0a> (:source lang=bash:)%0a> bundle%0a> rails generate rspec:install%0a> rails generate cucumber:install%0a69,71c70,71%0a%3c Create @@myapp/.watchr.rb@@:%0a%3c %0a%3c (:source lang=ruby linenum header="myapp/.watchr.rb":)%0a---%0a> Create @@myapp/.watchr@@:%0a> (:source lang=ruby:)%0a93,94c93%0a%3c %0a%3c (:source lang=ruby linenum header="myapp/lib/tasks/watchr.rake":)%0a---%0a> (:source lang=ruby:)%0a97c96%0a%3c   sh %25{bundle exec watchr .watchr.rb}%0a---%0a>   sh %25{bundle exec watchr .watchr}%0a104d102%0a%3c %0a106c104%0a%3c $ spork --bootstrap%0a---%0a> spork --bootstrap%0a112,113c110%0a%3c %0a%3c (:source lang=text linenum header="myapp/.rspec":)%0a---%0a> (:source lang=text:)%0a127c124%0a%3c $ bundle exec rake db:migrate%0a---%0a> bundle exec rake db:migrate%0a151c148%0a%3c (:source lang=bash:)%0a---%0a> (:source lang=bash linenum:)%0a162c159%0a%3c $ rspec spec%0a---%0a> rspec spec%0a166d162%0a%3c %0a168c164%0a%3c $ RAILS_ENV='cucumber' rake cucumber%0a---%0a> RAILS_ENV=cucumber rake cucumber%0a175,176c171,172%0a%3c There are some gems that do not play well with HAML though, insisting on creating erb files instead. Over at [[http://xpressivecode.com | XPressive Code . com]] however, they've come up with a [@rake@] task to make the conversion easy -> http://xpressivecode.com/2012/2/9/rails-rake-task-for-html2haml.aspx]].%0a%3c %0a---%0a> There are some gems that do not play well with HAML though, insisting on creating erb files instead. Over at [[http://xpressivecode.com | XPressive Code . com]] however, they've come up with a [[@@rake@@ task to make the conversion easy -> http://xpressivecode.com/2012/2/9/rails-rake-task-for-html2haml.aspx]].%0a> %0a178,179c174%0a%3c %0a%3c (:source lang=ruby linenum header="myapp/lib/tasks/erb2haml.rake":)%0a---%0a> (:source lang=ruby:)%0a181,191c176,187%0a%3c   namespace :to do%0a%3c     desc "Converts all .html.erb files to .html.haml"%0a%3c     task :haml do%0a%3c       print "looking for erb views..\n"%0a%3c       files = Dir.glob(File.join(Rails.root,"app","views","**","*.html.erb"))%0a%3c       files.each_line do |file|%0a%3c         file.strip!%0a%3c         print "parsing file: #{file}\n"%0a%3c         sh "bundle exec html2haml #{file} | cat > #{file.gsub(/\.erb$/, ".haml")}"%0a%3c         File.unlink(file)%0a%3c       end%0a---%0a>     namespace :to do%0a>         desc "Converts all .html.erb files to .html.haml"%0a>         task :haml do%0a>             print "looking for erb views..\n"%0a>             files = Dir.glob(File.join(Rails.root,"app","views","**","*.html.erb"))%0a>             files.each_line do |file|%0a>                 file.strip!%0a>                 print "parsing file: #{file}\n"%0a>                 sh "bundle exec html2haml #{file} | cat > #{file.gsub(/\.erb$/, ".haml")}"%0a>                 File.unlink(file)%0a>             end%0a>         end%0a193d188%0a%3c   end%0a196d190%0a%3c %0a198d191%0a%3c %0a200c193%0a%3c $ rake erb:to:haml%0a---%0a> rake erb:to:haml%0a
host:1370194991=71.63.215.130
author:1370194258=tamara
csum:1370194258=modify haml stuff, add todo
diff:1370194258:1370169026:=50d49%0a%3c   gem 'html2haml'%0a53,54c52,53%0a%3c group :cucumber do%0a%3c   gem 'cucumber-rails', :require => false%0a---%0a> group :test, :cucumber do%0a>   gem 'cucumber-rails'%0a180c179%0a%3c             files = Dir.glob(File.join(Rails.root,"app","views","**","*.html.erb"))%0a---%0a>             files = `find ./app/views -name *.html.erb`%0a184,185c183,184%0a%3c                 sh "bundle exec html2haml #{file} | cat > #{file.gsub(/\.erb$/, ".haml")}"%0a%3c                 File.unlink(file)%0a---%0a>                 `bundle exec html2haml #{file} | cat > #{file.gsub(/\.erb$/, ".haml")}`%0a>                 `rm #{file}`%0a195a195,196%0a> %0a> %0a199,208d199%0a%3c %0a%3c !! TODO: create a rails application template that does all this%0a%3c %0a%3c Rails lets you create application templates that bundle your own version of a new rails application together to be run with [@rails new@]:%0a%3c %0a%3c (:source lang=bash:)%0a%3c $ rails new APP_PATH --template=TEMPLATE%0a%3c (:sourceend:)%0a%3c %0a%3c %0a
host:1370194258=71.63.215.130
author:1370169026=tamara
diff:1370169026:1370166256:=118,128c118%0a%3c !! Stand up database for first time%0a%3c %0a%3c For a new rails application, you have to ensure the database is there to start developing. To do this, just run:%0a%3c %0a%3c (:source lang=bash:)%0a%3c bundle exec rake db:migrate%0a%3c (:sourceend:)%0a%3c %0a%3c and you'll be good to go.%0a%3c %0a%3c ----%0a---%0a> ! Good to start%0a
host:1370169026=71.63.215.130
author:1370166256=tamara
diff:1370166256:1370163705:=130,131d129%0a%3c spork: spork%0a%3c watchr: bundle exec rake watchr%0a
host:1370166256=71.63.215.130
author:1370163705=tamara
csum:1370163705=add section on foreman
diff:1370163705:1355214325:=118,130c118,123%0a%3c ! Good to start%0a%3c %0a%3c !! Standing the application up for development and test%0a%3c %0a%3c !!! Foreman%0a%3c %0a%3c [[https://github.com/ddollar/foreman#readme|Foreman]] is a wonderful utility that can run your rails server, spork, watchr, tail the log file, and whatever else you need running to make your application fly.%0a%3c %0a%3c !!! Set up the Foreman Procfile%0a%3c %0a%3c (:source lang=text linenum header="Procfile":)%0a%3c web: bundle exec rails server -d%0a%3c log: tail -f log/development.log%0a---%0a> !!! Good to start%0a> %0a> Run the following in separate shells:%0a> %0a> (:source lang=bash:)%0a> rails server --daemon%0a133,136c126,127%0a%3c !!! Start up Foreman%0a%3c %0a%3c (:source lang=bash linenum:)%0a%3c $ foreman start%0a---%0a> (:source lang=bash:)%0a> spork%0a138a130,133%0a> (:source lang=bash:)%0a> rake watchr%0a> (:sourceend:)%0a> %0a196c191%0a%3c >>%3c%3c%0a---%0a> >>%3c%3c%0a\ No newline at end of file%0a
host:1370163705=71.63.215.130
author:1355214325=tamara
csum:1355214325=new page
diff:1355214325:1355214325:=1,191d0%0a%3c [[#excerpt]]%0a%3c Recently tilting up a rails application for a quote data base, and decided to pull everything together into a nice startup.%0a%3c [[#excerptend]]%0a%3c %0a%3c !! Rails isn't enough%0a%3c %0a%3c Just starting out with @@rails new MyApp@@ isn't really enough to get everything together for a very modern rails app. In addition, I wanted to be running rspec tests, cucumber with a web driver of some kind, spork to speed up spec tests, watchr to keep running tests when I change an application file or a spec test, and using haml instead of erb.%0a%3c %0a%3c Here's the steps I've gone through, and links to web pages where I found answers.%0a%3c %0a%3c !! Getting Rails 3 running with RSpec 2%0a%3c %0a%3c [[http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html | How To Get Rails 3 and RSpec 2 Running Specs Fast (From Scratch)]] by Peter Cooper over at [[http://www.rubyinside.com |Ruby Inside]] gives a great tutorial on getting Rails 3 and RSpec 2 playing together.%0a%3c %0a%3c It's best to do this integration before you do any work on your application, as it sets things up really slick.%0a%3c %0a%3c !!! Install a new rails app%0a%3c %0a%3c (:source lang=bash:)%0a%3c rails new myapp --skip-test-unit%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Edit the @@myapp/Gemfile@@%0a%3c %0a%3c Uncomment the following gems:%0a%3c (:source lang=ruby:)%0a%3c therubyracer%0a%3c jquery-rails%0a%3c bcrypt-ruby%0a%3c jbuilder%0a%3c unicorn%0a%3c capistrano%0a%3c debugger%0a%3c (:sourceend:)%0a%3c %0a%3c Add the following:%0a%3c (:source lang=ruby:)%0a%3c gem 'haml'%0a%3c %0a%3c group :development, :test do%0a%3c   gem 'rspec-rails'%0a%3c   gem 'watchr'%0a%3c   gem 'spork'%0a%3c end%0a%3c %0a%3c group :development do%0a%3c   gem 'haml-rails'%0a%3c   gem 'hpricot'%0a%3c   gem 'ruby_parser'%0a%3c end%0a%3c %0a%3c group :test, :cucumber do%0a%3c   gem 'cucumber-rails'%0a%3c   gem 'webrat'%0a%3c   gem 'database_cleaner'%0a%3c end%0a%3c %0a%3c (:sourceend:)%0a%3c %0a%3c Then execute:%0a%3c (:source lang=bash:)%0a%3c bundle%0a%3c rails generate rspec:install%0a%3c rails generate cucumber:install%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Set up watchr%0a%3c %0a%3c Create @@myapp/.watchr@@:%0a%3c (:source lang=ruby:)%0a%3c def run_spec(file)%0a%3c   unless File.exist?(file)%0a%3c     puts "#{file} does not exist"%0a%3c     return%0a%3c   end%0a%3c %0a%3c   puts "Running #{file}"%0a%3c   system "bundle exec rspec #{file}"%0a%3c   puts%0a%3c end%0a%3c %0a%3c watch("spec/.*/*_spec.rb") do |match|%0a%3c   run_spec match[0]%0a%3c end%0a%3c %0a%3c watch("app/(.*/.*).rb") do |match|%0a%3c   run_spec %25{spec/#{match[1]}_spec.rb}%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c Create @@lib/tasks/watchr.rake@@:%0a%3c (:source lang=ruby:)%0a%3c desc "Run watchr"%0a%3c task :watchr do%0a%3c   sh %25{bundle exec watchr .watchr}%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Set up spork%0a%3c %0a%3c Run:%0a%3c (:source lang=bash:)%0a%3c spork --bootstrap%0a%3c (:sourceend:)%0a%3c %0a%3c Then edit @@myapp/spec/spec_helper.rb@@ as stated in the instructions @@spork@@ just added. (Basically, move everything up into @@Spork.prefork@@.)%0a%3c %0a%3c Edit @@myapp/.rspec@@ by adding @@--drb@@ to the file. File contents should be:%0a%3c (:source lang=text:)%0a%3c --colour%0a%3c --drb%0a%3c (:sourceend:)%0a%3c %0a%3c Copy @@config/environments/test.rb@@ to @@config/environments/cucumber.rb@@.%0a%3c %0a%3c Edit @@config/environments/test.rb@@ and change @@config.cache_classes@@ from @@true@@ to @@false@@.%0a%3c %0a%3c !!! Good to start%0a%3c %0a%3c Run the following in separate shells:%0a%3c %0a%3c (:source lang=bash:)%0a%3c rails server --daemon%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=bash:)%0a%3c spork%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=bash:)%0a%3c rake watchr%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Now, run some tests%0a%3c %0a%3c Nothing is there yet, let's see what passes.%0a%3c %0a%3c To utilizy @@spork@@ effectively, don't run the standard @@rake@@ task. Instead run:%0a%3c %0a%3c (:source lang=bash:)%0a%3c rspec spec%0a%3c (:sourceend:)%0a%3c %0a%3c Running cucumber tests is a slightly different matter. We've created a cucumber environment, so let's use it:%0a%3c (:source lang=bash:)%0a%3c RAILS_ENV=cucumber rake cucumber%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Set up HAML%0a%3c %0a%3c There is nothing you need to particularly do to use HAML other than include the gems in the @@Gemfile@@ as shown above.%0a%3c %0a%3c There are some gems that do not play well with HAML though, insisting on creating erb files instead. Over at [[http://xpressivecode.com | XPressive Code . com]] however, they've come up with a [[@@rake@@ task to make the conversion easy -> http://xpressivecode.com/2012/2/9/rails-rake-task-for-html2haml.aspx]].%0a%3c %0a%3c Create a new task in @@lib/tasks@@ called @@erb2haml.rake@@:%0a%3c (:source lang=ruby:)%0a%3c namespace :erb do%0a%3c     namespace :to do%0a%3c         desc "Converts all .html.erb files to .html.haml"%0a%3c         task :haml do%0a%3c             print "looking for erb views..\n"%0a%3c             files = `find ./app/views -name *.html.erb`%0a%3c             files.each_line do |file|%0a%3c                 file.strip!%0a%3c                 print "parsing file: #{file}\n"%0a%3c                 `bundle exec html2haml #{file} | cat > #{file.gsub(/\.erb$/, ".haml")}`%0a%3c                 `rm #{file}`%0a%3c             end%0a%3c         end%0a%3c     end%0a%3c end%0a%3c (:sourceend:)%0a%3c which can then be used to convert any generated erb files to haml files thusly:%0a%3c (:source lang=bash:)%0a%3c rake erb:to:haml%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c %0a%3c !! Proceed with incremental testing and development, with refactoring%0a%3c %0a%3c Now you can stand up your application, and things should be cool. Write some spec tests, some cucumber features, and some code. With @@watchr@@ and @@spork@@ running, new files and changes to files in the @@myapp/spec@@ and @@myapp/app@@ directories should cause the spec tests to run.%0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:How to get a fully-loaded Rails app with rspec, cucumber, watchr, spork, haml%0a%3c Parent:(Technology.)RubyOnRails%0a%3c IncludeMe:[[(Technology.)RubyOnRails]]%0a%3c Categories:[[!HowTos]]%0a%3c Tags: ruby, rails, application, web development, setup, howto%0a%3c (:tags-hide ruby, rails, application, web development, setup, howto :)%0a%3c >>%3c%3c%0a\ No newline at end of file%0a
host:1355214325=71.63.215.130
