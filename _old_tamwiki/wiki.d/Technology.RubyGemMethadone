version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:17.0) Gecko/20100101 Firefox/17.0
author=tamara
charset=ISO-8859-1
csum=
ctime=1355593693
host=71.63.215.130
name=Technology.RubyGemMethadone
rev=4
targets=Technology.RubyGemMethadone,Technology.Ruby,Technology.IncludeMe,Category.Links,Category.Articles
text=>>comment%3c%3c%0aSummary:A slick ruby gem that builds a command line application%0aParent:(Technology.)Ruby%0aIncludeMe:[[(Technology.)Ruby]]%0aCategories:[[!Links]], [[!Articles]]%0aTags: ruby, gems, cli, scripts, miniapplications%0a(:tags-hide ruby, gems, cli, scripts, miniapplications :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0a[[Methadone -> http://davetron1000.github.com]] is a pretty neat little gem that gets a command line application up and tested with some cool features.%0a[[#excerptend]]%0a%0a%0a!! Logging in colours%0a%0a[@Methadone::CLILogging@] has the ability to substitute a different formatter when you log messages. I did this little ditty, just to see how it works:%0a%0a(:source lang=ruby:)%0arequire 'formatador'%0a(:sourceend:)%0a%0a(Don't forget to add formatador to your @@Gemfile@@ or @@.gemspec@@.)%0a%0a%0a(:source lang=ruby linenum header="After the requires, before the App is declared:":)%0aSEVERITY_COLORS = {%0a  'DEBUG' => 'green',%0a  'INFO' => 'white',%0a  'WARN' => 'yellow',%0a  'ERROR' => 'cyan',%0a  'FATAL' => 'red'%0a}%0a(:sourceend:)%0a%0a(:source lang=ruby linenum header="After the includes inside the class App:":)%0aclass App%0a  include Methadone::Main%0a  include Methadone::CLILogging%0a  include Methadone::SH%0a%0a  # After including Methadone::CLILogging, the logger%0a  # can be modified, notably replacing the formatter%0a  # code with an anonymous procedure:%0a  logger.formatter = proc { |severity,datetime,progname,msg|%0a    c = SEVERITY_COLORS[severity]%0a    Formatador.parse("[#{c}]#{msg}[/]\n")%0a  }%0a%0a  main do | config | # ... and so on%0a(:sourceend:)%0a%0aAnd then when you give:%0a%0a(:source lang=ruby:)%0adebug("This is a debug statement")%0ainfo("FYI")%0awarn("This is a warning")%0aerror("Oops!! Something went wrong, cleaning up")%0afatal("OH NOES!! Cannot procede, dropping the platter")%0a(:sourceend:)%0a%0awill produce:%0a%0a(:div style="background-color: #333; colour: #CCC; font-family: monospace; border: 1pt solid #CCC; padding: 10px;":)%0a(:linebreaks:)%0a%0a%0a%25green%25This is a debug statement%25%25%0a%25white%25FYI%25%25%0a%25yellow%25This is a warning%25%25%0a%25color="#63F3F6"%25Oops!! Something went wrong, cleaning up%25%25%0a%25red%25OH NOES!! Cannot procede, dropping the platter%25%0a%0a%0a(:nolinebreaks:)%0a(:divend:)%0a
time=1355593838
author:1355593838=tamara
diff:1355593838:1355593812:=47c47%0a%3c     Formatador.parse("[#{c}]#{msg}[/]\n")%0a---%0a>     Formatador.parse("[#{c}]#{msg}[/]\n"%0a
host:1355593838=71.63.215.130
author:1355593812=tamara
diff:1355593812:1355593700:=47c47%0a%3c     Formatador.parse("[#{c}]#{msg}[/]\n"%0a---%0a>     Formatador.parse("[#{c}]%25s %25s [bold][#{c}][%25s][#{c}][normal] %25s\n"%25 [ datetime.to_s, progname, severity, msg ])%0a
host:1355593812=71.63.215.130
author:1355593700=tamara
diff:1355593700:1355593693:=
host:1355593700=71.63.215.130
author:1355593693=tamara
diff:1355593693:1355593693:=1,77d0%0a%3c >>comment%3c%3c%0a%3c Summary:A slick ruby gem that builds a command line application%0a%3c Parent:(Technology.)Ruby%0a%3c IncludeMe:[[(Technology.)Ruby]]%0a%3c Categories:[[!Links]], [[!Articles]]%0a%3c Tags: ruby, gems, cli, scripts, miniapplications%0a%3c (:tags-hide ruby, gems, cli, scripts, miniapplications :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c [[Methadone -> http://davetron1000.github.com]] is a pretty neat little gem that gets a command line application up and tested with some cool features.%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a%3c !! Logging in colours%0a%3c %0a%3c [@Methadone::CLILogging@] has the ability to substitute a different formatter when you log messages. I did this little ditty, just to see how it works:%0a%3c %0a%3c (:source lang=ruby:)%0a%3c require 'formatador'%0a%3c (:sourceend:)%0a%3c %0a%3c (Don't forget to add formatador to your @@Gemfile@@ or @@.gemspec@@.)%0a%3c %0a%3c %0a%3c (:source lang=ruby linenum header="After the requires, before the App is declared:":)%0a%3c SEVERITY_COLORS = {%0a%3c   'DEBUG' => 'green',%0a%3c   'INFO' => 'white',%0a%3c   'WARN' => 'yellow',%0a%3c   'ERROR' => 'cyan',%0a%3c   'FATAL' => 'red'%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c (:source lang=ruby linenum header="After the includes inside the class App:":)%0a%3c class App%0a%3c   include Methadone::Main%0a%3c   include Methadone::CLILogging%0a%3c   include Methadone::SH%0a%3c %0a%3c   # After including Methadone::CLILogging, the logger%0a%3c   # can be modified, notably replacing the formatter%0a%3c   # code with an anonymous procedure:%0a%3c   logger.formatter = proc { |severity,datetime,progname,msg|%0a%3c     c = SEVERITY_COLORS[severity]%0a%3c     Formatador.parse("[#{c}]%25s %25s [bold][#{c}][%25s][#{c}][normal] %25s\n"%25 [ datetime.to_s, progname, severity, msg ])%0a%3c   }%0a%3c %0a%3c   main do | config | # ... and so on%0a%3c (:sourceend:)%0a%3c %0a%3c And then when you give:%0a%3c %0a%3c (:source lang=ruby:)%0a%3c debug("This is a debug statement")%0a%3c info("FYI")%0a%3c warn("This is a warning")%0a%3c error("Oops!! Something went wrong, cleaning up")%0a%3c fatal("OH NOES!! Cannot procede, dropping the platter")%0a%3c (:sourceend:)%0a%3c %0a%3c will produce:%0a%3c %0a%3c (:div style="background-color: #333; colour: #CCC; font-family: monospace; border: 1pt solid #CCC; padding: 10px;":)%0a%3c (:linebreaks:)%0a%3c %0a%3c %0a%3c %25green%25This is a debug statement%25%25%0a%3c %25white%25FYI%25%25%0a%3c %25yellow%25This is a warning%25%25%0a%3c %25color="#63F3F6"%25Oops!! Something went wrong, cleaning up%25%25%0a%3c %25red%25OH NOES!! Cannot procede, dropping the platter%25%0a%3c %0a%3c %0a%3c (:nolinebreaks:)%0a%3c (:divend:)%0a
host:1355593693=71.63.215.130
