version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19
author=tamara
charset=ISO-8859-1
csum=move page from main
ctime=1288652918
host=127.0.0.1
name=Technology.FindingTheMimeTypeOfAFile
rev=4
targets=Technology.FindingTheMimeTypeOfAFile,Main.Glossary
text=[[#excerpt]]%0aOn *nix systems, the type of a file is called it's [[mimetype -> Main.Glossary#mimetype]].%0aSometimes it is necessary to know the type of the file one is dealing with. You can't always rely on the file extension (there may not be one, or it may be incorrect). Thus, one has to check the type of the file by different means.%0a[[#excerptend]]%0a%0a!! @@file()@@ command%0aIn *nix, there is a command called @@file()@@ which returns a description of the file type. The options on @@file()@@ vary on *nix platforms, but generally the following incantation will deliver just the file's mimetype:%0a%0a(:source lang=bash:)%0afile -b --mime /path/to/file%0a(:sourceend:)%0a%0awill return the mimetype as it would be set in a @@Content-type:@@ mail or http header. For example:%0a%0a(:code:)%0a$ file -b --mime Main/Cartoons/aarp-eyechart.jpg %0aimage/jpeg%0a(:codeend:)%0a%0a!! @@File::`MimeInfo@@ perl module%0aThis can be used, but it does have some limitations. Instead, I use a Perl package called [[http://search.cpan.org/~pardus/File-MimeInfo-0.15/lib/File/MimeInfo.pm|File::MimeInfo]]. It includes a program called @@mimetype@@ with the proper parameters will return the mimetype of the file. With this information, you can do things like send an approrpriate Content-type header for an HTTP Response, or use it in setting Content-type for Mime mail or RSS enclosures.%0a%0aAlso important is to have a good database of MIME data. One such source is the Shared MIME data resource at Freedesktop.org: [[http://www.freedesktop.org/wiki/Software/shared-mime-info]]. On my main development machine, I have this database saved into @@/sw/share/mime@@, so I have aliased the mimetype program to: @@mimetype --database=/sw/share/mime@@.%0a%0a!!Using mimetype in PHP%0a%0aAs of 5.3.0, PHP has the [[fileinfo -> http://us2.php.net/manual/en/book.fileinfo.php]] class. This makes it easy to determine the true file type of a given file. Using the [[@@finfo_file@@ function -> http://us2.php.net/manual/en/function.finfo-file.php]], it is easy to obtain the mime type:%0a%0a(:source lang=php linenum:)%0a$finfo = new finfo(FILEINFO_MIME_TYPE);%0a$mimetype = $finfo->file($filename);%0a(:sourceend:)%0a%0aFor example:%0a%0a(:code:)%0a$ php -r '$finfo = new finfo(FILEINFO_MIME_TYPE);print $finfo->file("Main/Cartoons/aarp-eyechart.jpg"). "\n";'%0aimage/jpeg%0a(:codeend:)%0a%0aSubsequently, doing something with that mimetype can become:%0a%0a(:source lang=php linenum tabwidth=2:)%0a$finfo = new finfo(FILEINFO_MIME_TYPE);%0aswitch ($finfo->file($filename)) {%0a	case 'image/jpeg': $ext = "jpg";	break;%0a	case 'image/gif': $ext = "gif"; break;%0a	case 'image/png': $ext = "png"; break;%0a	default: $ext = "dat"; break;%0a}%0a(:sourceend:)%0a%0aOr, using a table:%0a%0a(:source lang=php linenum:)%0a$mime2ext = array(%0a  'image/jpeg' => 'jpg',%0a  'image/jpg' => 'jpg',%0a  'image/gif' => 'gif',%0a  'image/png' => 'png',%0a);%0a%0a// later, in code%0a%0a$ext = (isset($mime2ext[$finfo->file($filename)])) ? $mime2ext[$finfo->file($filename)] : 'dat';%0a(:sourceend:)%0a%0a%0a(:Summary:How to get a file's true mime type:)%0a(:Parent:(Technology.)Development:)%0a(:IncludeMe:[[(Technology.)Development]]:)%0a(:Categories:[[!Articles]]:)%0a(:Tags: mime types:)%0a(:tags-hide mime types :)%0a
time=1333986084
author:1333986084=tamara
csum:1333986084=move page from main
diff:1333986084:1288664103:=1,2c1,7%0a%3c [[#excerpt]]%0a%3c On *nix systems, the type of a file is called it's [[mimetype -> Main.Glossary#mimetype]].%0a---%0a> (:Summary:sometimes it is necessary to know what type of file one is dealing with:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a> '''Tags:''' (:tags php, perl, code solutions, coding examples, web development:)%0a> %0a4,10c9,21%0a%3c [[#excerptend]]%0a%3c %0a%3c !! @@file()@@ command%0a%3c In *nix, there is a command called @@file()@@ which returns a description of the file type. The options on @@file()@@ vary on *nix platforms, but generally the following incantation will deliver just the file's mimetype:%0a%3c %0a%3c (:source lang=bash:)%0a%3c file -b --mime /path/to/file%0a---%0a> %0a> In *nix, there is a command called @@file()@@ which returns a description of the file type. This can be used, but it does have some limitations. Instead, I use a Perl package called [[http://search.cpan.org/~pardus/File-MimeInfo-0.15/lib/File/MimeInfo.pm|File::MimeInfo]]. It includes a program called @@mimetype@@ with the proper parameters will return the [[Glossary#mimetype|mimetype]] of the file. With this information, you can do things like send an approrpriate Content-type header for an HTTP Response, or use it in setting Content-type for Mime mail or RSS enclosures.%0a> %0a> Also important is to have a good database of MIME data. One such source is the Shared MIME data resource at Freedesktop.org: [[http://www.freedesktop.org/wiki/Software/shared-mime-info]]. On my main development machine, I have this database saved into @@/sw/share/mime@@, so I have aliased the mimetype program to: @@mimetype --database=/sw/share/mime@@.%0a> %0a> !!Using mimetype in PHP%0a> %0a> Running under Apache, PHP can call other programs and scripts via the @@[[http://us.php.net/manual/en/function.shell-exec.php|shell_exec()]]@@ function or [[http://us.php.net/manual/en/language.operators.execution.php|backtick operators]]. Thus, a simple call to the mimetype program would be done as:%0a> %0a> (:source lang=php linenum:)%0a> $cmd="mimetype --database=/sw/share/mime -b ".%0a>     escapeshellcmd($filename)." 2>/dev/null";%0a> $result = trim(`$cmd`);%0a13,40c24,25%0a%3c will return the mimetype as it would be set in a @@Content-type:@@ mail or http header. For example:%0a%3c %0a%3c (:code:)%0a%3c $ file -b --mime Main/Cartoons/aarp-eyechart.jpg %0a%3c image/jpeg%0a%3c (:codeend:)%0a%3c %0a%3c !! @@File::`MimeInfo@@ perl module%0a%3c This can be used, but it does have some limitations. Instead, I use a Perl package called [[http://search.cpan.org/~pardus/File-MimeInfo-0.15/lib/File/MimeInfo.pm|File::MimeInfo]]. It includes a program called @@mimetype@@ with the proper parameters will return the mimetype of the file. With this information, you can do things like send an approrpriate Content-type header for an HTTP Response, or use it in setting Content-type for Mime mail or RSS enclosures.%0a%3c %0a%3c Also important is to have a good database of MIME data. One such source is the Shared MIME data resource at Freedesktop.org: [[http://www.freedesktop.org/wiki/Software/shared-mime-info]]. On my main development machine, I have this database saved into @@/sw/share/mime@@, so I have aliased the mimetype program to: @@mimetype --database=/sw/share/mime@@.%0a%3c %0a%3c !!Using mimetype in PHP%0a%3c %0a%3c As of 5.3.0, PHP has the [[fileinfo -> http://us2.php.net/manual/en/book.fileinfo.php]] class. This makes it easy to determine the true file type of a given file. Using the [[@@finfo_file@@ function -> http://us2.php.net/manual/en/function.finfo-file.php]], it is easy to obtain the mime type:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $finfo = new finfo(FILEINFO_MIME_TYPE);%0a%3c $mimetype = $finfo->file($filename);%0a%3c (:sourceend:)%0a%3c %0a%3c For example:%0a%3c %0a%3c (:code:)%0a%3c $ php -r '$finfo = new finfo(FILEINFO_MIME_TYPE);print $finfo->file("Main/Cartoons/aarp-eyechart.jpg"). "\n";'%0a%3c image/jpeg%0a%3c (:codeend:)%0a%3c %0a---%0a> [-(Note the trim() command to remove extraneous white space around the return. See RememberToChopReturnsFromCommands :-D )-]%0a> %0a44,50c29,34%0a%3c $finfo = new finfo(FILEINFO_MIME_TYPE);%0a%3c switch ($finfo->file($filename)) {%0a%3c 	case 'image/jpeg': $ext = "jpg";	break;%0a%3c 	case 'image/gif': $ext = "gif"; break;%0a%3c 	case 'image/png': $ext = "png"; break;%0a%3c 	default: $ext = "dat"; break;%0a%3c }%0a---%0a> 	switch ($result) {%0a> 		case 'image/jpeg': $ext = "jpg";	break;%0a> 		case 'image/gif': $ext = "gif"; break;%0a> 		case 'image/png': $ext = "png"; break;%0a> 		default: $ext = "dat"; break;%0a> 	}%0a53,74c37,42%0a%3c Or, using a table:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $mime2ext = array(%0a%3c   'image/jpeg' => 'jpg',%0a%3c   'image/jpg' => 'jpg',%0a%3c   'image/gif' => 'gif',%0a%3c   'image/png' => 'png',%0a%3c );%0a%3c %0a%3c // later, in code%0a%3c %0a%3c $ext = (isset($mime2ext[$finfo->file($filename)])) ? $mime2ext[$finfo->file($filename)] : 'dat';%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c (:Summary:How to get a file's true mime type:)%0a%3c (:Parent:(Technology.)Development:)%0a%3c (:IncludeMe:[[(Technology.)Development]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: mime types:)%0a%3c (:tags-hide mime types :)%0a---%0a> In fact, the above are two of the functions in my  [[WriteFunctionsInASeparateInclude| reusable library of functions]], @@get_mimetype()@@ and @@determine_extension()@@.%0a> %0a> %0a> %0a> %0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1333986084=127.0.0.1
author:1288664103=tamara
csum:1288664103=shorten up code
diff:1288664103:1288663944:minor=30,33c30,44%0a%3c 		case 'image/jpeg': $ext = "jpg";	break;%0a%3c 		case 'image/gif': $ext = "gif"; break;%0a%3c 		case 'image/png': $ext = "png"; break;%0a%3c 		default: $ext = "dat"; break;%0a---%0a> 		case 'image/jpeg':%0a> 			$ext = "jpg";%0a> 			break;%0a> 		%0a> 		case 'image/gif':%0a> 			$ext = "gif";%0a> 			break;%0a> 			%0a> 		case 'image/png':%0a> 			$ext = "png";%0a> 			break;%0a> 			%0a> 		default:%0a> 			$ext = "dat";%0a> 			break;%0a
host:1288664103=71.63.211.0
author:1288663944=tamara
csum:1288663944=added missing @
diff:1288663944:1288652918:minor=12c12%0a%3c Also important is to have a good database of MIME data. One such source is the Shared MIME data resource at Freedesktop.org: [[http://www.freedesktop.org/wiki/Software/shared-mime-info]]. On my main development machine, I have this database saved into @@/sw/share/mime@@, so I have aliased the mimetype program to: @@mimetype --database=/sw/share/mime@@.%0a---%0a> Also important is to have a good database of MIME data. One such source is the Shared MIME data resource at Freedesktop.org: [[http://www.freedesktop.org/wiki/Software/shared-mime-info]]. On my main development machine, I have this database saved into @/sw/share/mime@@, so I have aliased the mimetype program to: @@mimetype --database=/sw/share/mime@@.%0a
host:1288663944=71.63.211.0
author:1288652918=tamara
diff:1288652918:1288652918:=1,53d0%0a%3c (:Summary:sometimes it is necessary to know what type of file one is dealing with:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c '''Tags:''' (:tags php, perl, code solutions, coding examples, web development:)%0a%3c %0a%3c Sometimes it is necessary to know the type of the file one is dealing with. You can't always rely on the file extension (there may not be one, or it may be incorrect). Thus, one has to check the type of the file by different means.%0a%3c %0a%3c In *nix, there is a command called @@file()@@ which returns a description of the file type. This can be used, but it does have some limitations. Instead, I use a Perl package called [[http://search.cpan.org/~pardus/File-MimeInfo-0.15/lib/File/MimeInfo.pm|File::MimeInfo]]. It includes a program called @@mimetype@@ with the proper parameters will return the [[Glossary#mimetype|mimetype]] of the file. With this information, you can do things like send an approrpriate Content-type header for an HTTP Response, or use it in setting Content-type for Mime mail or RSS enclosures.%0a%3c %0a%3c Also important is to have a good database of MIME data. One such source is the Shared MIME data resource at Freedesktop.org: [[http://www.freedesktop.org/wiki/Software/shared-mime-info]]. On my main development machine, I have this database saved into @/sw/share/mime@@, so I have aliased the mimetype program to: @@mimetype --database=/sw/share/mime@@.%0a%3c %0a%3c !!Using mimetype in PHP%0a%3c %0a%3c Running under Apache, PHP can call other programs and scripts via the @@[[http://us.php.net/manual/en/function.shell-exec.php|shell_exec()]]@@ function or [[http://us.php.net/manual/en/language.operators.execution.php|backtick operators]]. Thus, a simple call to the mimetype program would be done as:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $cmd="mimetype --database=/sw/share/mime -b ".%0a%3c     escapeshellcmd($filename)." 2>/dev/null";%0a%3c $result = trim(`$cmd`);%0a%3c (:sourceend:)%0a%3c %0a%3c [-(Note the trim() command to remove extraneous white space around the return. See RememberToChopReturnsFromCommands :-D )-]%0a%3c %0a%3c Subsequently, doing something with that mimetype can become:%0a%3c %0a%3c (:source lang=php linenum tabwidth=2:)%0a%3c 	switch ($result) {%0a%3c 		case 'image/jpeg':%0a%3c 			$ext = "jpg";%0a%3c 			break;%0a%3c 		%0a%3c 		case 'image/gif':%0a%3c 			$ext = "gif";%0a%3c 			break;%0a%3c 			%0a%3c 		case 'image/png':%0a%3c 			$ext = "png";%0a%3c 			break;%0a%3c 			%0a%3c 		default:%0a%3c 			$ext = "dat";%0a%3c 			break;%0a%3c 	}%0a%3c (:sourceend:)%0a%3c %0a%3c In fact, the above are two of the functions in my  [[WriteFunctionsInASeparateInclude| reusable library of functions]], @@get_mimetype()@@ and @@determine_extension()@@.%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288652918=71.63.211.0
