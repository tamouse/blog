version=pmwiki-2.2.56 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=add title
ctime=1389635090
host=173.8.101.94
name=Technology.HowToWriteRakefiles
rev=2
targets=Technology.HowToWriteRakefiles,Technology.Ruby,Technology.IncludeMe,Category.HowTos,Category.Technology
text=>>comment%3c%3c%0aSummary: A short tutorial of things I've learned about writing Rakefiles%0aParent: (Technology.)Ruby%0aIncludeMe: [[(Technology.)Ruby]]%0aCategories: [[!HowTos]], [[!Technology]]%0aTags: rake, rakefile, ruby%0a(:tags-hide rake, rakefile, ruby:)%0aSource: %0aPosted: Mon Jan 13 11:20:49 2014%0a(:title How To: How to write rakefiles:)%0a>>%3c%3c%0a%0a[[#excerpt]]%0aRake is the make of the ruby world. It is a nicely structured way of%0aorganizing tasks that are part of developing, testing, maintaining and%0arunning an application.%0a[[#excerptend]]%0a%0a!! Rake Documentation%0a%0aRake's documentation is rather fragmented, there doesn't seem to be a%0adefinitive guide to writing Rakefiles, other than the source itself in%0amany cases. Such as it is, here are some pointers:%0a%0a* For details on Rake's command-line invocation, read https://github.com/jimweirich/rake/blob/master/doc/command_line_usage.rdoc%0a* For details on writing Rakefiles, see https://github.com/jimweirich/rake/blob/master/doc/rakefile.rdoc%0a* For the original announcement of Rake, see https://github.com/jimweirich/rake/blob/master/doc/rational.rdoc%0a* For a glossary of terms, see https://github.com/jimweirich/rake/blob/master/doc/glossary.rdoc%0a%0a!! Invoking another Rake task from inside a task%0a%0aSource:%0ahttp://www.spritle.com/blogs/2013/12/26/calling-rake-tasks-with-in-rake/%0a%0aIt turns out to be pretty simple, just call%0a@@Rake::Task[%25{rake:task}].invoke@@ (with'''out''' the leading @@':'@@%0aon the task name) and bob's your uncle. The key thing I wasn't%0afiguring out is the that task (with it's various namespace elements%0aincluded) must be a '''string''' -- I was trying to use the task name%0aas a symbol, but obviously you can't use @@:rake:task@@ as a symbol.%0a%0a(:source lang=ruby linenum tabwidth=2 header="invoke another Rake task" :)%0anamespace :outside do%0a  namespace :inside do%0a    desc "try to let the cat out"%0a    task :let_the_cat_out do |t|%0a      Rake::Task[%25{cat:out}].invoke      %0a    end%0a  end%0aend%0a%0anamespace :cat do%0a  desc "really let the cat out"%0a  task :out do |t|%0a    puts "letting the cat out"%0a  end%0aend%0a%0a# => letting the cat out%0a(:sourceend:)%0a%0a!! Running a shell command%0a%0aRake includes all the nifty [@FileUtils@] methods, but also includes a%0afew more. One that I use a lot is @@sh@@  which calls a subprocess to%0aexecute a shell command.%0a%0aI only found out how to invoke this by reading the source code at%0ahttps://github.com/jimweirich/rake/blob/master/lib/rake/file_utils.rb%0awhich implements the @@sh@@ method:%0a%0a-> Run the system command @@cmd@@. If multiple arguments are given the command%0a   is not run with the shell (same semantics as Kernel::exec and%0a   Kernel::system).%0a%0a!!! Example:%0a%0a(:source lang=ruby linenum tabwidth=2 header="using the sh method in a rakefile" :)%0ash %25{ls -ltr}%0a%0ash 'ls', 'file with spaces'%0a%0a# check exit status after command runs%0ash %25{grep pattern file} do |ok, res|%0a  if ! ok%0a    puts "pattern not found (status = #{res.exitstatus})"%0a  end%0aend%0a(:sourceend:)%0a%0aOf these, the third form is the most interesting to me, as it lets you%0acheck the result of the shell invocation.%0a%0a
time=1389636395
title=How To: How to write rakefiles
author:1389636395=tamara
csum:1389636395=add title
diff:1389636395:1389635090:=10d9%0a%3c (:title How To: How to write rakefiles:)%0a
host:1389636395=173.8.101.94
author:1389635090=tamara
csum:1389635090=new page
diff:1389635090:1389635090:=1,92d0%0a%3c >>comment%3c%3c%0a%3c Summary: A short tutorial of things I've learned about writing Rakefiles%0a%3c Parent: (Technology.)Ruby%0a%3c IncludeMe: [[(Technology.)Ruby]]%0a%3c Categories: [[!HowTos]], [[!Technology]]%0a%3c Tags: rake, rakefile, ruby%0a%3c (:tags-hide rake, rakefile, ruby:)%0a%3c Source: %0a%3c Posted: Mon Jan 13 11:20:49 2014%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c Rake is the make of the ruby world. It is a nicely structured way of%0a%3c organizing tasks that are part of developing, testing, maintaining and%0a%3c running an application.%0a%3c [[#excerptend]]%0a%3c %0a%3c !! Rake Documentation%0a%3c %0a%3c Rake's documentation is rather fragmented, there doesn't seem to be a%0a%3c definitive guide to writing Rakefiles, other than the source itself in%0a%3c many cases. Such as it is, here are some pointers:%0a%3c %0a%3c * For details on Rake's command-line invocation, read https://github.com/jimweirich/rake/blob/master/doc/command_line_usage.rdoc%0a%3c * For details on writing Rakefiles, see https://github.com/jimweirich/rake/blob/master/doc/rakefile.rdoc%0a%3c * For the original announcement of Rake, see https://github.com/jimweirich/rake/blob/master/doc/rational.rdoc%0a%3c * For a glossary of terms, see https://github.com/jimweirich/rake/blob/master/doc/glossary.rdoc%0a%3c %0a%3c !! Invoking another Rake task from inside a task%0a%3c %0a%3c Source:%0a%3c http://www.spritle.com/blogs/2013/12/26/calling-rake-tasks-with-in-rake/%0a%3c %0a%3c It turns out to be pretty simple, just call%0a%3c @@Rake::Task[%25{rake:task}].invoke@@ (with'''out''' the leading @@':'@@%0a%3c on the task name) and bob's your uncle. The key thing I wasn't%0a%3c figuring out is the that task (with it's various namespace elements%0a%3c included) must be a '''string''' -- I was trying to use the task name%0a%3c as a symbol, but obviously you can't use @@:rake:task@@ as a symbol.%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2 header="invoke another Rake task" :)%0a%3c namespace :outside do%0a%3c   namespace :inside do%0a%3c     desc "try to let the cat out"%0a%3c     task :let_the_cat_out do |t|%0a%3c       Rake::Task[%25{cat:out}].invoke      %0a%3c     end%0a%3c   end%0a%3c end%0a%3c %0a%3c namespace :cat do%0a%3c   desc "really let the cat out"%0a%3c   task :out do |t|%0a%3c     puts "letting the cat out"%0a%3c   end%0a%3c end%0a%3c %0a%3c # => letting the cat out%0a%3c (:sourceend:)%0a%3c %0a%3c !! Running a shell command%0a%3c %0a%3c Rake includes all the nifty [@FileUtils@] methods, but also includes a%0a%3c few more. One that I use a lot is @@sh@@  which calls a subprocess to%0a%3c execute a shell command.%0a%3c %0a%3c I only found out how to invoke this by reading the source code at%0a%3c https://github.com/jimweirich/rake/blob/master/lib/rake/file_utils.rb%0a%3c which implements the @@sh@@ method:%0a%3c %0a%3c -> Run the system command @@cmd@@. If multiple arguments are given the command%0a%3c    is not run with the shell (same semantics as Kernel::exec and%0a%3c    Kernel::system).%0a%3c %0a%3c !!! Example:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2 header="using the sh method in a rakefile" :)%0a%3c sh %25{ls -ltr}%0a%3c %0a%3c sh 'ls', 'file with spaces'%0a%3c %0a%3c # check exit status after command runs%0a%3c sh %25{grep pattern file} do |ok, res|%0a%3c   if ! ok%0a%3c     puts "pattern not found (status = #{res.exitstatus})"%0a%3c   end%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c Of these, the third form is the most interesting to me, as it lets you%0a%3c check the result of the shell invocation.%0a%3c %0a
host:1389635090=173.8.101.94
