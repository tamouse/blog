version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:17.0) Gecko/20100101 Firefox/17.0
author=tamara
charset=ISO-8859-1
csum=new page
ctime=1355701392
host=71.63.215.130
name=Technology.DealingWithMixedEncodingInAFile
rev=1
targets=Technology.DealingWithMixedEncodingInAFile,Technology.Development,Technology.IncludeMe,Category.HowTos
text=>>comment%3c%3c%0aSummary:What can you do when a file contains strings with mixed character set encodings?%0aParent:(Technology.)Development%0aIncludeMe:[[(Technology.)Development]]%0aCategories:[[!HowTos]]%0aTags: character sets, encoding, problems, solutions%0a(:tags-hide character sets, encoding, problems, solutions :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0aI recently was working on a Rails application and had to deal with a data file that contained strings with different encodings. Each line was internally consistent, however, one line might be in ISO-8859-1, while another might be in UTF-8. This is how I solved the problem in Ruby and PHP.%0a[[#excerptend]]%0a%0a%0a!! The Problem%0a%0aThe data file was a collection of quotes that were submitted by patrons of an IRC channel. The person who implemented the quote collector decided to use the Pilcro, "¶", as the internal line separator for multi-line quotes. This sounded like a good idea; the pilcrow being the international mark for a paragraph and all.%0a%0aThe problem is that pilcrow occupies different codebases on different character sets. For several people submitting quotes, from an older windows-based irc client, the character set used is ISO-8859-1. For other people, using more recent clients, UTF-8 is the standard.%0a%0aThe result was that the pilcrow would appear in the file in two ways:%0a%0a* 0xB6 - a single byte character as per ISO-8859-1%0a* 0x00B6 - a two-byte character as per UTF-8%0a%0a(:source lang=text header="Examples as Ruby sees them:":)%0aISO-8859-1: "%3corangejuice> Clive Anderson was nervous as hell.\xB6%3ckbeetl> No, he was British.\xB6%3ckbeetl> It's subtle, but there's a difference.\n"%0aUTF-8: "%3cMildBill> What's odd?¶%3cFreeTrav> About half of the natural numbers.\n"%0a(:sourceend:)%0a%0a!! Ruby solution%0a%0aRuby by default reads files in UTF-8. The resulting array of strings in the file, thus, will have different encodings. To test what a particular string is encoded as, you need to do the following construction:%0a%0a(:source lang=ruby:)%0as.force_encoding(encoding).valid_encoding?%0a(:sourceend:)%0a%0awhere encoding is the name of the character set you are testing.%0a%0aSo we end up with this sort of thing:%0a%0a(:source lang=ruby linenum tabwidth=2 header="convert quote file line separators to something we can use:":)%0a# get the source file%0aquotes.collect! do |q|%0a  if q.force_encoding("UTF-8").valid_encoding?%0a    q.gsub!(/¶/, "\n")%0a  else%0a    q = q.force_encoding("ISO-8859-1").%0a      gsub(/#{0xb6.chr.force_encoding("ISO-8859-1")}/, "\n")%0a  end%0a  q%0aend%0a(:sourceend:)%0a%0a''Note:'' I put the test for UTF-8 first, as most lines will match that if they don't include the one-byte pilcrow.%0a%0a%0a
time=1355701392
author:1355701392=tamara
csum:1355701392=new page
diff:1355701392:1355701392:=1,58d0%0a%3c >>comment%3c%3c%0a%3c Summary:What can you do when a file contains strings with mixed character set encodings?%0a%3c Parent:(Technology.)Development%0a%3c IncludeMe:[[(Technology.)Development]]%0a%3c Categories:[[!HowTos]]%0a%3c Tags: character sets, encoding, problems, solutions%0a%3c (:tags-hide character sets, encoding, problems, solutions :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c I recently was working on a Rails application and had to deal with a data file that contained strings with different encodings. Each line was internally consistent, however, one line might be in ISO-8859-1, while another might be in UTF-8. This is how I solved the problem in Ruby and PHP.%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a%3c !! The Problem%0a%3c %0a%3c The data file was a collection of quotes that were submitted by patrons of an IRC channel. The person who implemented the quote collector decided to use the Pilcro, "¶", as the internal line separator for multi-line quotes. This sounded like a good idea; the pilcrow being the international mark for a paragraph and all.%0a%3c %0a%3c The problem is that pilcrow occupies different codebases on different character sets. For several people submitting quotes, from an older windows-based irc client, the character set used is ISO-8859-1. For other people, using more recent clients, UTF-8 is the standard.%0a%3c %0a%3c The result was that the pilcrow would appear in the file in two ways:%0a%3c %0a%3c * 0xB6 - a single byte character as per ISO-8859-1%0a%3c * 0x00B6 - a two-byte character as per UTF-8%0a%3c %0a%3c (:source lang=text header="Examples as Ruby sees them:":)%0a%3c ISO-8859-1: "%3corangejuice> Clive Anderson was nervous as hell.\xB6%3ckbeetl> No, he was British.\xB6%3ckbeetl> It's subtle, but there's a difference.\n"%0a%3c UTF-8: "%3cMildBill> What's odd?¶%3cFreeTrav> About half of the natural numbers.\n"%0a%3c (:sourceend:)%0a%3c %0a%3c !! Ruby solution%0a%3c %0a%3c Ruby by default reads files in UTF-8. The resulting array of strings in the file, thus, will have different encodings. To test what a particular string is encoded as, you need to do the following construction:%0a%3c %0a%3c (:source lang=ruby:)%0a%3c s.force_encoding(encoding).valid_encoding?%0a%3c (:sourceend:)%0a%3c %0a%3c where encoding is the name of the character set you are testing.%0a%3c %0a%3c So we end up with this sort of thing:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2 header="convert quote file line separators to something we can use:":)%0a%3c # get the source file%0a%3c quotes.collect! do |q|%0a%3c   if q.force_encoding("UTF-8").valid_encoding?%0a%3c     q.gsub!(/¶/, "\n")%0a%3c   else%0a%3c     q = q.force_encoding("ISO-8859-1").%0a%3c       gsub(/#{0xb6.chr.force_encoding("ISO-8859-1")}/, "\n")%0a%3c   end%0a%3c   q%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c ''Note:'' I put the test for UTF-8 first, as most lines will match that if they don't include the one-byte pilcrow.%0a%3c %0a%3c %0a
host:1355701392=71.63.215.130
