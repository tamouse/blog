version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
author=tamara
charset=ISO-8859-1
csum=
ctime=1288633169
host=127.0.0.1
name=Technology.KeepASampleConfig
rev=4
targets=Technology.KeepASampleConfig,Technology.PmWiki,Profiles.Tamara
text=[[#excerpt]]%0aWhen crafting a web application, it is a good practice to put configuration details into separate file to be included in the application code. I typically name this file @@config.inc.php@@ (Using an .inc.php extension instead of a .php extension indicates that this is code to be included rather than called directly. '''Note:''' always use a .php extension on include files so they can't be downloaded as text file to a browser.)%0a[[#excerptend]]%0a%0a%0aA sample snippet of a config file may look like this:%0a%0a(:source lang=php linenum header="Configuration file fragment":)%0a/**%0a * Database connectivity constants.%0a * Replace with appropriate values for your local installation%0a **/%0a%0adefine("DBHOST",'localhost');%0adefine("DBUSER",'someuser');%0adefine("DBPASS",'somepassword');%0adefine("DBNAME",'somedatabase');%0a(:sourceend:)%0a%0aIf you put your code in a public repository, such as [[http://gitorious.org/|Gitorious]], you don't want anyone to be able to download your database access credentials.%0a%0aBased on how things work in [[PmWiki]], I have created another file, called @@sample-config.inc.php@@ that mirrors the real @@config.inc.php@@ file save for the details you don't want to get out. Then, when a person downloads your code, they can create their own @@config.inc.php@@ file based off the sample one, filling in the details and customizing their installation.%0a%0aBut when you are working on your application, you don't want to have to keep track of all the changes you make to @@config.inc.php@@ to keep @@sample-config.inc.php@@ up-to-date. So, a simple perl script will do the trick:%0a%0a(:source lang=perl linenum header="clean_config.pl":)%0a#!/usr/bin/perl -n%0a%0a# This program is a filter -- it is intended to be run%0a# such that an implicit while loop is run on each line%0a# of the input file(s)%0a%0a/DBHOST|DBNAME|DBPASS|DBUSER/ && s/,(['"])[^'"]*(['"])\);/,\1\2);/g;%0aprint $_;%0a(:sourceend:)%0a%0aThe above script will match any line containing @@DBHOST@@, @@DBNAME@@, @@DBPASS@@, or @@DBUSER@@ and substitute the contents of any string with the null string on that line.%0a%0aIf you have other sorts of things you don't want to get out in the wild (e.g. AWS keys, Login passwords, etc), you can adjust the filter accordingly.%0a%0aTo use, simply pass the working @@config.inc.php@@ file as @@STDIN@@ and redirect @@STDOUT@@ to your @@sample-config.inc.php@@ file:%0a%0a(:source lang=bash:)%0a$ ~/bin/clean_config.pl %3cconfig.inc.php >sample-config.inc.php%0a(:sourceend:)%0a%0a(Set the script to executable first.)%0a%0a!!Update%0a-- [[~tamara]] April 17, 2012, at 09:22 PM%0a%0aThere are many, many ways to do configuration, based on the language and application at hand. The above is a rather crude method that masks the setup Wordpress uses in their configuration file.%0a%0aCredentials and such should really not be stored with the application source (as I've mentioned) but they should also really not be accessible from the web server's path.%0a%0a(:Summary:a handy way to put config data in a repository without exposing private details:)%0a(:Parent:(Technology.)Development:)%0a(:IncludeMe:[[(Technology.)Development]]:)%0a(:Categories:[[!HowTos]]:)%0a(:Tags: app config:)%0a(:tags-hide app config :)%0a
time=1334715722
author:1334715722=tamara
diff:1334715722:1334714369:=8c8%0a%3c (:source lang=php linenum header="Configuration file fragment":)%0a---%0a> (:source lang=php -trim linenum:)%0a17a18,25%0a> %0a> /**%0a>  * Database constants -- do not change unless you change the schema%0a>  **/%0a> %0a> define("TBLPREFIX",'cg_');%0a> define("SUBSCRIPTIONSTBL",TBLPREFIX . 'subscriptions');%0a> define("COMICSTBL", TBLPREFIX . 'comics');%0a20,32c28,72%0a%3c If you put your code in a public repository, such as [[http://gitorious.org/|Gitorious]], you don't want anyone to be able to download your database access credentials.%0a%3c %0a%3c Based on how things work in [[PmWiki]], I have created another file, called @@sample-config.inc.php@@ that mirrors the real @@config.inc.php@@ file save for the details you don't want to get out. Then, when a person downloads your code, they can create their own @@config.inc.php@@ file based off the sample one, filling in the details and customizing their installation.%0a%3c %0a%3c But when you are working on your application, you don't want to have to keep track of all the changes you make to @@config.inc.php@@ to keep @@sample-config.inc.php@@ up-to-date. So, a simple perl script will do the trick:%0a%3c %0a%3c (:source lang=perl linenum header="clean_config.pl":)%0a%3c #!/usr/bin/perl -n%0a%3c %0a%3c # This program is a filter -- it is intended to be run%0a%3c # such that an implicit while loop is run on each line%0a%3c # of the input file(s)%0a%3c %0a---%0a> However, oftentimes, the @@config.inc.php@@ file contains details that you don't want to share. If you put your code in a public repository, such as [[http://gitorious.org/|Gitorious]], you don't want anyone to be able to download your database access credentials.%0a> %0a> What I have done is create another file, called @@sample-config.inc.php@@ that mirrors the real @@config.inc.php@@ file save for the details you don't want to get out. Then, when a person downloads your code, they can create their own @@config.inc.php@@ file based off the sample one, filling in the details and customizing their installation.%0a> %0a> To make this work, however, requires some administrative work. What I have done is build a [[Glossary#Makefile|Makefile]] that executes the required commands to build a new sample config file based off the current config file:%0a> %0a> (:source linenum -trim highlight='2,17,18' lang=make:)%0a> repofiles = \%0a> (list files that you want to track in your repository here)%0a> %0a> %0a> updaterepo: admin/last_update%0a> 	git commit # will launch an editor to create the commit message%0a> 	git push origin master%0a> %0a> 	%0a> admin/last_update: $(repofiles)%0a> 	git add $?%0a> 	touch admin/last_update%0a> 	git add admin/last_update%0a> %0a> %0a> %0a> sample-config.inc: config.inc%0a> 	admin/clean_config.pl config.inc.php > sample-config.inc.php%0a> (:sourcend:)%0a> %0a> As you can see, @@sample-config.inc.php@@ will be updated whenever there have been changes made to @@config.inc.php@@. @@admin/clean_config.pl@@ is a little [[Glossary#Perl|Perl]] script that does the actual clean-up work and outputs the repo-safe sample config file. Here is my example of the clean-up script:%0a> %0a> (:source lang=perl -trim linenum:)%0a> #!/sw/bin/perl -n%0a> %0a> #%0a> # clean_config.pl - clean the config.inc file and write to stdout%0a> # (to be used in a make update to create a safe sample-config.inc without passwords and local data)%0a> #%0a> # @author Tamara Temple%0a> # @version $Id$%0a> # @copyright Tamara Temple Development, 2010-%0a> # @license GPL%0a> # @package comicgetter%0a> #%0a> %0a> # This program is a filter -- it is intended to be run such that an implicit while loop is run on each line of the input file(s)%0a> %0a33a74%0a> #/DEBUG/ && s/TRUE/FALSE/;%0a39,54c80,83%0a%3c If you have other sorts of things you don't want to get out in the wild (e.g. AWS keys, Login passwords, etc), you can adjust the filter accordingly.%0a%3c %0a%3c To use, simply pass the working @@config.inc.php@@ file as @@STDIN@@ and redirect @@STDOUT@@ to your @@sample-config.inc.php@@ file:%0a%3c %0a%3c (:source lang=bash:)%0a%3c $ ~/bin/clean_config.pl %3cconfig.inc.php >sample-config.inc.php%0a%3c (:sourceend:)%0a%3c %0a%3c (Set the script to executable first.)%0a%3c %0a%3c !!Update%0a%3c -- [[~tamara]] April 17, 2012, at 09:22 PM%0a%3c %0a%3c There are many, many ways to do configuration, based on the language and application at hand. The above is a rather crude method that masks the setup Wordpress uses in their configuration file.%0a%3c %0a%3c Credentials and such should really not be stored with the application source (as I've mentioned) but they should also really not be accessible from the web server's path.%0a---%0a> (Notice there's a commented out statement for resetting the @@DEBUG@@ flag. I have a [[HowToSetUpForDebuggingInPHP|better way to implement debug flags in PHP]].)%0a> %0a> %0a> %0a
host:1334715722=127.0.0.1
author:1334714369=ImportText
diff:1334714369:1289637266:=1c1,7%0a%3c [[#excerpt]]%0a---%0a> (:Summary:a handy way to put config data in a repository without exposing private details:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a> '''Tags:''' (:tags php, best practices, source code, coding examples, web development:)%0a> %0a3,5c9%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a---%0a> %0a85,90c89%0a%3c (:Summary:a handy way to put config data in a repository without exposing private details:)%0a%3c (:Parent:(Technology.)Development:)%0a%3c (:IncludeMe:[[(Technology.)Development]]:)%0a%3c (:Categories:[[!HowTos]]:)%0a%3c (:Tags: app config:)%0a%3c (:tags-hide app config :)%0a---%0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1334714369=127.0.0.1
author:1289637266=tamara
csum:1289637266=change extension from .inc to .php
diff:1289637266:1288633169:=8,9c8,9%0a%3c When crafting a web application, it is a good practice to put configuration details into separate file to be included in the application code. I typically name this file @@config.inc.php@@ (Using an .inc.php extension instead of a .php extension indicates that this is code to be included rather than called directly. '''Note:''' always use a .php extension on include files so they can't be downloaded as text file to a browser.)%0a%3c %0a---%0a> When crafting a web application, it is a good practice to put configuration details into separate file to be included in the application code. I typically name this file @@config.inc@@ (Using an .inc extension instead of a .php extension indicates that this is code to be included rather than called directly.%0a> %0a32,35c32,35%0a%3c However, oftentimes, the @@config.inc.php@@ file contains details that you don't want to share. If you put your code in a public repository, such as [[http://gitorious.org/|Gitorious]], you don't want anyone to be able to download your database access credentials.%0a%3c %0a%3c What I have done is create another file, called @@sample-config.inc.php@@ that mirrors the real @@config.inc.php@@ file save for the details you don't want to get out. Then, when a person downloads your code, they can create their own @@config.inc.php@@ file based off the sample one, filling in the details and customizing their installation.%0a%3c %0a---%0a> However, oftentimes, the @@config.inc@@ file contains details that you don't want to share. If you put your code in a public repository, such as [[http://gitorious.org/|Gitorious]], you don't want anyone to be able to download your database access details.%0a> %0a> What I have done is create another file, called @@sample-config.inc@@ that mirrors the real @@config.inc@@ file save for the details you don't want to get out. Then, when a person downloads your code, they can create their own @@config.inc@@ file based off the sample one, filling in the details and customizing their installation.%0a> %0a56c56%0a%3c 	admin/clean_config.pl config.inc.php > sample-config.inc.php%0a---%0a> 	admin/clean_config.pl config.inc > sample-config.inc%0a59,60c59,60%0a%3c As you can see, @@sample-config.inc.php@@ will be updated whenever there have been changes made to @@config.inc.php@@. @@admin/clean_config.pl@@ is a little [[Glossary#Perl|Perl]] script that does the actual clean-up work and outputs the repo-safe sample config file. Here is my example of the clean-up script:%0a%3c %0a---%0a> As you can see, @@sample-config.inc@@ will be updated whenever there have been changes made to @@config.inc@@. @@admin/clean_config.pl@@ is a little [[Glossary#Perl|Perl]] script that does the actual clean-up work and outputs the repo-safe sample config file. Here is my example of the clean-up script:%0a> %0a89c89%0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a---%0a> %25rframe%25 '''Categories:''' [[!Uncategorized]]%0a
host:1289637266=71.63.211.0
author:1288633169=tamara
diff:1288633169:1288633169:=1,89d0%0a%3c (:Summary:a handy way to put config data in a repository without exposing private details:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c '''Tags:''' (:tags php, best practices, source code, coding examples, web development:)%0a%3c %0a%3c When crafting a web application, it is a good practice to put configuration details into separate file to be included in the application code. I typically name this file @@config.inc@@ (Using an .inc extension instead of a .php extension indicates that this is code to be included rather than called directly.%0a%3c %0a%3c A sample snippet of a config file may look like this:%0a%3c %0a%3c (:source lang=php -trim linenum:)%0a%3c /**%0a%3c  * Database connectivity constants.%0a%3c  * Replace with appropriate values for your local installation%0a%3c  **/%0a%3c %0a%3c define("DBHOST",'localhost');%0a%3c define("DBUSER",'someuser');%0a%3c define("DBPASS",'somepassword');%0a%3c define("DBNAME",'somedatabase');%0a%3c %0a%3c /**%0a%3c  * Database constants -- do not change unless you change the schema%0a%3c  **/%0a%3c %0a%3c define("TBLPREFIX",'cg_');%0a%3c define("SUBSCRIPTIONSTBL",TBLPREFIX . 'subscriptions');%0a%3c define("COMICSTBL", TBLPREFIX . 'comics');%0a%3c (:sourceend:)%0a%3c %0a%3c However, oftentimes, the @@config.inc@@ file contains details that you don't want to share. If you put your code in a public repository, such as [[http://gitorious.org/|Gitorious]], you don't want anyone to be able to download your database access details.%0a%3c %0a%3c What I have done is create another file, called @@sample-config.inc@@ that mirrors the real @@config.inc@@ file save for the details you don't want to get out. Then, when a person downloads your code, they can create their own @@config.inc@@ file based off the sample one, filling in the details and customizing their installation.%0a%3c %0a%3c To make this work, however, requires some administrative work. What I have done is build a [[Glossary#Makefile|Makefile]] that executes the required commands to build a new sample config file based off the current config file:%0a%3c %0a%3c (:source linenum -trim highlight='2,17,18' lang=make:)%0a%3c repofiles = \%0a%3c (list files that you want to track in your repository here)%0a%3c %0a%3c %0a%3c updaterepo: admin/last_update%0a%3c 	git commit # will launch an editor to create the commit message%0a%3c 	git push origin master%0a%3c %0a%3c 	%0a%3c admin/last_update: $(repofiles)%0a%3c 	git add $?%0a%3c 	touch admin/last_update%0a%3c 	git add admin/last_update%0a%3c %0a%3c %0a%3c %0a%3c sample-config.inc: config.inc%0a%3c 	admin/clean_config.pl config.inc > sample-config.inc%0a%3c (:sourcend:)%0a%3c %0a%3c As you can see, @@sample-config.inc@@ will be updated whenever there have been changes made to @@config.inc@@. @@admin/clean_config.pl@@ is a little [[Glossary#Perl|Perl]] script that does the actual clean-up work and outputs the repo-safe sample config file. Here is my example of the clean-up script:%0a%3c %0a%3c (:source lang=perl -trim linenum:)%0a%3c #!/sw/bin/perl -n%0a%3c %0a%3c #%0a%3c # clean_config.pl - clean the config.inc file and write to stdout%0a%3c # (to be used in a make update to create a safe sample-config.inc without passwords and local data)%0a%3c #%0a%3c # @author Tamara Temple%0a%3c # @version $Id$%0a%3c # @copyright Tamara Temple Development, 2010-%0a%3c # @license GPL%0a%3c # @package comicgetter%0a%3c #%0a%3c %0a%3c # This program is a filter -- it is intended to be run such that an implicit while loop is run on each line of the input file(s)%0a%3c %0a%3c /DBHOST|DBNAME|DBPASS|DBUSER/ && s/,(['"])[^'"]*(['"])\);/,\1\2);/g;%0a%3c #/DEBUG/ && s/TRUE/FALSE/;%0a%3c print $_;%0a%3c (:sourceend:)%0a%3c %0a%3c The above script will match any line containing @@DBHOST@@, @@DBNAME@@, @@DBPASS@@, or @@DBUSER@@ and substitute the contents of any string with the null string on that line.%0a%3c %0a%3c (Notice there's a commented out statement for resetting the @@DEBUG@@ flag. I have a [[HowToSetUpForDebuggingInPHP|better way to implement debug flags in PHP]].)%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!Uncategorized]]%0a
host:1288633169=71.63.211.0
