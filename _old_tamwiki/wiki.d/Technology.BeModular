version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4
author=tamara
charset=ISO-8859-1
csum=add category
ctime=1288649174
host=75.144.38.217
name=Technology.BeModular
rev=4
targets=Technology.WriteFunctionsInASeparateInclude,Technology.TopDownDesign,Technology.BottomUpDesign,Technology.Refactoring,Technology.Design,Technology.IncludeMe,Category.Articles,Category.BestPractices
text=!!Introduction%0a[[#excerpt]]%0aGood software design calls for clean, well-though-out functions. Keeping functions and procedures small and modular aids several aspects of a good programming practice.%0a[[#excerptend]]%0a%0a!!The Issue%0aI've seen some horrendous code that went on for pages and pages. I%0aonce worked on maintaining a piece of code that had one module that%0acovered 15 pages. You just couldn't keep track of where the various%0aparts began and ended. %0a%0aOne of the two main issues with non-modular code is that it is a night-mare to maintain if you can't find anything, and you can't reuse things you've already written without doing a copypasta, and ''then'' you have to maintain them in multiple places.%0a%0a!!The Solution%0a'''Modular programming''' to the rescue! In modular programming, you write%0ashort, single-purpose functions and methods that can sit comfortably%0aon a page or a screenful. You don't have to scroll for ages to find%0athe top or the bottom of a loop, nor is your nesting so awful that you%0acan't keep track of braces (or whatever is supposed to delimit blocks%0ain the language of your choice).%0a%0aAs I wrote [[WriteFunctionsInASeparateInclude|elsewhere]] code reused%0ais a great way to improve your development time. Writing more modular,%0asingle-functional code is a great way to begin to build a reusable%0alibrary of components. %0a%0aThere are basically two ways to approach modular design:%0a[[TopDownDesign|top down]] and [[BottomUpDesign|bottom up]]. You%0ashould employ both, in actuality, and take opportunities to%0a[[Refactoring|refactor]] your code to make it more maintainable and%0areusable.%0a%0a%0a(:if false:)%0aSummary:write short, clean code that only does one thing%0aParent:(Technology.)Design%0aIncludeMe:[[Technology.Design]]%0aCategories:[[!Articles]], [[!BestPractices]]%0aTags: best practices%0a(:tags-hide best practices :)%0a(:ifend:)%0a%0a%0a
time=1352135387
author:1352135387=tamara
csum:1352135387=add category
diff:1352135387:1332282637:minor=38c38%0a%3c Categories:[[!Articles]], [[!BestPractices]]%0a---%0a> Categories:[[!Articles]]%0a
host:1352135387=75.144.38.217
author:1332282637=tamara
csum:1332282637=move page from main
diff:1332282637:1332282027:=1,43c1,12%0a%3c !!Introduction%0a%3c [[#excerpt]]%0a%3c Good software design calls for clean, well-though-out functions. Keeping functions and procedures small and modular aids several aspects of a good programming practice.%0a%3c [[#excerptend]]%0a%3c %0a%3c !!The Issue%0a%3c I've seen some horrendous code that went on for pages and pages. I%0a%3c once worked on maintaining a piece of code that had one module that%0a%3c covered 15 pages. You just couldn't keep track of where the various%0a%3c parts began and ended. %0a%3c %0a%3c One of the two main issues with non-modular code is that it is a night-mare to maintain if you can't find anything, and you can't reuse things you've already written without doing a copypasta, and ''then'' you have to maintain them in multiple places.%0a%3c %0a%3c !!The Solution%0a%3c '''Modular programming''' to the rescue! In modular programming, you write%0a%3c short, single-purpose functions and methods that can sit comfortably%0a%3c on a page or a screenful. You don't have to scroll for ages to find%0a%3c the top or the bottom of a loop, nor is your nesting so awful that you%0a%3c can't keep track of braces (or whatever is supposed to delimit blocks%0a%3c in the language of your choice).%0a%3c %0a%3c As I wrote [[WriteFunctionsInASeparateInclude|elsewhere]] code reused%0a%3c is a great way to improve your development time. Writing more modular,%0a%3c single-functional code is a great way to begin to build a reusable%0a%3c library of components. %0a%3c %0a%3c There are basically two ways to approach modular design:%0a%3c [[TopDownDesign|top down]] and [[BottomUpDesign|bottom up]]. You%0a%3c should employ both, in actuality, and take opportunities to%0a%3c [[Refactoring|refactor]] your code to make it more maintainable and%0a%3c reusable.%0a%3c %0a%3c %0a%3c (:if false:)%0a%3c Summary:write short, clean code that only does one thing%0a%3c Parent:(Technology.)Design%0a%3c IncludeMe:[[Technology.Design]]%0a%3c Categories:[[!Articles]]%0a%3c Tags: best practices%0a%3c (:tags-hide best practices :)%0a%3c (:ifend:)%0a%3c %0a%3c %0a---%0a> (:Summary:write short, clean code:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a> '''Tags:''' (:tags best practices, coding examples, source code, web development:)%0a> %0a> I've seen some horrendous code that went on for pages and pages. I once worked on maintaining a piece of code that had one module that covered 15 pages. You just couldn't keep track of where the various parts began and ended. Modular programming to the rescue! In modular programming, you write short, single-purpose functions and methods that can sit comfortably on a page or a screenful. You don't have to scroll for ages to find the top or the bottom of a loop, nor is your nesting so awful that you can't keep track of braces (or whatever is supposed to delimit blocks in the language of your choice).%0a> %0a> As I wrote [[WriteFunctionsInASeparateInclude|elsewhere]] code reused is a great way to improve your development time. Writing more modular, single-functional code is a great way to begin to build a reusable library of components.%0a> %0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1332282637=71.63.211.0
author:1332282027=tamara
csum:1332282027=Page moved to Technology.BeModular from Main.BeModular
diff:1332282027:1288649174:=
host:1332282027=71.63.211.0
author:1288649174=tamara
diff:1288649174:1288649174:=1,12d0%0a%3c (:Summary:write short, clean code:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c '''Tags:''' (:tags best practices, coding examples, source code, web development:)%0a%3c %0a%3c I've seen some horrendous code that went on for pages and pages. I once worked on maintaining a piece of code that had one module that covered 15 pages. You just couldn't keep track of where the various parts began and ended. Modular programming to the rescue! In modular programming, you write short, single-purpose functions and methods that can sit comfortably on a page or a screenful. You don't have to scroll for ages to find the top or the bottom of a loop, nor is your nesting so awful that you can't keep track of braces (or whatever is supposed to delimit blocks in the language of your choice).%0a%3c %0a%3c As I wrote [[WriteFunctionsInASeparateInclude|elsewhere]] code reused is a great way to improve your development time. Writing more modular, single-functional code is a great way to begin to build a reusable library of components.%0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288649174=71.63.211.0
