version=pmwiki-2.2.38 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10.5; rv:13.0) Gecko/20100101 Firefox/13.0.1
author=tamara
charset=ISO-8859-1
csum=
ctime=1342306100
host=71.63.211.0
name=Technology.ParsingHTMLinPerl
rev=2
targets=Technology.ParsingHTMLinPerl,Technology.Perl,Technology.IncludeMe,Category.Articles
text=>>comment%3c%3c%0aSummary:a few ways to parse HTML in perl%0aParent:(Technology.)Perl%0aIncludeMe:[[(Technology.)Perl]]%0aCategories:[[!Articles]]%0aTags: perl, html, parsing%0a(:tags-hide perl, html, parsing :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0aHTML has been claimed to be impossible to parse using regular expressions. Thus, many different parsers and modules have been created to do just that. Here are some of the ones I've used to some success.%0a[[#excerptend]]%0a%0a%0a!! HTML::Parser%0aThis is the basic one I started with, and it is fairly complicated to understand how one does this. The documentation is not very good at explaining what is possible, but the examples given in the source distribution help a great deal.%0a%0a(:source lang=perl linenum tabwidth=4 header="HTML::Parser basic usage":)%0ause HTML::Parser ();%0a%0a# Create parser object%0a$p = HTML::Parser->new( api_version => 3,%0a                        start_h => [\&start, "tagname, self"],%0a                        end_h   => [\&end,   "tagname"],%0a);%0a%0a# set up handlers for dealing with the parsed elements%0asub start {%0a   my ($tag,$self) = @_;%0a   # $tag = the name of that ('a','img','div','p', etc)%0a   # $self = reference to the current tag%0a%0a   # do something at the beginning of the tag ...%0a%0a}%0a%0asub end {%0a   my ($tag) = @_;%0a%0a   # do something at the end of the tag ...%0a%0a}%0a%0a# Parse directly from file%0a$p->parse_file("foo.html");%0a# or%0aopen(my $fh, "%3c:utf8", "foo.html") || die;%0a$p->parse_file($fh);%0a%0a# OR.. parse html already in a variable%0a$p->parse($html);%0a(:sourceend:)%0a%0a!! Getting the title of a document%0a%0a(:source lang=perl linenum tabwidth=4 -getcode header="parsing the document to get just the title":)%0a#!/usr/bin/perl%0a%0a# This program will print out the title of an HTML document.%0a%0ause strict;%0ause HTML::Parser ();%0a%0asub title_handler%0a{%0a    my $self = shift;%0a    # Add a couple of handlers to this branch of the parse tree%0a    # print out just the inner text of the %3ctitle>...%3c/title> node%0a    $self->handler(text => sub { print @_ }, "dtext");%0a    # don't bother processing any more after this point%0a    $self->handler(end  => "eof", "self");%0a}%0a%0amy $p = HTML::Parser->new(%0a          api_version => 3,%0a          # set the handler for the start of each tag%0a          start_h => [\&title_handler, "self"],%0a          # only report the %3ctitle> tag%0a          report_tags => ['title'],%0a);%0a%0a# Parse the html file specified on the command line%0a$p->parse_file(shift || die) || die $!;%0aprint "\n";%0a(:sourceend:)%0a%0a%0a!! Stripping html of comments%0a%0a
time=1342311353
author:1342311353=tamara
diff:1342311353:1342306100:=
host:1342311353=71.63.211.0
author:1342306100=tamara
diff:1342306100:1342306100:=1,89d0%0a%3c >>comment%3c%3c%0a%3c Summary:a few ways to parse HTML in perl%0a%3c Parent:(Technology.)Perl%0a%3c IncludeMe:[[(Technology.)Perl]]%0a%3c Categories:[[!Articles]]%0a%3c Tags: perl, html, parsing%0a%3c (:tags-hide perl, html, parsing :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c HTML has been claimed to be impossible to parse using regular expressions. Thus, many different parsers and modules have been created to do just that. Here are some of the ones I've used to some success.%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a%3c !! HTML::Parser%0a%3c This is the basic one I started with, and it is fairly complicated to understand how one does this. The documentation is not very good at explaining what is possible, but the examples given in the source distribution help a great deal.%0a%3c %0a%3c (:source lang=perl linenum tabwidth=4 header="HTML::Parser basic usage":)%0a%3c use HTML::Parser ();%0a%3c %0a%3c # Create parser object%0a%3c $p = HTML::Parser->new( api_version => 3,%0a%3c                         start_h => [\&start, "tagname, self"],%0a%3c                         end_h   => [\&end,   "tagname"],%0a%3c );%0a%3c %0a%3c # set up handlers for dealing with the parsed elements%0a%3c sub start {%0a%3c    my ($tag,$self) = @_;%0a%3c    # $tag = the name of that ('a','img','div','p', etc)%0a%3c    # $self = reference to the current tag%0a%3c %0a%3c    # do something at the beginning of the tag ...%0a%3c %0a%3c }%0a%3c %0a%3c sub end {%0a%3c    my ($tag) = @_;%0a%3c %0a%3c    # do something at the end of the tag ...%0a%3c %0a%3c }%0a%3c %0a%3c # Parse directly from file%0a%3c $p->parse_file("foo.html");%0a%3c # or%0a%3c open(my $fh, "%3c:utf8", "foo.html") || die;%0a%3c $p->parse_file($fh);%0a%3c %0a%3c # OR.. parse html already in a variable%0a%3c $p->parse($html);%0a%3c (:sourceend:)%0a%3c %0a%3c !! Getting the title of a document%0a%3c %0a%3c (:source lang=perl linenum tabwidth=4 -getcode header="parsing the document to get just the title":)%0a%3c #!/usr/bin/perl%0a%3c %0a%3c # This program will print out the title of an HTML document.%0a%3c %0a%3c use strict;%0a%3c use HTML::Parser ();%0a%3c %0a%3c sub title_handler%0a%3c {%0a%3c     my $self = shift;%0a%3c     # Add a couple of handlers to this branch of the parse tree%0a%3c     # print out just the inner text of the %3ctitle>...%3c/title> node%0a%3c     $self->handler(text => sub { print @_ }, "dtext");%0a%3c     # don't bother processing any more after this point%0a%3c     $self->handler(end  => "eof", "self");%0a%3c }%0a%3c %0a%3c my $p = HTML::Parser->new(%0a%3c           api_version => 3,%0a%3c           # set the handler for the start of each tag%0a%3c           start_h => [\&title_handler, "self"],%0a%3c           # only report the %3ctitle> tag%0a%3c           report_tags => ['title'],%0a%3c );%0a%3c %0a%3c # Parse the html file specified on the command line%0a%3c $p->parse_file(shift || die) || die $!;%0a%3c print "\n";%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c !! Stripping html of comments%0a%3c %0a
host:1342306100=71.63.211.0
