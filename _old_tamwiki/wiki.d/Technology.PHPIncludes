version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
author=ImportText
charset=ISO-8859-1
csum=&gt;&gt;important&lt;&lt; See also AWarningAboutPHPIncludeFiles. &gt;&gt;&lt;&lt;  that class.[^It would be awesome for php to have class autoloaders, and [[so it does -&gt; http://us.php.net/manual/en/language.oop5.autoload.php]]. ^]
ctime=1321928074
host=127.0.0.1
name=Technology.PHPIncludes
rev=3
targets=Technology.PHPIncludes,Technology.PHP,Technology.IncludeMe,Category.Articles,Technology.AWarningAboutPHPIncludeFiles,Technology.ModelViewControllerParadigm
text=(:if false:)%0aSummary:using include and it's various siblings%0aParent:(Technology.)PHP%0aIncludeMe:[[Technology.PHP]]%0aCategories:[[!Articles]]%0aTags: php, languages, syntax, includes, best practices%0a(:tags-hide php, languages, syntax, includes, best practices:)%0a(:ifend:)%0a%0a>>important%3c%3c%0aSee also AWarningAboutPHPIncludeFiles.%0a>>%3c%3c%0a%0a[[PHP]] is a wonderful language to use for all sorts of things, not%0ajust web applications. One of it's great features is the ability to%0ainclude other php scripts in the main script. This can lead to some%0ainteresting application architectures.%0a%0a!!The include family%0a%0aThere are 4 types of include mechanisms:%0a* include%0a* include_once%0a* require%0a* require_once%0a%0aThese all do similar things, but there are some differences.%0a%0a* The _once directives will faithfully only allow you to include a%0a  file one time during the run of the script, thus saving you from%0a  having to worry about including something more than once in%0a  different scripts if they use the same features.%0a%0a* The difference between the include* and the require* directives is%0a  subtle. Require will issue a compiler error and fail if the file is%0a  not found in the [[#includepath | include path]], whereas include will issue a warning%0a  and continue.%0a%0aGenerally speaking, unless you are going to provide your own error%0ahandlers, on a production application that is open to users, you%0aprobably don't want to use require*, and use include* instead to%0aprovide graceful degredation if the features in the included script%0aare not available. This is much preferrable than presenting a%0acompletely blank page to the user.%0a%0a[[#includepath]]%0a!! The Include Path%0a%0aPHP will search it's include path to look for the filespec given in%0athe directive. This include path is set in the%0a[[http://us.php.net/manual/en/ini.php| [@php.ini@] ]] file in the%0a[[http://us.php.net/manual/en/ini.core.php#ini.include-path | [@include_path@] ]]%0aentry. PHP will search this path, then look in the calling scripts%0adirectory and finally the current working directory. (This can make for%0asome interesting patterns in include directives.)%0a%0a!!Common code, utilities, modularization%0a%0aThe most frequent application of includes is to include other parts of%0athe application. Any code that is used in multiple places or%0aapplications should be written as a separate chunk of php and included%0ain the application. This is very appropriate for libraries of reusable%0acode, and also for modularizing an application. It's quite a%0amaintenance nightmare to have to wade through an application script%0athat is miles long and having functions and variables all over the%0aplace.%0a%0aIn particular, doing object-oriented programming is when to make good%0ause of includes. Your class is nicely enclosed in it's own php file%0awhich you can include in your main and then instantiate an object of%0athat class.[^It would be awesome for php to have class autoloaders, and [[so it does -> http://us.php.net/manual/en/language.oop5.autoload.php]]. ^] %0a%0a!!Single entry, with functions dispatched via includes%0a%0aIn this model, there is a single entry script, say index.php, for%0aexample.[^There may be reasons '''not''' to name the single entry script index.php. If you're creating an application that will be distributed and installed, giving it a proper name may make it easier for people to upgrade your application, and to affect any sort of customizations they may want on their own directory index file.^]%0aThe%0asingle entry script will use include or one of it's siblings to pull%0ain the various pieces of code to run the application, perhaps%0aincluding certain files only if the current conditions warrant it.%0a%0aThis is a classic way of creating a controller for an%0a[[ModelViewControllerParadigm|MVC]] architecture. The controller pulls%0ain the appropriate models to execute functions, then pulls in the%0aapproprate views to display the output. All this can easily be done%0awith includes.%0a%0a!!Silly uses of includes%0a%0aThe include directives really have no notion of what it is they're%0aincluding, they just do something interesting if the file is not there%0aor is unreadable, otherwise they pass the contents of the file into%0athe php interpretter. Thus, they don't do any sort of checking to see%0awhat is being included. Thus, you can do some silly sorts of things,%0alike this:%0a%0a(:source lang=php:)%0a%3c?php%0aheader("Content-type: image/jpeg");%0ainclude("image.jpg");%0a(:sourceend:)%0a%0aThis will work because the php interpretter is looking for instances%0aof "%3c?php" and "?>" to do anything, which won't appear in the binary%0aimage file.%0a%0aHowever, it's best ''not'' to do these sorts of shennanigans as it%0awill be hard on the person coming back to maintain and fix something,%0ashould that occur[^that person might even be ''You!''^] %0a%0aThe way to handle to above is to use [[http://us.php.net/manual/en/function.readfile.php | [@readfile@] ]] %0ainstead:%0a%0a(:source lang=php:)%0a%3c?php%0aheader("Content-type: image/jpeg");%0areadfile("image.jpg");%0a(:sourceend:)%0a%0aReadfile does not pass anything to the compiler, it simply reads from%0athe file specified and sends the output to the client directly.%0a%0a%0a
time=1334714369
author:1334714369=ImportText
diff:1334714369:1321928826:=3,5c3,6%0a%3c Parent:(Technology.)PHP%0a%3c IncludeMe:[[Technology.PHP]]%0a%3c Categories:[[!Articles]]%0a---%0a> Crumbs:[[Main/]] >> [[ComputerStuff]] >> [[SoftwareAndWebProgramming]]%0a> Parent:PHP%0a> IncludeMe:[[Main.PHP]]%0a> Categories:[[!ComputerStuff]]%0a13a15%0a> (:*toc-float:)%0a122d123%0a%3c %0a
host:1334714369=127.0.0.1
author:1321928826=tamara
diff:1321928826:1321928074:=11,14d10%0a%3c >>important%3c%3c%0a%3c See also AWarningAboutPHPIncludeFiles.%0a%3c >>%3c%3c%0a%3c %0a73c69%0a%3c that class.[^It would be awesome for php to have class autoloaders, and [[so it does -> http://us.php.net/manual/en/language.oop5.autoload.php]]. ^] %0a---%0a> that class.[^It would be awesome for php to have class autoloaders, and so it does: http://us.php.net/manual/en/language.oop5.autoload.php^] %0a
host:1321928826=71.63.211.0
author:1321928074=tamara
csum:1321928074=new page
diff:1321928074:1321928074:=1,120d0%0a%3c (:if false:)%0a%3c Summary:using include and it's various siblings%0a%3c Crumbs:[[Main/]] >> [[ComputerStuff]] >> [[SoftwareAndWebProgramming]]%0a%3c Parent:PHP%0a%3c IncludeMe:[[Main.PHP]]%0a%3c Categories:[[!ComputerStuff]]%0a%3c Tags: php, languages, syntax, includes, best practices%0a%3c (:tags-hide php, languages, syntax, includes, best practices:)%0a%3c (:ifend:)%0a%3c %0a%3c (:*toc-float:)%0a%3c [[PHP]] is a wonderful language to use for all sorts of things, not%0a%3c just web applications. One of it's great features is the ability to%0a%3c include other php scripts in the main script. This can lead to some%0a%3c interesting application architectures.%0a%3c %0a%3c !!The include family%0a%3c %0a%3c There are 4 types of include mechanisms:%0a%3c * include%0a%3c * include_once%0a%3c * require%0a%3c * require_once%0a%3c %0a%3c These all do similar things, but there are some differences.%0a%3c %0a%3c * The _once directives will faithfully only allow you to include a%0a%3c   file one time during the run of the script, thus saving you from%0a%3c   having to worry about including something more than once in%0a%3c   different scripts if they use the same features.%0a%3c %0a%3c * The difference between the include* and the require* directives is%0a%3c   subtle. Require will issue a compiler error and fail if the file is%0a%3c   not found in the [[#includepath | include path]], whereas include will issue a warning%0a%3c   and continue.%0a%3c %0a%3c Generally speaking, unless you are going to provide your own error%0a%3c handlers, on a production application that is open to users, you%0a%3c probably don't want to use require*, and use include* instead to%0a%3c provide graceful degredation if the features in the included script%0a%3c are not available. This is much preferrable than presenting a%0a%3c completely blank page to the user.%0a%3c %0a%3c [[#includepath]]%0a%3c !! The Include Path%0a%3c %0a%3c PHP will search it's include path to look for the filespec given in%0a%3c the directive. This include path is set in the%0a%3c [[http://us.php.net/manual/en/ini.php| [@php.ini@] ]] file in the%0a%3c [[http://us.php.net/manual/en/ini.core.php#ini.include-path | [@include_path@] ]]%0a%3c entry. PHP will search this path, then look in the calling scripts%0a%3c directory and finally the current working directory. (This can make for%0a%3c some interesting patterns in include directives.)%0a%3c %0a%3c !!Common code, utilities, modularization%0a%3c %0a%3c The most frequent application of includes is to include other parts of%0a%3c the application. Any code that is used in multiple places or%0a%3c applications should be written as a separate chunk of php and included%0a%3c in the application. This is very appropriate for libraries of reusable%0a%3c code, and also for modularizing an application. It's quite a%0a%3c maintenance nightmare to have to wade through an application script%0a%3c that is miles long and having functions and variables all over the%0a%3c place.%0a%3c %0a%3c In particular, doing object-oriented programming is when to make good%0a%3c use of includes. Your class is nicely enclosed in it's own php file%0a%3c which you can include in your main and then instantiate an object of%0a%3c that class.[^It would be awesome for php to have class autoloaders, and so it does: http://us.php.net/manual/en/language.oop5.autoload.php^] %0a%3c %0a%3c !!Single entry, with functions dispatched via includes%0a%3c %0a%3c In this model, there is a single entry script, say index.php, for%0a%3c example.[^There may be reasons '''not''' to name the single entry script index.php. If you're creating an application that will be distributed and installed, giving it a proper name may make it easier for people to upgrade your application, and to affect any sort of customizations they may want on their own directory index file.^]%0a%3c The%0a%3c single entry script will use include or one of it's siblings to pull%0a%3c in the various pieces of code to run the application, perhaps%0a%3c including certain files only if the current conditions warrant it.%0a%3c %0a%3c This is a classic way of creating a controller for an%0a%3c [[ModelViewControllerParadigm|MVC]] architecture. The controller pulls%0a%3c in the appropriate models to execute functions, then pulls in the%0a%3c approprate views to display the output. All this can easily be done%0a%3c with includes.%0a%3c %0a%3c !!Silly uses of includes%0a%3c %0a%3c The include directives really have no notion of what it is they're%0a%3c including, they just do something interesting if the file is not there%0a%3c or is unreadable, otherwise they pass the contents of the file into%0a%3c the php interpretter. Thus, they don't do any sort of checking to see%0a%3c what is being included. Thus, you can do some silly sorts of things,%0a%3c like this:%0a%3c %0a%3c (:source lang=php:)%0a%3c %3c?php%0a%3c header("Content-type: image/jpeg");%0a%3c include("image.jpg");%0a%3c (:sourceend:)%0a%3c %0a%3c This will work because the php interpretter is looking for instances%0a%3c of "%3c?php" and "?>" to do anything, which won't appear in the binary%0a%3c image file.%0a%3c %0a%3c However, it's best ''not'' to do these sorts of shennanigans as it%0a%3c will be hard on the person coming back to maintain and fix something,%0a%3c should that occur[^that person might even be ''You!''^] %0a%3c %0a%3c The way to handle to above is to use [[http://us.php.net/manual/en/function.readfile.php | [@readfile@] ]] %0a%3c instead:%0a%3c %0a%3c (:source lang=php:)%0a%3c %3c?php%0a%3c header("Content-type: image/jpeg");%0a%3c readfile("image.jpg");%0a%3c (:sourceend:)%0a%3c %0a%3c Readfile does not pass anything to the compiler, it simply reads from%0a%3c the file specified and sends the output to the client directly.%0a%3c %0a
host:1321928074=71.63.211.0
