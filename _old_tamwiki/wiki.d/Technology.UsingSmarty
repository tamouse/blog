version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
author=tamara
charset=ISO-8859-1
csum=
ctime=1329126032
host=127.0.0.1
name=Technology.UsingSmarty
rev=2
targets=Technology.UsingSmarty,Technology.Smarty,Technology.PHP,Technology.ConfiguringSmarty
text=Using [[Smarty]] is where things start to get complicated. Smarty uses a special templating language which is supposed easier than using [[PHP]] directly. There is some controversy about this.%0a%0aIf you do choose to use [[Smarty]], you will need to develop templates for each of your views. Templating structure is fairly straight-forward as well. Best practice is to make your templates as structured and modular as possible. Thus, you may have the following in your main template:%0a%0a(:source lang=php:)%0a{config_load file="colors.conf"}%0a%0a{include file="header.tpl"}%0a{insert file="banner_ads.tpl" title="My Site"}%0a%0a{if $logged_in}%0a    Welcome, %3cspan style="color:{#fontColor#}">{$name}!%3c/span>%0a{else}%0a    hi, {$name}%0a{/if}%0a%0a{include file="footer.tpl"}%0a(:sourceend:)%0a%0aHere we see some conventions:%0a%0a# [[Smarty]] syntax is fairly straight-forward.%0a# There is a [[PHP]]-like language (in fact, it ''is'' PHP with some restrictions)%0a# There are built-in functions for doing various things%0a# There are variables that can be set and passed to [[Smarty]]%0a%0aTo execute the template, you make the various assignments to pass variables to [[Smarty]], then you display the template:%0a%0a(:source lang=php:)%0a$smarty->assign('name','Dave');%0a%0a$smarty->display('main.tpl');%0a(:sourceend:)%0a%0aIn [[Smarty]] template files, you mix the Smarty code with HTML, as you would if you were using [[PHP]] directly for display.%0a%0aSee [[The Smarty Documentation -> http://www.smarty.net/docs/en/smarty.for.designers.tpl]] for details on writing [[Smarty]] templates.%0a%0a%0a%25lfloat%25[-''%3c%3c Back to ConfiguringSmarty''-]%0a%0a%0a%0a(:Summary:putting Smarty to work in your application:)%0a(:Parent:(Technology.)Smarty:)%0a(:IncludeMe:[[(Technology.)Smarty]]:)%0a(:Categories:[[!Articles]]:)%0a(:Tags: php, programming, web development, templating:)%0a(:tags-hide php, programming, web development, templating :)%0a
time=1334343383
author:1334343383=tamara
diff:1334343383:1329126032:=0a1,12%0a> (:if false:)%0a> Summary:putting Smarty to work in your application%0a> Crumbs:[[Main/]] > [[ComputerStuff]] > [[SoftwareAndWebProgramming]] > [[PHP]]%0a> Parent:(Main.)Smarty%0a> IncludeMe:[[Main.Smarty]]%0a> Categories:[[!ComputerStuff]]%0a> Tags:%0a> (:tags-hide  php, programming, web development, templating:)%0a> (:ifend:)%0a> %0a> ''%3c%3c Back to ConfiguringSmarty''%0a> %0a39,49d50%0a%3c %0a%3c %25lfloat%25[-''%3c%3c Back to ConfiguringSmarty''-]%0a%3c %0a%3c %0a%3c %0a%3c (:Summary:putting Smarty to work in your application:)%0a%3c (:Parent:(Technology.)Smarty:)%0a%3c (:IncludeMe:[[(Technology.)Smarty]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: php, programming, web development, templating:)%0a%3c (:tags-hide php, programming, web development, templating :)%0a
host:1334343383=127.0.0.1
author:1329126032=tamara
csum:1329126032=new page
diff:1329126032:1329126032:=1,50d0%0a%3c (:if false:)%0a%3c Summary:putting Smarty to work in your application%0a%3c Crumbs:[[Main/]] > [[ComputerStuff]] > [[SoftwareAndWebProgramming]] > [[PHP]]%0a%3c Parent:(Main.)Smarty%0a%3c IncludeMe:[[Main.Smarty]]%0a%3c Categories:[[!ComputerStuff]]%0a%3c Tags:%0a%3c (:tags-hide  php, programming, web development, templating:)%0a%3c (:ifend:)%0a%3c %0a%3c ''%3c%3c Back to ConfiguringSmarty''%0a%3c %0a%3c Using [[Smarty]] is where things start to get complicated. Smarty uses a special templating language which is supposed easier than using [[PHP]] directly. There is some controversy about this.%0a%3c %0a%3c If you do choose to use [[Smarty]], you will need to develop templates for each of your views. Templating structure is fairly straight-forward as well. Best practice is to make your templates as structured and modular as possible. Thus, you may have the following in your main template:%0a%3c %0a%3c (:source lang=php:)%0a%3c {config_load file="colors.conf"}%0a%3c %0a%3c {include file="header.tpl"}%0a%3c {insert file="banner_ads.tpl" title="My Site"}%0a%3c %0a%3c {if $logged_in}%0a%3c     Welcome, %3cspan style="color:{#fontColor#}">{$name}!%3c/span>%0a%3c {else}%0a%3c     hi, {$name}%0a%3c {/if}%0a%3c %0a%3c {include file="footer.tpl"}%0a%3c (:sourceend:)%0a%3c %0a%3c Here we see some conventions:%0a%3c %0a%3c # [[Smarty]] syntax is fairly straight-forward.%0a%3c # There is a [[PHP]]-like language (in fact, it ''is'' PHP with some restrictions)%0a%3c # There are built-in functions for doing various things%0a%3c # There are variables that can be set and passed to [[Smarty]]%0a%3c %0a%3c To execute the template, you make the various assignments to pass variables to [[Smarty]], then you display the template:%0a%3c %0a%3c (:source lang=php:)%0a%3c $smarty->assign('name','Dave');%0a%3c %0a%3c $smarty->display('main.tpl');%0a%3c (:sourceend:)%0a%3c %0a%3c In [[Smarty]] template files, you mix the Smarty code with HTML, as you would if you were using [[PHP]] directly for display.%0a%3c %0a%3c See [[The Smarty Documentation -> http://www.smarty.net/docs/en/smarty.for.designers.tpl]] for details on writing [[Smarty]] templates.%0a%3c %0a
host:1329126032=71.63.211.0
