version=pmwiki-2.2.56 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=
ctime=1387838306
host=173.8.101.94
name=Technology.HowToAddTravisToAProject
rev=1
targets=Technology.HowToAddTravisToAProject,Technolog.Testing,Technology.IncludeMe,Category.HowTos,Category.Testing
text=>>comment%3c%3c%0aSummary: A slightly more detailed how-to on adding a specific application to Travis CI involving setting environment variables, changing server software, initializing the build node, and running the tests.%0aParent: (Technolog.)Testing%0aIncludeMe: [[(Technolog.)Testing]]%0aCategories: [[!HowTos]], [[!Testing]]%0aTags: travis, continuous integration, CI, testing%0a(:tags-hide travis, continuous integration, CI, testing:)%0aSource: none%0aPosted: Mon Dec 23 16:25:03 2013%0a(:title How To: Add a repository to Travis CI:)%0a>>%3c%3c%0a%0aA&amp;D has a private [[Travis-CI -> http://travis-ci.com]]%0a[[server -> https://magnum.travis-ci.com/]] that is%0aused to verify changes to our private repos. Initially, this repo did%0anot use travis, since it didn't really have any automated tests to%0arun.%0a%0aAs I started adding `RSpec tests,%0aone of the lead devs%0arecommended including the repo in the travis CI%0aenvironment as well. This wasn't quite as straight-forward as%0ainitially thought, so this attempts to document the pieces in pulling%0athis together.%0a%0a!! Configuring [@.travis.yml@]%0a%0aThe first part of getting a repository ready to run under Travis is to%0acreate a [@.travis.yml@] file to tell Travis how to build and test your%0arepository.%0a%0aThe Travis documentation is fairly easy to understand, but no set of%0adocumentation is going to understand your specific repository's%0aneeds. There aren't enough examples for every possibly scenario, thus%0ayou need to really understand the environment needs of your%0aapplication.%0a%0aThere are various elements that you need to set up:%0a%0a1. The language and language version%0a2. Environment variables%0a3. Other applications, libraries, servers, and so on that your%0a   application needs in order to run (e.g. Postgresql)%0a4. Travis behavioural elements, such as caching, building, and so on%0a%0a[@.travis.yml@] is (obviously) a YAML file, which is the standard for%0aruby applications.%0a%0a### Setting the language%0a%0aSince we're testing a Rails application here, ruby is our%0alanguage. The version we're using is 2.0.0 (with no particular build%0aset at this point). The two sections we need in the [@.travis.yml@] file%0aare:%0a%0a(:source lang=yaml linenum tabwidth=2  :)%0alanguage: ruby%0arvm:%0a  - 2.0.0%0a(:sourceend:)%0a%0aYou can set multiple values in the [@rvm@] section, to tell travis to%0arun a build on each version. This can explode into a large build%0amatrix, though, so be circumspect. This repo contains a%0a[@.ruby-version@] file so it was easy to limit the versions to build%0awith.%0a%0aThis would be the minimum required to get any Rails app running, but%0aours has a few more requirements.%0a%0a!!! Environment Variables%0a%0aPerformark-Events has some values it needs to pick up from the%0aenvironment to run correctly. With the current set of tests, the%0aDevise configuration parameter [@secret_key_base@] must be set. The%0a[@env_vars-sample.rb@] file is used as a template for the [@env_vars.rb@]%0afile that is used to set defaults if the values aren't set explicitly%0ain the environment.%0a%0aFor the current set of tests, the only env_var needed is%0a[@SECRET_KEY_BASE@] to make the Devise gem happy. Environment variables%0aare set in the [@env@] section of the [@.travis.yml@] file:%0a%0a(:source lang=yaml linenum tabwidth=2  :)%0aenv:%0a  SECRET_KEY_BASE="$(bundle exec rake secret)"%0a(:sourceend:)%0a%0aThere is some secret sauce going on here. The [@rake secret@] task is%0aone provided by the standard Rails installation that will re-generate%0aa secret token, which is just a hashed string, and is quite suitable%0afor the secret key base. The above setting results in travis running%0athe following at the start of the build:%0a%0a(:source lang=bash linenum tabwidth=2  :)%0aexport SECRET_KEY_BASE="$(bundle exec rake secret)"%0a(:sourceend:)%0a%0awhich gives us exactly what we need for the run.%0a%0aAlthough it is a travis default, I've also set the [@RAILS_ENV@] envar%0ato [@'test'@] to ensure we're running in a test situation.%0a%0a!!! Additional Software%0a%0aThe database used in Performark-Events is Postgresql version 9.2,%0abecause it makes use of the JSON variable type that was introduced at%0athat version. Travis by default uses Postgresql v. 9.1, so we need to%0atell it what to use. The [@addons@] section lets us specify the version:%0a%0a(:source lang=yaml linenum tabwidth=2  :)%0aaddons:%0a  postgresql: 9.2%0a(:sourceend:)%0a%0a!!! Prerequisite Steps%0a%0aTravis has hooks that will run before and after certain events in the%0abuild. We need to make sure we have the right configuration files%0acreated and the database created that will work for our repo.%0a%0aThe [@before_script@] section lets us give bash commands that will run%0ajust before the test script starts.%0a%0a!!!! Configuration Files%0a%0aEvery Rails app needs a [@config/database.yml@] file which must be%0amodified by the user when starting up the application. However, a good%0arails practice is to make a sample configuration file which can be%0aincluded in the repository, but not the specific configuration file%0awhich might contain passwords or other credentials that you don't want%0ato put out in public or even semi-public.%0a%0aIn addition, Performark-Events has an environment variable%0ainitialization file, that has similar credential secrets that we don't%0awant explicitly in the repository, so there is a%0a[@config/env_vars.sample.rb@] file that is copied and modified if%0anecessary.%0a%0aSince the sample defaults will work for our needs in the Travis CI%0aenvironment, we can just copy them over directly. If the specific%0avalues in the non-sample files need to be set, you could run the%0asample file through sed, awk, perl, ruby or whatever to make the%0aappropriate edits.%0a%0aWe want to make sure we're putting our work in the proper%0adirectory. Travis provides a few environment variables to us, one of%0awhich is the [@TRAVIS_BUILD_DIR@] envar, that points to the directory of%0athe current build.%0a%0a(Note these might be done quite differently when creating the%0aproduction environment.)%0a%0a(:source lang=yaml linenum tabwidth=2  :)%0abefore_script:%0a  - /bin/cp $TRAVIS_BUILD_DIR/config/database.sample.yml $TRAVIS_BUILD_DIR/config/database.yml%0a  - /bin/cp $TRAVIS_BUILD_DIR/config/env_vars.sample.rb $TRAVIS_BUILD_DIR/config/env_vars.rb%0a(:sourceend:)%0a%0a!!!! Creating The Testing Database%0a%0aFor each travis run, we must create the testing database anew (travis%0adoes not persist databases across runs). Since we're using Postgresql,%0awe simply run the client and create the database with the default%0auser, [@postgres@] as specified by travis.%0a%0a(:source lang=yaml linenum tabwidth=2  :)%0abefore_script:%0a  - psql -c 'create database performark_events_test;' -U postgres%0a(:sourceend:)%0a%0a!!!! The [@before_script@] Section%0a%0aCombining the previous two subsections, the resultant [@before_script@]%0asection that runs all these is:%0a%0a(:source lang=yaml linenum tabwidth=2  :)%0abefore_script:%0a  - /bin/cp $TRAVIS_BUILD_DIR/config/database.sample.yml $TRAVIS_BUILD_DIR/config/database.yml%0a  - /bin/cp $TRAVIS_BUILD_DIR/config/env_vars.sample.rb $TRAVIS_BUILD_DIR/config/env_vars.rb%0a  - psql -c 'create database performark_events_test;' -U postgres%0a(:sourceend:)%0a%0a%0a!! Travis Operations%0a%0a!!! Bundler Caching%0a%0aOne thing that Travis can do for is cache our bundle operations, thus%0asaving considerable time each build in creating the bundle%0aenvironment. For this repo, there is a huge time savings from having%0ato recompile local versions of native code (Nokogiri in particular%0atakes a long time to build the native version).%0a%0aWe can tell Travis to cache the bundle within the [@cache@] section:%0a%0a(:source lang=yaml linenum tabwidth=2  :)%0acache: bundler%0a(:sourceend:)%0a%0a%0a!!! Bundler Options%0a%0aNormally, Travis runs bundler with just the [@--deployment@] option, but%0aI've added [@guard@] and [@pry@] to the Gemfile to enable me to run%0acontinuous testing and debugging locally. We don't want these in the%0aCI run, however, so I've put all the local stuff inside a [@guard@]%0agroup within the Gemfile. We need to tell Travis not to include it:%0a%0a(:source lang=yaml linenum tabwidth=2  :)%0abundler_args: --without guard --deployment%0a(:sourceend:)%0a%0awhich tells bundler to omit the [@guard@] section, and install things as%0aif this were a deployment.%0a%0a%0a!! Final [@.travis.yml@] Contents%0a%0aPutting the whole thing together:%0a%0a(:source lang=yaml linenum tabwidth=2 header=".travis.yml" footer="full contents":)%0alanguage: ruby%0acache: bundler%0abundler_args: --without guard --deployment%0arvm:%0a  - 2.0.0%0abefore_script:%0a  - /bin/cp $TRAVIS_BUILD_DIR/config/database.sample.yml $TRAVIS_BUILD_DIR/config/database.yml%0a  - /bin/cp $TRAVIS_BUILD_DIR/config/env_vars.sample.rb $TRAVIS_BUILD_DIR/config/env_vars.rb%0a  - psql -c 'create database performark_events_test;' -U postgres%0aenv:%0a  RAILS_ENV=test%0a  SECRET_KEY_BASE="$(bundle exec rake secret)"%0aaddons:%0a  postgresql: 9.2%0a(:sourceend:)%0a%0a!! Triggering a Travis Run%0a%0aNormally, Travis will begin a build whenever code is pushed to the%0arepository if the repository contains a [@.travis.yml@] file. The thing%0ayou also need to do is turn on the service hooks for the repository to%0ainteract with Travis CI. To do this, you need to be able to change the%0asettings of the repo on Github. Since I didn't have such permissions,%0aJason did this, but then it wasn't clear why builds were not starting.%0a%0aThe *other* issue with this is that if you've already created a pull%0arequest for a given branch, adding to that branch does *not* seem to%0atrigger Travis builds. Once that PR was merged, then Travis builds%0abegan as expected.%0a%0aAt present, Travis will happily build anytime there is a push to *any*%0abranch on Github, including new feature, bugfix, and chore%0abranches. This includes any new or existing branches, so we don't have%0athe first-time issue any more.%0a%0a!! Acknowledgements%0a%0aMy thanks in particular to [[Jason -> https://github.com/dabootski]]%0afor his help on pushing%0ame to do this and getting this up and running.%0aAlso thanks to%0a[[Kyle -> https://github.com/kkestell]] for his help on understanding the application and%0agetting me up to speed.%0a%0a%0a%0a
time=1387838306
title=How To: Add a repository to Travis CI
author:1387838306=tamara
diff:1387838306:1387838306:=1,268d0%0a%3c >>comment%3c%3c%0a%3c Summary: A slightly more detailed how-to on adding a specific application to Travis CI involving setting environment variables, changing server software, initializing the build node, and running the tests.%0a%3c Parent: (Technolog.)Testing%0a%3c IncludeMe: [[(Technolog.)Testing]]%0a%3c Categories: [[!HowTos]], [[!Testing]]%0a%3c Tags: travis, continuous integration, CI, testing%0a%3c (:tags-hide travis, continuous integration, CI, testing:)%0a%3c Source: none%0a%3c Posted: Mon Dec 23 16:25:03 2013%0a%3c (:title How To: Add a repository to Travis CI:)%0a%3c >>%3c%3c%0a%3c %0a%3c A&amp;D has a private [[Travis-CI -> http://travis-ci.com]]%0a%3c [[server -> https://magnum.travis-ci.com/]] that is%0a%3c used to verify changes to our private repos. Initially, this repo did%0a%3c not use travis, since it didn't really have any automated tests to%0a%3c run.%0a%3c %0a%3c As I started adding `RSpec tests,%0a%3c one of the lead devs%0a%3c recommended including the repo in the travis CI%0a%3c environment as well. This wasn't quite as straight-forward as%0a%3c initially thought, so this attempts to document the pieces in pulling%0a%3c this together.%0a%3c %0a%3c !! Configuring [@.travis.yml@]%0a%3c %0a%3c The first part of getting a repository ready to run under Travis is to%0a%3c create a [@.travis.yml@] file to tell Travis how to build and test your%0a%3c repository.%0a%3c %0a%3c The Travis documentation is fairly easy to understand, but no set of%0a%3c documentation is going to understand your specific repository's%0a%3c needs. There aren't enough examples for every possibly scenario, thus%0a%3c you need to really understand the environment needs of your%0a%3c application.%0a%3c %0a%3c There are various elements that you need to set up:%0a%3c %0a%3c 1. The language and language version%0a%3c 2. Environment variables%0a%3c 3. Other applications, libraries, servers, and so on that your%0a%3c    application needs in order to run (e.g. Postgresql)%0a%3c 4. Travis behavioural elements, such as caching, building, and so on%0a%3c %0a%3c [@.travis.yml@] is (obviously) a YAML file, which is the standard for%0a%3c ruby applications.%0a%3c %0a%3c ### Setting the language%0a%3c %0a%3c Since we're testing a Rails application here, ruby is our%0a%3c language. The version we're using is 2.0.0 (with no particular build%0a%3c set at this point). The two sections we need in the [@.travis.yml@] file%0a%3c are:%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2  :)%0a%3c language: ruby%0a%3c rvm:%0a%3c   - 2.0.0%0a%3c (:sourceend:)%0a%3c %0a%3c You can set multiple values in the [@rvm@] section, to tell travis to%0a%3c run a build on each version. This can explode into a large build%0a%3c matrix, though, so be circumspect. This repo contains a%0a%3c [@.ruby-version@] file so it was easy to limit the versions to build%0a%3c with.%0a%3c %0a%3c This would be the minimum required to get any Rails app running, but%0a%3c ours has a few more requirements.%0a%3c %0a%3c !!! Environment Variables%0a%3c %0a%3c Performark-Events has some values it needs to pick up from the%0a%3c environment to run correctly. With the current set of tests, the%0a%3c Devise configuration parameter [@secret_key_base@] must be set. The%0a%3c [@env_vars-sample.rb@] file is used as a template for the [@env_vars.rb@]%0a%3c file that is used to set defaults if the values aren't set explicitly%0a%3c in the environment.%0a%3c %0a%3c For the current set of tests, the only env_var needed is%0a%3c [@SECRET_KEY_BASE@] to make the Devise gem happy. Environment variables%0a%3c are set in the [@env@] section of the [@.travis.yml@] file:%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2  :)%0a%3c env:%0a%3c   SECRET_KEY_BASE="$(bundle exec rake secret)"%0a%3c (:sourceend:)%0a%3c %0a%3c There is some secret sauce going on here. The [@rake secret@] task is%0a%3c one provided by the standard Rails installation that will re-generate%0a%3c a secret token, which is just a hashed string, and is quite suitable%0a%3c for the secret key base. The above setting results in travis running%0a%3c the following at the start of the build:%0a%3c %0a%3c (:source lang=bash linenum tabwidth=2  :)%0a%3c export SECRET_KEY_BASE="$(bundle exec rake secret)"%0a%3c (:sourceend:)%0a%3c %0a%3c which gives us exactly what we need for the run.%0a%3c %0a%3c Although it is a travis default, I've also set the [@RAILS_ENV@] envar%0a%3c to [@'test'@] to ensure we're running in a test situation.%0a%3c %0a%3c !!! Additional Software%0a%3c %0a%3c The database used in Performark-Events is Postgresql version 9.2,%0a%3c because it makes use of the JSON variable type that was introduced at%0a%3c that version. Travis by default uses Postgresql v. 9.1, so we need to%0a%3c tell it what to use. The [@addons@] section lets us specify the version:%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2  :)%0a%3c addons:%0a%3c   postgresql: 9.2%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Prerequisite Steps%0a%3c %0a%3c Travis has hooks that will run before and after certain events in the%0a%3c build. We need to make sure we have the right configuration files%0a%3c created and the database created that will work for our repo.%0a%3c %0a%3c The [@before_script@] section lets us give bash commands that will run%0a%3c just before the test script starts.%0a%3c %0a%3c !!!! Configuration Files%0a%3c %0a%3c Every Rails app needs a [@config/database.yml@] file which must be%0a%3c modified by the user when starting up the application. However, a good%0a%3c rails practice is to make a sample configuration file which can be%0a%3c included in the repository, but not the specific configuration file%0a%3c which might contain passwords or other credentials that you don't want%0a%3c to put out in public or even semi-public.%0a%3c %0a%3c In addition, Performark-Events has an environment variable%0a%3c initialization file, that has similar credential secrets that we don't%0a%3c want explicitly in the repository, so there is a%0a%3c [@config/env_vars.sample.rb@] file that is copied and modified if%0a%3c necessary.%0a%3c %0a%3c Since the sample defaults will work for our needs in the Travis CI%0a%3c environment, we can just copy them over directly. If the specific%0a%3c values in the non-sample files need to be set, you could run the%0a%3c sample file through sed, awk, perl, ruby or whatever to make the%0a%3c appropriate edits.%0a%3c %0a%3c We want to make sure we're putting our work in the proper%0a%3c directory. Travis provides a few environment variables to us, one of%0a%3c which is the [@TRAVIS_BUILD_DIR@] envar, that points to the directory of%0a%3c the current build.%0a%3c %0a%3c (Note these might be done quite differently when creating the%0a%3c production environment.)%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2  :)%0a%3c before_script:%0a%3c   - /bin/cp $TRAVIS_BUILD_DIR/config/database.sample.yml $TRAVIS_BUILD_DIR/config/database.yml%0a%3c   - /bin/cp $TRAVIS_BUILD_DIR/config/env_vars.sample.rb $TRAVIS_BUILD_DIR/config/env_vars.rb%0a%3c (:sourceend:)%0a%3c %0a%3c !!!! Creating The Testing Database%0a%3c %0a%3c For each travis run, we must create the testing database anew (travis%0a%3c does not persist databases across runs). Since we're using Postgresql,%0a%3c we simply run the client and create the database with the default%0a%3c user, [@postgres@] as specified by travis.%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2  :)%0a%3c before_script:%0a%3c   - psql -c 'create database performark_events_test;' -U postgres%0a%3c (:sourceend:)%0a%3c %0a%3c !!!! The [@before_script@] Section%0a%3c %0a%3c Combining the previous two subsections, the resultant [@before_script@]%0a%3c section that runs all these is:%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2  :)%0a%3c before_script:%0a%3c   - /bin/cp $TRAVIS_BUILD_DIR/config/database.sample.yml $TRAVIS_BUILD_DIR/config/database.yml%0a%3c   - /bin/cp $TRAVIS_BUILD_DIR/config/env_vars.sample.rb $TRAVIS_BUILD_DIR/config/env_vars.rb%0a%3c   - psql -c 'create database performark_events_test;' -U postgres%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c !! Travis Operations%0a%3c %0a%3c !!! Bundler Caching%0a%3c %0a%3c One thing that Travis can do for is cache our bundle operations, thus%0a%3c saving considerable time each build in creating the bundle%0a%3c environment. For this repo, there is a huge time savings from having%0a%3c to recompile local versions of native code (Nokogiri in particular%0a%3c takes a long time to build the native version).%0a%3c %0a%3c We can tell Travis to cache the bundle within the [@cache@] section:%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2  :)%0a%3c cache: bundler%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c !!! Bundler Options%0a%3c %0a%3c Normally, Travis runs bundler with just the [@--deployment@] option, but%0a%3c I've added [@guard@] and [@pry@] to the Gemfile to enable me to run%0a%3c continuous testing and debugging locally. We don't want these in the%0a%3c CI run, however, so I've put all the local stuff inside a [@guard@]%0a%3c group within the Gemfile. We need to tell Travis not to include it:%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2  :)%0a%3c bundler_args: --without guard --deployment%0a%3c (:sourceend:)%0a%3c %0a%3c which tells bundler to omit the [@guard@] section, and install things as%0a%3c if this were a deployment.%0a%3c %0a%3c %0a%3c !! Final [@.travis.yml@] Contents%0a%3c %0a%3c Putting the whole thing together:%0a%3c %0a%3c (:source lang=yaml linenum tabwidth=2 header=".travis.yml" footer="full contents":)%0a%3c language: ruby%0a%3c cache: bundler%0a%3c bundler_args: --without guard --deployment%0a%3c rvm:%0a%3c   - 2.0.0%0a%3c before_script:%0a%3c   - /bin/cp $TRAVIS_BUILD_DIR/config/database.sample.yml $TRAVIS_BUILD_DIR/config/database.yml%0a%3c   - /bin/cp $TRAVIS_BUILD_DIR/config/env_vars.sample.rb $TRAVIS_BUILD_DIR/config/env_vars.rb%0a%3c   - psql -c 'create database performark_events_test;' -U postgres%0a%3c env:%0a%3c   RAILS_ENV=test%0a%3c   SECRET_KEY_BASE="$(bundle exec rake secret)"%0a%3c addons:%0a%3c   postgresql: 9.2%0a%3c (:sourceend:)%0a%3c %0a%3c !! Triggering a Travis Run%0a%3c %0a%3c Normally, Travis will begin a build whenever code is pushed to the%0a%3c repository if the repository contains a [@.travis.yml@] file. The thing%0a%3c you also need to do is turn on the service hooks for the repository to%0a%3c interact with Travis CI. To do this, you need to be able to change the%0a%3c settings of the repo on Github. Since I didn't have such permissions,%0a%3c Jason did this, but then it wasn't clear why builds were not starting.%0a%3c %0a%3c The *other* issue with this is that if you've already created a pull%0a%3c request for a given branch, adding to that branch does *not* seem to%0a%3c trigger Travis builds. Once that PR was merged, then Travis builds%0a%3c began as expected.%0a%3c %0a%3c At present, Travis will happily build anytime there is a push to *any*%0a%3c branch on Github, including new feature, bugfix, and chore%0a%3c branches. This includes any new or existing branches, so we don't have%0a%3c the first-time issue any more.%0a%3c %0a%3c !! Acknowledgements%0a%3c %0a%3c My thanks in particular to [[Jason -> https://github.com/dabootski]]%0a%3c for his help on pushing%0a%3c me to do this and getting this up and running.%0a%3c Also thanks to%0a%3c [[Kyle -> https://github.com/kkestell]] for his help on understanding the application and%0a%3c getting me up to speed.%0a%3c %0a%3c %0a%3c %0a
host:1387838306=173.8.101.94
