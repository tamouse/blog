version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20100101 Firefox/16.0
author=tamara
charset=ISO-8859-1
csum=minor formatting
ctime=1353163528
host=71.63.215.130
name=Technology.PolymorphicTables
rev=2
targets=Technology.PolymorphicTables,Technology.RubyOnRails,Technology.IncludeMe,Category.Articles
text=!! [[Ruby on Rails Guides: A Guide to Active Record Associations: Polymorphic Associations -> http://guides.rubyonrails.org/association_basics.html#polymorphic-associations]]%0aPosted: November 17, 2012, at 08:36 AM%0a%0a>>quote%3c%3c%0a(:nolinkwikiwords:)%0a2.9 Polymorphic Associations%0a%0aA slightly more advanced twist on associations is the polymorphic association. With polymorphic associations, a model can belong to more than one other model, on a single association. For example, you might have a picture model that belongs to either an employee model or a product model. Here&rsquo;s how this could be declared:%0a%0a(:source lang=ruby linenum tabwidth=2:)%0aclass Picture %3c ActiveRecord::Base%0a  belongs_to :imageable, :polymorphic => true%0aend%0a %0aclass Employee %3c ActiveRecord::Base%0a  has_many :pictures, :as => :imageable%0aend%0a %0aclass Product %3c ActiveRecord::Base%0a  has_many :pictures, :as => :imageable%0aend%0a(:sourceend:)%0a%0aYou can think of a polymorphic @@belongs_to@@ declaration as setting up an interface that any other model can use. From an instance of the Employee model, you can retrieve a collection of pictures:@@ @employee.pictures@@.%0a%0aSimilarly, you can retrieve @@ @product.pictures@@.%0a%0aIf you have an instance of the Picture model, you can get to its parent via @@ @picture.imageable@@. To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:%0a%0a(:source lang=ruby linenum tabwidth=2:)%0aclass CreatePictures %3c ActiveRecord::Migration%0a  def change%0a    create_table :pictures do |t|%0a      t.string  :name%0a      t.integer :imageable_id%0a      t.string  :imageable_type%0a      t.timestamps%0a    end%0a  end%0aend%0a(:sourceend:)%0a%0aThis migration can be simplified by using the t.references form:%0a%0a(:source lang=ruby linenum tabwidth=2:)%0aclass CreatePictures %3c ActiveRecord::Migration%0a  def change%0a    create_table :pictures do |t|%0a      t.string :name%0a      t.references :imageable, :polymorphic => true%0a      t.timestamps%0a    end%0a  end%0aend%0a%0a(:sourceend:)%0a%0ahttp://guides.rubyonrails.org/images/polymorphic.png"Polymorphic Association Diagram"%0a%0a(:linkwikiwords:)%0a>>%3c%3c%0a%0a%0a>>comment%3c%3c%0aSummary:In [[Rails -> RubyOnRails]], the concept of a [[polymorphic table -> https://en.wikipedia.org/wiki/Polymorphism_%2528computer_science%2529]] allows an object to know which object of different types it belongs to.%0aParent:(Technology.)RubyOnRails%0aIncludeMe:[[(Technology.)RubyOnRails]]%0aCategories:[[!Articles]]%0aTags: ruby, rails, polymorphism, data relationships%0a(:tags-hide ruby, rails, polymorphism, data relationships :)%0a(:title Link: Ruby on Rails Guides: A Guide to Active Record Associations: Polymorphic Associations:)%0a>>%3c%3c%0a
time=1353163686
title=Link: Ruby on Rails Guides: A Guide to Active Record Associations: Polymorphic Associations
author:1353163686=tamara
csum:1353163686=minor formatting
diff:1353163686:1353163528:minor=24,28c24,28%0a%3c You can think of a polymorphic @@belongs_to@@ declaration as setting up an interface that any other model can use. From an instance of the Employee model, you can retrieve a collection of pictures:@@ @employee.pictures@@.%0a%3c %0a%3c Similarly, you can retrieve @@ @product.pictures@@.%0a%3c %0a%3c If you have an instance of the Picture model, you can get to its parent via @@ @picture.imageable@@. To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:%0a---%0a> You can think of a polymorphic @@belongs_to@@ declaration as setting up an interface that any other model can use. From an instance of the Employee model, you can retrieve a collection of pictures:@@ @employee.pictures @@.%0a> %0a> Similarly, you can retrieve @@ @product.pictures @@.%0a> %0a> If you have an instance of the Picture model, you can get to its parent via @picture.imageable. To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:%0a
host:1353163686=71.63.215.130
author:1353163528=tamara
csum:1353163528=new page
diff:1353163528:1353163528:=1,72d0%0a%3c !! [[Ruby on Rails Guides: A Guide to Active Record Associations: Polymorphic Associations -> http://guides.rubyonrails.org/association_basics.html#polymorphic-associations]]%0a%3c Posted: November 17, 2012, at 08:36 AM%0a%3c %0a%3c >>quote%3c%3c%0a%3c (:nolinkwikiwords:)%0a%3c 2.9 Polymorphic Associations%0a%3c %0a%3c A slightly more advanced twist on associations is the polymorphic association. With polymorphic associations, a model can belong to more than one other model, on a single association. For example, you might have a picture model that belongs to either an employee model or a product model. Here&rsquo;s how this could be declared:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2:)%0a%3c class Picture %3c ActiveRecord::Base%0a%3c   belongs_to :imageable, :polymorphic => true%0a%3c end%0a%3c  %0a%3c class Employee %3c ActiveRecord::Base%0a%3c   has_many :pictures, :as => :imageable%0a%3c end%0a%3c  %0a%3c class Product %3c ActiveRecord::Base%0a%3c   has_many :pictures, :as => :imageable%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c You can think of a polymorphic @@belongs_to@@ declaration as setting up an interface that any other model can use. From an instance of the Employee model, you can retrieve a collection of pictures:@@ @employee.pictures @@.%0a%3c %0a%3c Similarly, you can retrieve @@ @product.pictures @@.%0a%3c %0a%3c If you have an instance of the Picture model, you can get to its parent via @picture.imageable. To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2:)%0a%3c class CreatePictures %3c ActiveRecord::Migration%0a%3c   def change%0a%3c     create_table :pictures do |t|%0a%3c       t.string  :name%0a%3c       t.integer :imageable_id%0a%3c       t.string  :imageable_type%0a%3c       t.timestamps%0a%3c     end%0a%3c   end%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c This migration can be simplified by using the t.references form:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2:)%0a%3c class CreatePictures %3c ActiveRecord::Migration%0a%3c   def change%0a%3c     create_table :pictures do |t|%0a%3c       t.string :name%0a%3c       t.references :imageable, :polymorphic => true%0a%3c       t.timestamps%0a%3c     end%0a%3c   end%0a%3c end%0a%3c %0a%3c (:sourceend:)%0a%3c %0a%3c http://guides.rubyonrails.org/images/polymorphic.png"Polymorphic Association Diagram"%0a%3c %0a%3c (:linkwikiwords:)%0a%3c >>%3c%3c%0a%3c %0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:In [[Rails -> RubyOnRails]], the concept of a [[polymorphic table -> https://en.wikipedia.org/wiki/Polymorphism_%2528computer_science%2529]] allows an object to know which object of different types it belongs to.%0a%3c Parent:(Technology.)RubyOnRails%0a%3c IncludeMe:[[(Technology.)RubyOnRails]]%0a%3c Categories:[[!Articles]]%0a%3c Tags: ruby, rails, polymorphism, data relationships%0a%3c (:tags-hide ruby, rails, polymorphism, data relationships :)%0a%3c (:title Link: Ruby on Rails Guides: A Guide to Active Record Associations: Polymorphic Associations:)%0a%3c >>%3c%3c%0a
host:1353163528=71.63.215.130
