version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20100101 Firefox/16.0
author=tamara
charset=ISO-8859-1
csum=new page
ctime=1352515167
host=71.63.215.130
name=Technology.TimecopRubyGem
rev=2
targets=Technology.TimecopRubyGem,Technology.DateTime,Technology.Ruby,Technology.IncludeMe,Category.Articles,Category.HowTos,Technology.ChronicRubyGem
text=>>comment%3c%3c%0aSummary:A gem providing "time travel" and "time freezing" capabilities, making it dead simple to test time-dependent code. It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call.%0aParent:(Technology.)Ruby%0aIncludeMe:[[(Technology.)Ruby]]%0aCategories:[[!Articles]], [[!HowTos]]%0aTags: ruby, gem, testing, time%0a(:tags-hide ruby, gem, testing, time :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0a>>nutshell%3c%3c%0a%25center%25[+ '''''Incomplete''''' +]%0a>>%3c%3c%0a%0a[[Timecop -> https://github.com/travisjeffery/timecop]] is a nifty ruby gem that is a great aid in testing code that is time-dependent. You can set the time a test will think it's running at, or freeze time to a certain point.%0a[[#excerptend]]%0a%0a!!Links:%0a* [[Github repo for Timecop -> https://github.com/travisjeffery/timecop]]%0a* [[Blog post announcing Timecop with some usage info -> http://blog.smartlogicsolutions.com/2008/11/19/timecop-freeze-time-in-ruby-for-better-testing/]]%0a* [[Timecop README page -> https://github.com/travisjeffery/timecop/blob/master/README.markdown]]%0a* [[Timecop rdoc -> http://johntrupiano.rubyforge.org/timecop/]]%0a%0a!! Basic usage%0a%0a(:source lang=ruby linenum tabwidth=4 header="spec test":)%0arequire 'spec_helper'%0a%0adescribe "Time" do%0a  %0a  context "now" do%0a    it "should report the current time" do%0a      Time.now.should == Chronic.parse("now")%0a    end%0a  end%0a%0a  context "future" do%0a    before do%0a      Timecop.travel(1.week)%0a    end%0a%0a    after do%0a      Timecop.return%0a    end%0a%0a    it "should report the time a week from now" do%0a      Time.now.should == Chronic.parse("next week")%0a    end%0a  end%0aend%0a(:sourceend:)%0a%0a%0a!! Using Timecop with Chronic%0a%0aTimecop, in combination with [[Chronic -> ChronicRubyGem]] makes for some dandy testing ability:%0a%0a(:source lang=ruby linenum tabwidth=4 -getcode header="Using Timecop with Chronic":)%0aTimecop.travel(Chronic.parse('this tuesday 5:00')) do%0a  # test-fu%0aend%0a(:sourceend:)%0a%0a
time=1352515311
author:1352515311=tamara
csum:1352515311=new page
diff:1352515311:1352515167:=11,14d10%0a%3c >>nutshell%3c%3c%0a%3c %25center%25[+ '''''Incomplete''''' +]%0a%3c >>%3c%3c%0a%3c %0a
host:1352515311=71.63.215.130
author:1352515167=tamara
diff:1352515167:1352515167:=1,59d0%0a%3c >>comment%3c%3c%0a%3c Summary:A gem providing "time travel" and "time freezing" capabilities, making it dead simple to test time-dependent code. It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call.%0a%3c Parent:(Technology.)Ruby%0a%3c IncludeMe:[[(Technology.)Ruby]]%0a%3c Categories:[[!Articles]], [[!HowTos]]%0a%3c Tags: ruby, gem, testing, time%0a%3c (:tags-hide ruby, gem, testing, time :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c [[Timecop -> https://github.com/travisjeffery/timecop]] is a nifty ruby gem that is a great aid in testing code that is time-dependent. You can set the time a test will think it's running at, or freeze time to a certain point.%0a%3c [[#excerptend]]%0a%3c %0a%3c !!Links:%0a%3c * [[Github repo for Timecop -> https://github.com/travisjeffery/timecop]]%0a%3c * [[Blog post announcing Timecop with some usage info -> http://blog.smartlogicsolutions.com/2008/11/19/timecop-freeze-time-in-ruby-for-better-testing/]]%0a%3c * [[Timecop README page -> https://github.com/travisjeffery/timecop/blob/master/README.markdown]]%0a%3c * [[Timecop rdoc -> http://johntrupiano.rubyforge.org/timecop/]]%0a%3c %0a%3c !! Basic usage%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=4 header="spec test":)%0a%3c require 'spec_helper'%0a%3c %0a%3c describe "Time" do%0a%3c   %0a%3c   context "now" do%0a%3c     it "should report the current time" do%0a%3c       Time.now.should == Chronic.parse("now")%0a%3c     end%0a%3c   end%0a%3c %0a%3c   context "future" do%0a%3c     before do%0a%3c       Timecop.travel(1.week)%0a%3c     end%0a%3c %0a%3c     after do%0a%3c       Timecop.return%0a%3c     end%0a%3c %0a%3c     it "should report the time a week from now" do%0a%3c       Time.now.should == Chronic.parse("next week")%0a%3c     end%0a%3c   end%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c !! Using Timecop with Chronic%0a%3c %0a%3c Timecop, in combination with [[Chronic -> ChronicRubyGem]] makes for some dandy testing ability:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=4 -getcode header="Using Timecop with Chronic":)%0a%3c Timecop.travel(Chronic.parse('this tuesday 5:00')) do%0a%3c   # test-fu%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a
host:1352515167=71.63.215.130
