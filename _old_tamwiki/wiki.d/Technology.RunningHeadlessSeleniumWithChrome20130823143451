version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36
author=tamara
charset=ISO-8859-1
csum=
ctime=1377286832
host=71.63.215.130
name=Technology.RunningHeadlessSeleniumWithChrome20130823143451
rev=6
targets=Technology.RunningHeadlessSeleniumWithChrome20130823143451,Technology.Testing,Category.Articles,Category.HowTos,Category.Javascript,Category.Technology,Category.Testing
text=(:nolinkwikiwords:)%0a* from: [[http://www.chrisle.me/|Chris Le]]%0a%0a>>quote%3c%3c%0a! Running Headless Selenium with Chrome%0a%0aScaling website automation for either testing or scraping can be a challenge when the site is enitrely driven by JavaScript or behaves differently when using specific browsers.%0a%0aRunning a headless Selenium machine with Google&rsquo;s Chrome installed provides a scalable way to automate your tests on one of the most popular browsers in use.%0a%0aHere are step by step instructions for installing a headless Selenium server with Chrome and Vagrant.%0a%0ahttp://www.chrisle.me/wp-content/uploads/2013/08/Screen-Shot-2013-08-18-at-1.02.09-PM.png%0a%0aSide note: [[http://www.chrisle.me/2013/08/5-reasons-i-chose-selenium-over-phantomjs/ | Why use Selenium instead of PhantomJS]]?%0a%0a----%0a%0a!! Spike Goals%0a%0a* Get up and running quickly%0a* Run a sample script that demos it works%0a* Use JavaScript only (via NodeJS)%0a%0a!! Prerequisites%0a%0aThe code you write locally should work when deployed at scale in production. These tools help us do that by creating identical environments for development and production.%0a%0a''Both are free downloads. Install with the default settings''%0a%0a* Download and install [[https://www.virtualbox.org/wiki/Downloads | VirtualBox]]%0a* Download and install [[http://www.vagrantup.com/ | Vagrant]]%0a* Download and install [[http://nodejs.org/download/ | NodeJS]]%0a%0a''I also assume you can use a command line and have some vague idea of what a virtual machine and Vagrant is.''%0a%0a----%0a%0a!! #1. Create a &ldquo;Vagrantfile&rdquo;%0a%0aThis file tells Vagrant how configure the testing environment. It applies universally to both development and production.%0a%0aCreate a project directory and create a file named @@Vagrantfile@@:%0a%0a(:source lang=ruby linenum tabwidth=2 header="Vagrantfile" :)%0a # encoding: utf-8%0a # -*- mode: ruby -*-%0a # vi: set ft=ruby :%0a%0a Vagrant.configure("2") do |config|%0a   config.vm.box = "precise64"%0a   config.vm.box_url = "http://files.vagrantup.com/precise64.box"%0a   config.ssh.forward_agent = true%0a%0a   config.vm.provider :aws do |aws, override|%0a     aws.access_key_id = 'XXXX'      # Replace this%0a     aws.secret_access_key = 'XXXX'  # Replace this%0a     aws.keypair_name = 'XXXX'       # Replace this%0a     aws.ami = 'ami-7747d01e'        # ubuntu 12.04%0a     override.ssh.username = 'ubuntu'%0a     override.ssh.private_key_path = '~/.ssh/amazon-ubuntu.pem'%0a   end%0a%0a   config.vm.provision :shell, :path =&gt; "setup.sh"%0a   config.vm.network :forwarded_port, guest:4444, host:4444%0a%0a end%0a(:sourceend:)%0a%0a----%0a%0a!! #2. Create &ldquo;setup.sh&rdquo;%0a%0aThe setup.sh file executes when Vagrant creates a virtual machine for you. In the same folder as you created your @@VagrantFile@@ create a @@setup.sh@@ file:%0a%0a(:source lang=bash linenum tabwidth=2 header="setup.sh" :)%0a #!/bin/sh%0a set -e%0a%0a if [ -e /.installed ]; then%0a   echo 'Already installed.'%0a%0a else%0a   echo ''%0a   echo 'INSTALLING'%0a   echo '----------'%0a%0a   # Add Google public key to apt%0a   wget -q -O - "https://dl-ssl.google.com/linux/linux_signing_key.pub" | sudo apt-key add -%0a%0a   # Add Google to the apt-get source list%0a   echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' &gt;&gt; /etc/apt/sources.list%0a%0a   # Update app-get%0a   apt-get update%0a%0a   # Install Java, Chrome, Xvfb, and unzip%0a   apt-get -y install openjdk-7-jre google-chrome-stable xvfb unzip%0a%0a   # Download and copy the ChromeDriver to /usr/local/bin%0a   cd /tmp%0a   wget "https://chromedriver.googlecode.com/files/chromedriver_linux64_2.2.zip"%0a   wget "https://selenium.googlecode.com/files/selenium-server-standalone-2.35.0.jar"%0a   unzip chromedriver_linux64_2.2.zip%0a   mv chromedriver /usr/local/bin%0a   mv selenium-server-standalone-2.35.0.jar /usr/local/bin%0a%0a   # So that running `vagrant provision` doesn't redownload everything%0a   touch /.installed%0a fi%0a%0a # Start Xvfb, Chrome, and Selenium in the background%0a export DISPLAY=:10%0a cd /vagrant%0a%0a echo "Starting Xvfb ..."%0a Xvfb :10 -screen 0 1366x768x24 -ac &amp;%0a%0a echo "Starting Google Chrome ..."%0a google-chrome --remote-debugging-port=9222 &amp;%0a%0a echo "Starting Selenium ..."%0a cd /usr/local/bin%0a nohup java -jar ./selenium-server-standalone-2.35.0.jar &amp;%0a(:sourceend:)%0a%0a%0a----%0a%0a!! #3. Run &ldquo;vagrant up&rdquo;%0a%0aOn your command line and in the directory where you created the @@VagrantFile@@, run the following command:%0a%0a(:source lang=bash linenum tabwidth=2 header="startup up the vagrant box" :)%0a vagrant up%0a(:sourceend:)%0a%0aThis will kick off downloading and installing all the pieces neccessary. It should look like this:%0a%0ahttp://www.chrisle.me/wp-content/uploads/2013/08/Screen-Shot-2013-08-18-at-12.35.54-PM.png%0a%0a----%0a%0a!! #4. Make sure it&rsquo;s running%0a%0aYou can check to see if everything is working by going to @@http://localhost:4444/wd/hub@@.%0a%0aThe @@VagrantFile@@ has been configured to forward port 4444 on your localhost. This allows you UI control of the Selenium browser. This page shows you all the sessions that you&rsquo;re running in your virtual machine. If you see this page, everything is OK.%0a%0ahttp://www.chrisle.me/wp-content/uploads/2013/08/Screen-Shot-2013-08-18-at-12.32.08-PM.png%0a%0a----%0a%0a!! #5. Install the selenium-webdriver%0a%0aIn order to write NodeJS scripts that talk to Chrome you will need the Selenium-Webdriver for NodeJS.%0a%0aOn your command line, install @@selenium-webdriver@@ with the following command. This will install the modules needed for interacting with Selenium.%0a%0a(:source lang=bash linenum tabwidth=2 header="install selenium driver":)%0a npm install selenium-webdriver%0a(:sourceend:)%0a%0a----%0a%0a!! #6. Write your first Selenium script%0a%0aThis first script will go to Google&rsquo;s homepage, type in a query, then print out the HTML.%0a%0a(:source lang=javascript linenum tabwidth=2 header="script.js" :)%0a var webdriver = require('selenium-webdriver');%0a%0a var keyword = "chris le twitter";%0a%0a var driver = new webdriver.Builder().%0a    usingServer('http://localhost:4444/wd/hub').%0a    withCapabilities(webdriver.Capabilities.chrome()).%0a    build();%0a%0a driver.get('http://www.google.com');%0a driver.findElement(webdriver.By.name('q')).sendKeys(keyword);%0a driver.findElement(webdriver.By.name('btnG')).click();%0a driver.wait(function() {%0a   return driver.getTitle().then(function(title) {%0a     driver.getPageSource().then(function(html) {%0a       console.log(html);%0a       return true;%0a     });%0a   });%0a }, 1000);%0a%0a driver.quit();%0a(:sourceend:)%0a%0a%0a----%0a%0a!! #7. Run your test%0a%0aRun your test with node. You should see the HTML that was rendered by the Chrome browser.%0a%0ahttp://www.chrisle.me/wp-content/uploads/2013/08/Screen-Shot-2013-08-18-at-1.07.55-PM.png%0a%0a----%0a%0a! Use Cases%0a%0aSo now that you have this up and running what can you use it for?%0a%0a'''Running your automated test suites''': This is great for doing integration testing against Chrome browsers and probably responsive websites.%0a%0a'''Testing your Chrome Extentions''': Debugging Chrome Extensions can be a bit of a pain. This could be your Asprin.%0a%0a'''Taking many screenshots''': If you want to make screenshots of many pages at once.%0a%0a'''Scraping stubborn websites''': I wasn&rsquo;t able to scrape a website using PhantomJS because it fired JSONP requests long after the onLoad() event fired. Simply waiting for the event loop to empty itself wansn&rsquo;t enough. A combination of debugging with a real browser and Selenium, I was more successful at getting the DOM after the scripts had run.%0a%0a(:linkwikiwords:)%0a>>comment%3c%3c%0aSummary: clipping from web: %0aTags: testing, selenium, headless, testing, chrome, javascript, node.js%0a(:tags-hide Tags: testing, selenium, headless, testing, chrome, javascript, node.js:)%0a(:title Running Headless Selenium with Chrome:)%0aSource: http://www.chrisle.me/2013/08/running-headless-selenium-with-chrome/%0aParent: (Technology.)Testing%0aincludeme: [[Technology.Testing]]%0aCategories:[[!Articles]], [[!HowTos]], [[!Javascript]], [[!Technology]], [[!Testing]]%0aPosted: Page saved at: Fri, 23 Aug 2013 14:34:51 -0500%0a>>%3c%3c%0a%0a%0a
time=1377287560
title=Running Headless Selenium with Chrome
author:1377287560=tamara
diff:1377287560:1377287535:=2c2%0a%3c * from: [[http://www.chrisle.me/|Chris Le]]%0a---%0a> * from: [[http://www.chrisle.me/Chris Le]]%0a
host:1377287560=71.63.215.130
author:1377287535=tamara
diff:1377287535:1377287437:=2,3d1%0a%3c * from: [[http://www.chrisle.me/Chris Le]]%0a%3c %0a4a3,11%0a> [[http://www.chrisle.me/Chris Le]]%0a> %0a> * [[http://www.chrisle.me | Home]]%0a> * [[http://www.chrisle.me:80/#top | Return to Content]]%0a> %0a> ----%0a> %0a> [[http://www.chrisle.me/2013/08/running-headless-selenium-with-chrome/ | August 19, 2013]]%0a> %0a
host:1377287535=71.63.215.130
author:1377287437=tamara
diff:1377287437:1377286990:=231c231%0a%3c Source: http://www.chrisle.me/2013/08/running-headless-selenium-with-chrome/%0a---%0a> Source: http://www.chrisle.me/2013/08/running-headless-selenium-with-chrome/?utm_source=html5weekly&utm_medium=email%0a235d234%0a%3c Posted: Page saved at: Fri, 23 Aug 2013 14:34:51 -0500%0a237a237%0a> Page saved at: Fri, 23 Aug 2013 14:34:51 -0500%0a
host:1377287437=71.63.215.130
author:1377286990=tamara
csum:1377286990=cleanup metadata
diff:1377286990:1377286848:minor=227,229c227,229%0a%3c Summary: clipping from web: %0a%3c Tags: testing, selenium, headless, testing, chrome, javascript, node.js%0a%3c (:tags-hide Tags: testing, selenium, headless, testing, chrome, javascript, node.js:)%0a---%0a> Summary: a short description of the page%0a> Tags: saved page%0a> (:tags-hide saved page:)%0a232,234c232,234%0a%3c Parent: (Technology.)Testing%0a%3c includeme: [[Technology.Testing]]%0a%3c Categories:[[!Articles]], [[!HowTos]], [[!Javascript]], [[!Technology]], [[!Testing]]%0a---%0a> Parent:%0a> includeme:%0a> Categories:[[!Articles]]%0a
host:1377286990=71.63.215.130
author:1377286848=tamara
csum:1377286848=Page moved to Technology.RunningHeadlessSeleniumWithChrome20130823143451 from SavedArticles.RunningHeadlessSeleniumWithChrome20130823143451
diff:1377286848:1377286832:=
host:1377286848=71.63.215.130
author:1377286832=tamara
csum:1377286832=new article from web
diff:1377286832:1377286832:=1,238d0%0a%3c (:nolinkwikiwords:)%0a%3c >>quote%3c%3c%0a%3c [[http://www.chrisle.me/Chris Le]]%0a%3c %0a%3c * [[http://www.chrisle.me | Home]]%0a%3c * [[http://www.chrisle.me:80/#top | Return to Content]]%0a%3c %0a%3c ----%0a%3c %0a%3c [[http://www.chrisle.me/2013/08/running-headless-selenium-with-chrome/ | August 19, 2013]]%0a%3c %0a%3c ! Running Headless Selenium with Chrome%0a%3c %0a%3c Scaling website automation for either testing or scraping can be a challenge when the site is enitrely driven by JavaScript or behaves differently when using specific browsers.%0a%3c %0a%3c Running a headless Selenium machine with Google&rsquo;s Chrome installed provides a scalable way to automate your tests on one of the most popular browsers in use.%0a%3c %0a%3c Here are step by step instructions for installing a headless Selenium server with Chrome and Vagrant.%0a%3c %0a%3c http://www.chrisle.me/wp-content/uploads/2013/08/Screen-Shot-2013-08-18-at-1.02.09-PM.png%0a%3c %0a%3c Side note: [[http://www.chrisle.me/2013/08/5-reasons-i-chose-selenium-over-phantomjs/ | Why use Selenium instead of PhantomJS]]?%0a%3c %0a%3c ----%0a%3c %0a%3c !! Spike Goals%0a%3c %0a%3c * Get up and running quickly%0a%3c * Run a sample script that demos it works%0a%3c * Use JavaScript only (via NodeJS)%0a%3c %0a%3c !! Prerequisites%0a%3c %0a%3c The code you write locally should work when deployed at scale in production. These tools help us do that by creating identical environments for development and production.%0a%3c %0a%3c ''Both are free downloads. Install with the default settings''%0a%3c %0a%3c * Download and install [[https://www.virtualbox.org/wiki/Downloads | VirtualBox]]%0a%3c * Download and install [[http://www.vagrantup.com/ | Vagrant]]%0a%3c * Download and install [[http://nodejs.org/download/ | NodeJS]]%0a%3c %0a%3c ''I also assume you can use a command line and have some vague idea of what a virtual machine and Vagrant is.''%0a%3c %0a%3c ----%0a%3c %0a%3c !! #1. Create a &ldquo;Vagrantfile&rdquo;%0a%3c %0a%3c This file tells Vagrant how configure the testing environment. It applies universally to both development and production.%0a%3c %0a%3c Create a project directory and create a file named @@Vagrantfile@@:%0a%3c %0a%3c (:source lang=ruby linenum tabwidth=2 header="Vagrantfile" :)%0a%3c  # encoding: utf-8%0a%3c  # -*- mode: ruby -*-%0a%3c  # vi: set ft=ruby :%0a%3c %0a%3c  Vagrant.configure("2") do |config|%0a%3c    config.vm.box = "precise64"%0a%3c    config.vm.box_url = "http://files.vagrantup.com/precise64.box"%0a%3c    config.ssh.forward_agent = true%0a%3c %0a%3c    config.vm.provider :aws do |aws, override|%0a%3c      aws.access_key_id = 'XXXX'      # Replace this%0a%3c      aws.secret_access_key = 'XXXX'  # Replace this%0a%3c      aws.keypair_name = 'XXXX'       # Replace this%0a%3c      aws.ami = 'ami-7747d01e'        # ubuntu 12.04%0a%3c      override.ssh.username = 'ubuntu'%0a%3c      override.ssh.private_key_path = '~/.ssh/amazon-ubuntu.pem'%0a%3c    end%0a%3c %0a%3c    config.vm.provision :shell, :path =&gt; "setup.sh"%0a%3c    config.vm.network :forwarded_port, guest:4444, host:4444%0a%3c %0a%3c  end%0a%3c (:sourceend:)%0a%3c %0a%3c ----%0a%3c %0a%3c !! #2. Create &ldquo;setup.sh&rdquo;%0a%3c %0a%3c The setup.sh file executes when Vagrant creates a virtual machine for you. In the same folder as you created your @@VagrantFile@@ create a @@setup.sh@@ file:%0a%3c %0a%3c (:source lang=bash linenum tabwidth=2 header="setup.sh" :)%0a%3c  #!/bin/sh%0a%3c  set -e%0a%3c %0a%3c  if [ -e /.installed ]; then%0a%3c    echo 'Already installed.'%0a%3c %0a%3c  else%0a%3c    echo ''%0a%3c    echo 'INSTALLING'%0a%3c    echo '----------'%0a%3c %0a%3c    # Add Google public key to apt%0a%3c    wget -q -O - "https://dl-ssl.google.com/linux/linux_signing_key.pub" | sudo apt-key add -%0a%3c %0a%3c    # Add Google to the apt-get source list%0a%3c    echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' &gt;&gt; /etc/apt/sources.list%0a%3c %0a%3c    # Update app-get%0a%3c    apt-get update%0a%3c %0a%3c    # Install Java, Chrome, Xvfb, and unzip%0a%3c    apt-get -y install openjdk-7-jre google-chrome-stable xvfb unzip%0a%3c %0a%3c    # Download and copy the ChromeDriver to /usr/local/bin%0a%3c    cd /tmp%0a%3c    wget "https://chromedriver.googlecode.com/files/chromedriver_linux64_2.2.zip"%0a%3c    wget "https://selenium.googlecode.com/files/selenium-server-standalone-2.35.0.jar"%0a%3c    unzip chromedriver_linux64_2.2.zip%0a%3c    mv chromedriver /usr/local/bin%0a%3c    mv selenium-server-standalone-2.35.0.jar /usr/local/bin%0a%3c %0a%3c    # So that running `vagrant provision` doesn't redownload everything%0a%3c    touch /.installed%0a%3c  fi%0a%3c %0a%3c  # Start Xvfb, Chrome, and Selenium in the background%0a%3c  export DISPLAY=:10%0a%3c  cd /vagrant%0a%3c %0a%3c  echo "Starting Xvfb ..."%0a%3c  Xvfb :10 -screen 0 1366x768x24 -ac &amp;%0a%3c %0a%3c  echo "Starting Google Chrome ..."%0a%3c  google-chrome --remote-debugging-port=9222 &amp;%0a%3c %0a%3c  echo "Starting Selenium ..."%0a%3c  cd /usr/local/bin%0a%3c  nohup java -jar ./selenium-server-standalone-2.35.0.jar &amp;%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c ----%0a%3c %0a%3c !! #3. Run &ldquo;vagrant up&rdquo;%0a%3c %0a%3c On your command line and in the directory where you created the @@VagrantFile@@, run the following command:%0a%3c %0a%3c (:source lang=bash linenum tabwidth=2 header="startup up the vagrant box" :)%0a%3c  vagrant up%0a%3c (:sourceend:)%0a%3c %0a%3c This will kick off downloading and installing all the pieces neccessary. It should look like this:%0a%3c %0a%3c http://www.chrisle.me/wp-content/uploads/2013/08/Screen-Shot-2013-08-18-at-12.35.54-PM.png%0a%3c %0a%3c ----%0a%3c %0a%3c !! #4. Make sure it&rsquo;s running%0a%3c %0a%3c You can check to see if everything is working by going to @@http://localhost:4444/wd/hub@@.%0a%3c %0a%3c The @@VagrantFile@@ has been configured to forward port 4444 on your localhost. This allows you UI control of the Selenium browser. This page shows you all the sessions that you&rsquo;re running in your virtual machine. If you see this page, everything is OK.%0a%3c %0a%3c http://www.chrisle.me/wp-content/uploads/2013/08/Screen-Shot-2013-08-18-at-12.32.08-PM.png%0a%3c %0a%3c ----%0a%3c %0a%3c !! #5. Install the selenium-webdriver%0a%3c %0a%3c In order to write NodeJS scripts that talk to Chrome you will need the Selenium-Webdriver for NodeJS.%0a%3c %0a%3c On your command line, install @@selenium-webdriver@@ with the following command. This will install the modules needed for interacting with Selenium.%0a%3c %0a%3c (:source lang=bash linenum tabwidth=2 header="install selenium driver":)%0a%3c  npm install selenium-webdriver%0a%3c (:sourceend:)%0a%3c %0a%3c ----%0a%3c %0a%3c !! #6. Write your first Selenium script%0a%3c %0a%3c This first script will go to Google&rsquo;s homepage, type in a query, then print out the HTML.%0a%3c %0a%3c (:source lang=javascript linenum tabwidth=2 header="script.js" :)%0a%3c  var webdriver = require('selenium-webdriver');%0a%3c %0a%3c  var keyword = "chris le twitter";%0a%3c %0a%3c  var driver = new webdriver.Builder().%0a%3c     usingServer('http://localhost:4444/wd/hub').%0a%3c     withCapabilities(webdriver.Capabilities.chrome()).%0a%3c     build();%0a%3c %0a%3c  driver.get('http://www.google.com');%0a%3c  driver.findElement(webdriver.By.name('q')).sendKeys(keyword);%0a%3c  driver.findElement(webdriver.By.name('btnG')).click();%0a%3c  driver.wait(function() {%0a%3c    return driver.getTitle().then(function(title) {%0a%3c      driver.getPageSource().then(function(html) {%0a%3c        console.log(html);%0a%3c        return true;%0a%3c      });%0a%3c    });%0a%3c  }, 1000);%0a%3c %0a%3c  driver.quit();%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c ----%0a%3c %0a%3c !! #7. Run your test%0a%3c %0a%3c Run your test with node. You should see the HTML that was rendered by the Chrome browser.%0a%3c %0a%3c http://www.chrisle.me/wp-content/uploads/2013/08/Screen-Shot-2013-08-18-at-1.07.55-PM.png%0a%3c %0a%3c ----%0a%3c %0a%3c ! Use Cases%0a%3c %0a%3c So now that you have this up and running what can you use it for?%0a%3c %0a%3c '''Running your automated test suites''': This is great for doing integration testing against Chrome browsers and probably responsive websites.%0a%3c %0a%3c '''Testing your Chrome Extentions''': Debugging Chrome Extensions can be a bit of a pain. This could be your Asprin.%0a%3c %0a%3c '''Taking many screenshots''': If you want to make screenshots of many pages at once.%0a%3c %0a%3c '''Scraping stubborn websites''': I wasn&rsquo;t able to scrape a website using PhantomJS because it fired JSONP requests long after the onLoad() event fired. Simply waiting for the event loop to empty itself wansn&rsquo;t enough. A combination of debugging with a real browser and Selenium, I was more successful at getting the DOM after the scripts had run.%0a%3c %0a%3c (:linkwikiwords:)%0a%3c >>comment%3c%3c%0a%3c Summary: a short description of the page%0a%3c Tags: saved page%0a%3c (:tags-hide saved page:)%0a%3c (:title Running Headless Selenium with Chrome:)%0a%3c Source: http://www.chrisle.me/2013/08/running-headless-selenium-with-chrome/?utm_source=html5weekly&utm_medium=email%0a%3c Parent:%0a%3c includeme:%0a%3c Categories:[[!Articles]]%0a%3c >>%3c%3c%0a%3c %0a%3c Page saved at: Fri, 23 Aug 2013 14:34:51 -0500%0a%3c %0a
host:1377286832=71.63.215.130
