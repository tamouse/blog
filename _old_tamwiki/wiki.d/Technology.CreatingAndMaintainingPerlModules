version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19
author=tamara
charset=ISO-8859-1
csum=new page
ctime=1334037332
host=127.0.0.1
name=Technology.CreatingAndMaintainingPerlModules
rev=1
targets=Technology.CreatingAndMaintainingPerlModules
text=Article: [[http://mathforum.org/~ken/perl_modules.html | Creating (and Maintaining) Perl Modules]]\\%0aAuthor: Created in 1997 by Ken Williams. Expanded and revised in 1999 for Digital River by Dave Rolsky and Ken Williams. Revised in 2001 by Ken Williams for general use.\\%0aRevised: 2012-04-10 by Tamara Temple to update to perl 5.10.0\\%0aPosted: 2012-04-10%0a%0a(:nolinkwikiwords:)%0a!!Create skeleton files for your module%0a%0aPerl is distributed with a program called h2xs. This program, while initially intended to help programmers implement C extensions to Perl, can also be used to generate skeleton files for a new module.%0a%0aLet's create a module called NewModule.pm that doesn't do very much. I'll run the h2xs program:%0a%0a(:source lang=bash:)%0a$ h2xs -AXc -n NewModule%0aDefaulting to backwards compatibility with perl 5.10.0%0aIf you intend this module to be compatible with earlier perl versions, please%0aspecify a minimum perl version with the -b option.%0a%0aWriting NewModule/lib/NewModule.pm%0aWriting NewModule/Makefile.PL%0aWriting NewModule/README%0aWriting NewModule/t/NewModule.t%0aWriting NewModule/Changes%0aWriting NewModule/MANIFEST%0a(:sourceend:)%0a%0a'''README''' is the place to write what the module is, how it is acquired and installed, and any configuration info.%0a%0a(:code:)%0aNewModule version 0.01%0a======================%0a%0aThe README is used to introduce the module and provide instructions on%0ahow to install the module, any machine dependencies it may have (for%0aexample C compilers and installed libraries) and any other information%0athat should be provided before the module is installed.%0a%0aA README file is required for CPAN modules since CPAN extracts the%0aREADME file from a module distribution so that people browsing the%0aarchive can use it get an idea of the modules uses. It is usually a%0agood idea to provide version information here so that people can%0adecide whether fixes for the module are worth downloading.%0a%0aINSTALLATION%0a%0aTo install this module type the following:%0a%0a   perl Makefile.PL%0a   make%0a   make test%0a   make install%0a%0aDEPENDENCIES%0a%0aThis module requires these other modules and libraries:%0a%0a  blah blah blah%0a%0aCOPYRIGHT AND LICENCE%0a%0aPut the correct copyright and licence information here.%0a%0aCopyright (C) 2012 by Tamara Temple%0a%0aThis library is free software; you can redistribute it and/or modify%0ait under the same terms as Perl itself, either Perl version 5.10.0 or,%0aat your option, any later version of Perl 5 you may have available.%0a%0a%0a(:codeend:)%0a%0aThe '''Changes''' file is where you might keep track keep track of changes you make to your module as you write new versions. If you're using RCS or CVS version control, you shouldn't use the Changes file, since all your history & logs will be in revision control and is much more reliable there (you are adding detailed revision notes in version control, aren't you?). I've found that the best scheme is to automatically build the Changes file from the revision control history, but your preferences might vary.%0a%0a(:code:)%0aRevision history for Perl extension NewModule.%0a%0a0.01  Tue Apr 10 00:47:25 2012%0a	- original version; created by h2xs 1.23 with options%0a		-AXc -n NewModule%0a%0a(:codeend:)%0a%0a'''MANIFEST''' contains a list of files in this directory. If you add new files to the directory, you should also add them to the MANIFEST. The MANIFEST is used to create a tarball of your module for distribution, and it's also checked when people unpack the tarball and install the module.%0a%0a(:code:)%0aChanges%0aMakefile.PL%0aMANIFEST%0aREADME%0at/NewModule.t%0alib/NewModule.pm%0a(:codeend:)%0a%0a'''Makefile.PL''' is a Perl program used to create a Unix Makefile. You'll use this Makefile to test and install your module.%0a%0a(:code:)%0ause 5.010000;%0ause ExtUtils::MakeMaker;%0a# See lib/ExtUtils/MakeMaker.pm for details of how to influence%0a# the contents of the Makefile that is written.%0aWriteMakefile(%0a    NAME              => 'NewModule',%0a    VERSION_FROM      => 'lib/NewModule.pm', # finds $VERSION%0a    PREREQ_PM         => {}, # e.g., Module::Name => 1.1%0a    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005%0a      (ABSTRACT_FROM  => 'lib/NewModule.pm', # retrieve abstract from module%0a       AUTHOR         => 'Tamara Temple %3ctamara@local>') : ()),%0a);%0a(:codeend:)%0a%0a'''lib/NewModule.pm''' is your module. You'll write the code here in the next step.%0a%0a(:source lang=perl:)%0apackage NewModule;%0a%0ause 5.010000;%0ause strict;%0ause warnings;%0a%0arequire Exporter;%0a%0aour @ISA = qw(Exporter);%0a%0a# Items to export into callers namespace by default. Note: do not export%0a# names by default without a very good reason. Use EXPORT_OK instead.%0a# Do not simply export all your public functions/methods/constants.%0a%0a# This allows declaration	use NewModule ':all';%0a# If you do not need this, moving things directly into @EXPORT or @EXPORT_OK%0a# will save memory.%0aour %25EXPORT_TAGS = ( 'all' => [ qw(%0a	%0a) ] );%0a%0aour @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );%0a%0aour @EXPORT = qw(%0a	%0a);%0a%0aour $VERSION = '0.01';%0a%0a%0a# Preloaded methods go here.%0a%0a1;%0a__END__%0a# Below is stub documentation for your module. You'd better edit it!%0a%0a=head1 NAME%0a%0aNewModule - Perl extension for blah blah blah%0a%0a=head1 SYNOPSIS%0a%0a  use NewModule;%0a  blah blah blah%0a%0a=head1 DESCRIPTION%0a%0aStub documentation for NewModule, created by h2xs. It looks like the%0aauthor of the extension was negligent enough to leave the stub%0aunedited.%0a%0aBlah blah blah.%0a%0a=head2 EXPORT%0a%0aNone by default.%0a%0a%0a%0a=head1 SEE ALSO%0a%0aMention other useful documentation such as the documentation of%0arelated modules or operating system documentation (such as man pages%0ain UNIX), or any relevant external documentation such as RFCs or%0astandards.%0a%0aIf you have a mailing list set up for your module, mention it here.%0a%0aIf you have a web site set up for your module, mention it here.%0a%0a=head1 AUTHOR%0a%0aTamara Temple, E%3clt>tamara@localE%3cgt>%0a%0a=head1 COPYRIGHT AND LICENSE%0a%0aCopyright (C) 2012 by Tamara Temple%0a%0aThis library is free software; you can redistribute it and/or modify%0ait under the same terms as Perl itself, either Perl version 5.10.0 or,%0aat your option, any later version of Perl 5 you may have available.%0a%0a%0a=cut%0a(:sourceend:)%0a%0a'''t/NewModule.t''' is a Perl program that tests your module. You don't run it directly, you type "make test" at a Unix prompt and it runs it for you. We'll develop this test suite a little later.%0a%0a(:source lang=perl:)%0a# Before `make install' is performed this script should be runnable with%0a# `make test'. After `make install' it should work as `perl NewModule.t'%0a%0a#########################%0a%0a# change 'tests => 1' to 'tests => last_test_to_print';%0a%0ause Test::More tests => 1;%0aBEGIN { use_ok('NewModule') };%0a%0a#########################%0a%0a# Insert your test code below, the Test::More module is use()ed here so read%0a# its man page ( perldoc Test::More ) for help writing this test script.%0a%0a(:sourceend:)%0a%0a(:linkwikiwords:)%0a%0a%0a%0a(:Summary:Link to article explaining how to easily (?) create and maintian perl modules:)%0a(:Parent:(Technology.)Perl:)%0a(:IncludeMe:[[(Technology.)Perl]]:)%0a(:Categories:[[!Articles]]:)%0a(:Tags: perl, modules, h2xs:)%0a(:tags-hide perl, modules, h2xs :)%0a
time=1334037332
author:1334037332=tamara
csum:1334037332=new page
diff:1334037332:1334037332:=1,229d0%0a%3c Article: [[http://mathforum.org/~ken/perl_modules.html | Creating (and Maintaining) Perl Modules]]\\%0a%3c Author: Created in 1997 by Ken Williams. Expanded and revised in 1999 for Digital River by Dave Rolsky and Ken Williams. Revised in 2001 by Ken Williams for general use.\\%0a%3c Revised: 2012-04-10 by Tamara Temple to update to perl 5.10.0\\%0a%3c Posted: 2012-04-10%0a%3c %0a%3c (:nolinkwikiwords:)%0a%3c !!Create skeleton files for your module%0a%3c %0a%3c Perl is distributed with a program called h2xs. This program, while initially intended to help programmers implement C extensions to Perl, can also be used to generate skeleton files for a new module.%0a%3c %0a%3c Let's create a module called NewModule.pm that doesn't do very much. I'll run the h2xs program:%0a%3c %0a%3c (:source lang=bash:)%0a%3c $ h2xs -AXc -n NewModule%0a%3c Defaulting to backwards compatibility with perl 5.10.0%0a%3c If you intend this module to be compatible with earlier perl versions, please%0a%3c specify a minimum perl version with the -b option.%0a%3c %0a%3c Writing NewModule/lib/NewModule.pm%0a%3c Writing NewModule/Makefile.PL%0a%3c Writing NewModule/README%0a%3c Writing NewModule/t/NewModule.t%0a%3c Writing NewModule/Changes%0a%3c Writing NewModule/MANIFEST%0a%3c (:sourceend:)%0a%3c %0a%3c '''README''' is the place to write what the module is, how it is acquired and installed, and any configuration info.%0a%3c %0a%3c (:code:)%0a%3c NewModule version 0.01%0a%3c ======================%0a%3c %0a%3c The README is used to introduce the module and provide instructions on%0a%3c how to install the module, any machine dependencies it may have (for%0a%3c example C compilers and installed libraries) and any other information%0a%3c that should be provided before the module is installed.%0a%3c %0a%3c A README file is required for CPAN modules since CPAN extracts the%0a%3c README file from a module distribution so that people browsing the%0a%3c archive can use it get an idea of the modules uses. It is usually a%0a%3c good idea to provide version information here so that people can%0a%3c decide whether fixes for the module are worth downloading.%0a%3c %0a%3c INSTALLATION%0a%3c %0a%3c To install this module type the following:%0a%3c %0a%3c    perl Makefile.PL%0a%3c    make%0a%3c    make test%0a%3c    make install%0a%3c %0a%3c DEPENDENCIES%0a%3c %0a%3c This module requires these other modules and libraries:%0a%3c %0a%3c   blah blah blah%0a%3c %0a%3c COPYRIGHT AND LICENCE%0a%3c %0a%3c Put the correct copyright and licence information here.%0a%3c %0a%3c Copyright (C) 2012 by Tamara Temple%0a%3c %0a%3c This library is free software; you can redistribute it and/or modify%0a%3c it under the same terms as Perl itself, either Perl version 5.10.0 or,%0a%3c at your option, any later version of Perl 5 you may have available.%0a%3c %0a%3c %0a%3c (:codeend:)%0a%3c %0a%3c The '''Changes''' file is where you might keep track keep track of changes you make to your module as you write new versions. If you're using RCS or CVS version control, you shouldn't use the Changes file, since all your history & logs will be in revision control and is much more reliable there (you are adding detailed revision notes in version control, aren't you?). I've found that the best scheme is to automatically build the Changes file from the revision control history, but your preferences might vary.%0a%3c %0a%3c (:code:)%0a%3c Revision history for Perl extension NewModule.%0a%3c %0a%3c 0.01  Tue Apr 10 00:47:25 2012%0a%3c 	- original version; created by h2xs 1.23 with options%0a%3c 		-AXc -n NewModule%0a%3c %0a%3c (:codeend:)%0a%3c %0a%3c '''MANIFEST''' contains a list of files in this directory. If you add new files to the directory, you should also add them to the MANIFEST. The MANIFEST is used to create a tarball of your module for distribution, and it's also checked when people unpack the tarball and install the module.%0a%3c %0a%3c (:code:)%0a%3c Changes%0a%3c Makefile.PL%0a%3c MANIFEST%0a%3c README%0a%3c t/NewModule.t%0a%3c lib/NewModule.pm%0a%3c (:codeend:)%0a%3c %0a%3c '''Makefile.PL''' is a Perl program used to create a Unix Makefile. You'll use this Makefile to test and install your module.%0a%3c %0a%3c (:code:)%0a%3c use 5.010000;%0a%3c use ExtUtils::MakeMaker;%0a%3c # See lib/ExtUtils/MakeMaker.pm for details of how to influence%0a%3c # the contents of the Makefile that is written.%0a%3c WriteMakefile(%0a%3c     NAME              => 'NewModule',%0a%3c     VERSION_FROM      => 'lib/NewModule.pm', # finds $VERSION%0a%3c     PREREQ_PM         => {}, # e.g., Module::Name => 1.1%0a%3c     ($] >= 5.005 ?     ## Add these new keywords supported since 5.005%0a%3c       (ABSTRACT_FROM  => 'lib/NewModule.pm', # retrieve abstract from module%0a%3c        AUTHOR         => 'Tamara Temple %3ctamara@local>') : ()),%0a%3c );%0a%3c (:codeend:)%0a%3c %0a%3c '''lib/NewModule.pm''' is your module. You'll write the code here in the next step.%0a%3c %0a%3c (:source lang=perl:)%0a%3c package NewModule;%0a%3c %0a%3c use 5.010000;%0a%3c use strict;%0a%3c use warnings;%0a%3c %0a%3c require Exporter;%0a%3c %0a%3c our @ISA = qw(Exporter);%0a%3c %0a%3c # Items to export into callers namespace by default. Note: do not export%0a%3c # names by default without a very good reason. Use EXPORT_OK instead.%0a%3c # Do not simply export all your public functions/methods/constants.%0a%3c %0a%3c # This allows declaration	use NewModule ':all';%0a%3c # If you do not need this, moving things directly into @EXPORT or @EXPORT_OK%0a%3c # will save memory.%0a%3c our %25EXPORT_TAGS = ( 'all' => [ qw(%0a%3c 	%0a%3c ) ] );%0a%3c %0a%3c our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );%0a%3c %0a%3c our @EXPORT = qw(%0a%3c 	%0a%3c );%0a%3c %0a%3c our $VERSION = '0.01';%0a%3c %0a%3c %0a%3c # Preloaded methods go here.%0a%3c %0a%3c 1;%0a%3c __END__%0a%3c # Below is stub documentation for your module. You'd better edit it!%0a%3c %0a%3c =head1 NAME%0a%3c %0a%3c NewModule - Perl extension for blah blah blah%0a%3c %0a%3c =head1 SYNOPSIS%0a%3c %0a%3c   use NewModule;%0a%3c   blah blah blah%0a%3c %0a%3c =head1 DESCRIPTION%0a%3c %0a%3c Stub documentation for NewModule, created by h2xs. It looks like the%0a%3c author of the extension was negligent enough to leave the stub%0a%3c unedited.%0a%3c %0a%3c Blah blah blah.%0a%3c %0a%3c =head2 EXPORT%0a%3c %0a%3c None by default.%0a%3c %0a%3c %0a%3c %0a%3c =head1 SEE ALSO%0a%3c %0a%3c Mention other useful documentation such as the documentation of%0a%3c related modules or operating system documentation (such as man pages%0a%3c in UNIX), or any relevant external documentation such as RFCs or%0a%3c standards.%0a%3c %0a%3c If you have a mailing list set up for your module, mention it here.%0a%3c %0a%3c If you have a web site set up for your module, mention it here.%0a%3c %0a%3c =head1 AUTHOR%0a%3c %0a%3c Tamara Temple, E%3clt>tamara@localE%3cgt>%0a%3c %0a%3c =head1 COPYRIGHT AND LICENSE%0a%3c %0a%3c Copyright (C) 2012 by Tamara Temple%0a%3c %0a%3c This library is free software; you can redistribute it and/or modify%0a%3c it under the same terms as Perl itself, either Perl version 5.10.0 or,%0a%3c at your option, any later version of Perl 5 you may have available.%0a%3c %0a%3c %0a%3c =cut%0a%3c (:sourceend:)%0a%3c %0a%3c '''t/NewModule.t''' is a Perl program that tests your module. You don't run it directly, you type "make test" at a Unix prompt and it runs it for you. We'll develop this test suite a little later.%0a%3c %0a%3c (:source lang=perl:)%0a%3c # Before `make install' is performed this script should be runnable with%0a%3c # `make test'. After `make install' it should work as `perl NewModule.t'%0a%3c %0a%3c #########################%0a%3c %0a%3c # change 'tests => 1' to 'tests => last_test_to_print';%0a%3c %0a%3c use Test::More tests => 1;%0a%3c BEGIN { use_ok('NewModule') };%0a%3c %0a%3c #########################%0a%3c %0a%3c # Insert your test code below, the Test::More module is use()ed here so read%0a%3c # its man page ( perldoc Test::More ) for help writing this test script.%0a%3c %0a%3c (:sourceend:)%0a%3c %0a%3c (:linkwikiwords:)%0a%3c %0a%3c %0a%3c %0a%3c (:Summary:Link to article explaining how to easily (?) create and maintian perl modules:)%0a%3c (:Parent:(Technology.)Perl:)%0a%3c (:IncludeMe:[[(Technology.)Perl]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: perl, modules, h2xs:)%0a%3c (:tags-hide perl, modules, h2xs :)%0a
host:1334037332=127.0.0.1
