version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:19.0) Gecko/20100101 Firefox/19.0
author=tamara
charset=ISO-8859-1
csum=
ctime=1364137560
host=71.63.215.130
name=Technology.BestWayToReloadSinatraApp
rev=2
targets=Technology.BestWayToReloadSinatraApp,Technology.Ruby,Category.FAQ,Category.Technology,Category.Ruby,Category.Sinatra
text=>>faq%3c%3c%0aQ: What is the best way to run a modular Sinatra app to have it reload with each request? * Martin Streicher 16 Jan 13 | 3:38 am%0a%0aA: There are many ways. I used 'rerun' gem. It need not be part of the package. I have had my share of problems with sinatra reloader and guard. * Sairam 21 Jan 13 | 12:12 pm%0a%0aA: Hi Martin, I've used Sinatra Reloader like so:  * Darren Jones 23 Jan 13 | 2:25 pm%0a%0a%0a(:source lang=ruby linenum:)%0arequire "sinatra/base"%0arequire "sinatra/reloader"%0a%0aclass MyApp %3c Sinatra::Base%0a  configure :development do%0a    register Sinatra::Reloader%0a  end%0a%0a  # Your modular application code goes here...%0aend%0a(:sourceend:)%0a%0aYou need to remember to register the extension when building a modular style app. It has worked fine for me so far%0a%0a>>comment%3c%3c%0aSummary:Answers to ways to make sure Sinatra can be reloaded easily%0a(:title FAQ: Reloading Sinatra App:)%0aParent:(Technology.)Ruby%0aincludeme:[[Technology.Ruby]]%0aCategories:[[!FAQ]], [[!Technology]], [[!Ruby]], [[!Sinatra]]%0aTags: faq, ruby, sinatra, testing%0a(:tags-hide faq, ruby, sinatra, testing:)%0a>>%3c%3c%0a
time=1364137751
title=FAQ: Reloading Sinatra App
author:1364137751=tamara
diff:1364137751:1364137560:=1,8c1,5%0a%3c >>faq%3c%3c%0a%3c Q: What is the best way to run a modular Sinatra app to have it reload with each request? * Martin Streicher 16 Jan 13 | 3:38 am%0a%3c %0a%3c A: There are many ways. I used 'rerun' gem. It need not be part of the package. I have had my share of problems with sinatra reloader and guard. * Sairam 21 Jan 13 | 12:12 pm%0a%3c %0a%3c A: Hi Martin, I've used Sinatra Reloader like so:  * Darren Jones 23 Jan 13 | 2:25 pm%0a%3c %0a%3c %0a---%0a> >>fag%3c%3c%0a> Q: What is the best way to run a modular Sinatra app to have it reload with each request? * Sairam 21 Jan 13 | 12:12 pm%0a> A:There are many ways. I used 'rerun' gem. It need not be part of the package. I have had my share of problems with sinatra reloader and guard. * Darren Jones 23 Jan 13 | 2:25 pm%0a> A: Hi Martin, I've used Sinatra Reloader like so:%0a> %0a14,18c11,15%0a%3c   configure :development do%0a%3c     register Sinatra::Reloader%0a%3c   end%0a%3c %0a%3c   # Your modular application code goes here...%0a---%0a> configure :development do%0a> register Sinatra::Reloader%0a> end%0a> %0a> # Your modular application code goes here...%0a
host:1364137751=71.63.215.130
author:1364137560=tamara
diff:1364137560:1364137560:=1,29d0%0a%3c >>fag%3c%3c%0a%3c Q: What is the best way to run a modular Sinatra app to have it reload with each request? * Sairam 21 Jan 13 | 12:12 pm%0a%3c A:There are many ways. I used 'rerun' gem. It need not be part of the package. I have had my share of problems with sinatra reloader and guard. * Darren Jones 23 Jan 13 | 2:25 pm%0a%3c A: Hi Martin, I've used Sinatra Reloader like so:%0a%3c %0a%3c (:source lang=ruby linenum:)%0a%3c require "sinatra/base"%0a%3c require "sinatra/reloader"%0a%3c %0a%3c class MyApp %3c Sinatra::Base%0a%3c configure :development do%0a%3c register Sinatra::Reloader%0a%3c end%0a%3c %0a%3c # Your modular application code goes here...%0a%3c end%0a%3c (:sourceend:)%0a%3c %0a%3c You need to remember to register the extension when building a modular style app. It has worked fine for me so far%0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:Answers to ways to make sure Sinatra can be reloaded easily%0a%3c (:title FAQ: Reloading Sinatra App:)%0a%3c Parent:(Technology.)Ruby%0a%3c includeme:[[Technology.Ruby]]%0a%3c Categories:[[!FAQ]], [[!Technology]], [[!Ruby]], [[!Sinatra]]%0a%3c Tags: faq, ruby, sinatra, testing%0a%3c (:tags-hide faq, ruby, sinatra, testing:)%0a%3c >>%3c%3c%0a
host:1364137560=71.63.215.130
