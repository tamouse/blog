version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:11.0) Gecko/20100101 Firefox/11.0
author=tamara
charset=ISO-8859-1
csum=
ctime=1333639092
host=71.63.211.0
name=Technology.CreatingCustomEmacsModes
rev=5
targets=Technology.CreatingCustomEmacsModes,Technology.Emacs,Technology.IncludeMe,Category.HowTos
text=!!Using [@define-derived-mode@]%0a%0aThis method seems to be quite the easiest, although getting font stuff to work if you're defining your own fonts can be quite the task.%0a%0a!!! Simple start-up%0a%0aAt a minimum, you need to provide the following to define a new major mode:%0a%0a(:source lang=lisp linenum:)%0a(define-derived-mode mynew-mode text-mode%0a  "MyNew"%0a  "New mode for my stuff%0a  \\{mynew-mode-map}"%0a  )%0a%0a(provide 'mynew-mode)%0a(:sourcend:)%0a%0aThis makes a new mode, named @@mynew-mode@@ which is derived from @@text-mode@@. You can use any mode you wish to start from.%0a%0aYou should provide a means for customizing the mode parameters. First create a customization group and set the parent group appropriately for this mode:%0a%0a(:source lang=lisp linenum header="Add customization group":)%0a(defgroup mynew nil%0a  "New customization group for demo"%0a  :prefix "mynew-"%0a  :group 'wp)%0a%0a%0a(define-derived-mode mynew-mode fundamental-mode%0a  "MyNew"%0a  "Major mode for demonstration.%0a%0a\\{mynew-mode-map}"%0a;; add customization group%0a  :group 'mynew%0a  )%0a(:sourceend:)%0a%0a!!! Specifying emacs fonts%0a%0aEmacs has a nice font scheme it calls ''Faces'' that will allow you to perform syntax markup on your files. However, setting faces can be quite a chore. You have to specify the set of keywords that will determine what face to apply. Keywords are really regular expressions that match strings in your file. There is a nifty function called @@regexp-opt@@ which you pass a list of strings containing your keywords and it returns an optimized regexp:%0a%0a(:source lang=lisp linenum header="regexp-opt example":)%0a(regexp-opt '("if" "else" "elseif" "while" "unless" "for" "foreach" "switch" "do") t)%0a%0aReturns:%0a%0a"\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)"%0a(:sourceend:)%0a%0aYou then plug that optimized regexp into a constant for the mode:%0a%0a(:source lang=lisp linenum header="define keyword constants":)%0a(defconst mynew-mode-font-lock-keywords-basic-syntax%0a  (list%0a   '("\\%3c\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)\\>" . font-lock-keyword-face)%0a   '("\\(\\$\\w*\\)" . font-lock-variable-name-face))%0a  "Minimal markup of language syntax and variable names")%0a(:sourceend:)%0a%0aTo use these, you need to modify the @@define-derived-mode@@ macro once again:%0a%0a(:source lang=lisp linenum header="add font lock info" highlight="7":)%0a(define-derived-mode mynew-mode fundamental-mode%0a  "MyNew"%0a  "Major mode for demonstration.%0a%0a\\{mynew-mode-map}"%0a  :group 'mynew%0a  (set (make-local-variable 'font-lock-defaults) '(mynew-mode-font-lock-keywords-basic-syntax))%0a  )%0a(:sourceend:)%0a%0a!!! Defining your own face names%0a%0aWhen I started out on this, I didn't realize this, but you need to define variables to use your face names appropriately. So, for each new face name you want:%0a%0a(:source lang=lisp linenum header="creating new face names":)%0a(defgroup mynew-faces nil%0a  "New face customization group for demo"%0a  :group 'mynew%0a  :group 'faces)%0a%0a(defvar mynew-syntax-face 'mynew-syntax-face)%0a%0a(defface mynew-syntax-face%0a  '((t :color blue3))%0a  "Face for syntax keywords"%0a  :group 'mynew-faces)%0a%0a(defvar mynew-variable-face 'mynew-variable-face)%0a%0a(defface mynew-variable-face%0a  '((t :color green))%0a  "Face for variable names"%0a  :group 'mynew-faces)%0a(:sourceend:)%0a%0aAnd change the font lock keywords definition%0a%0a(:source lang=lisp linenum header="use new face names" highlight="3,4":)%0a(defconst mynew-mode-font-lock-keywords-basic-syntax%0a  (list%0a   '("\\%3c\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)\\>" . mynew-syntax-face)%0a   '("\\(\\$\\w*\\)" . mynew-variable-face))%0a  "Minimal markup of language syntax and variable names")%0a(:sourceend:)%0a%0a%0a!!Using [@generic-mode@]%0a%0a%0aLink: [[emacs-fu: creating custom modes the easy way with generic-mode -> http://emacs-fu.blogspot.com/2010/04/creating-custom-modes-easy-way-with.html]]%0a%0a%0a>>quote%3c%3c%0a(:nolinkwikiwords:)%0aSyntax highlighting is useful when editing configuration files, programs and so on, as it helps to prevent errors and makes it easier to quickly scan documents.%0a%0aEmacs supports syntax highlighting (font locking in emacs lingo) for many different file types. For many common cases (e.g. editing for many programming languages, org-mode), emacs' support goes much further than merely colorizing keywords, and offers all kinds of 'magic' (auto-completion, 'electricity', special key bindings, â€¦). For some other file types, at least keywords are given some different color.%0a%0aStill, there are files that are not recognized by emacs as having some special format; these are displayed as plain text. This may be the case for less-common configuration files, or your own specific formats.%0a%0aDefining a full 'mode' for such file types can be a lot of work. Fortunately, emacs offers a easier way: generic-mode. generic-mode defines a whole lot of mode of modes for common formats, but also defines the define-generic-mode macro to create your own modes. %0a(:linkwikiwords:)%0a>>%3c%3c%0a(:Tags: emacs, emacs modes:)%0a(:tags-hide emacs, emacs modes:)%0a(:Posted: 2012-4-5 10:13:)%0a%0a%0a%0a>>comment%3c%3c%0aThis goes at the bottom of the page, hidden by comment block class%0aSummary:Some ways to create a major mode in emacs%0aParent:(Technology.)Emacs%0aIncludeMe:[[Technology.Emacs]]%0aCategories:[[!HowTos]]%0a>>%3c%3c%0a
time=1333704182
author:1333704182=tamara
diff:1333704182:1333704007:=
host:1333704182=71.63.211.0
author:1333704007=tamara
diff:1333704007:1333639544:=1,113d0%0a%3c !!Using [@define-derived-mode@]%0a%3c %0a%3c This method seems to be quite the easiest, although getting font stuff to work if you're defining your own fonts can be quite the task.%0a%3c %0a%3c !!! Simple start-up%0a%3c %0a%3c At a minimum, you need to provide the following to define a new major mode:%0a%3c %0a%3c (:source lang=lisp linenum:)%0a%3c (define-derived-mode mynew-mode text-mode%0a%3c   "MyNew"%0a%3c   "New mode for my stuff%0a%3c   \\{mynew-mode-map}"%0a%3c   )%0a%3c %0a%3c (provide 'mynew-mode)%0a%3c (:sourcend:)%0a%3c %0a%3c This makes a new mode, named @@mynew-mode@@ which is derived from @@text-mode@@. You can use any mode you wish to start from.%0a%3c %0a%3c You should provide a means for customizing the mode parameters. First create a customization group and set the parent group appropriately for this mode:%0a%3c %0a%3c (:source lang=lisp linenum header="Add customization group":)%0a%3c (defgroup mynew nil%0a%3c   "New customization group for demo"%0a%3c   :prefix "mynew-"%0a%3c   :group 'wp)%0a%3c %0a%3c %0a%3c (define-derived-mode mynew-mode fundamental-mode%0a%3c   "MyNew"%0a%3c   "Major mode for demonstration.%0a%3c %0a%3c \\{mynew-mode-map}"%0a%3c ;; add customization group%0a%3c   :group 'mynew%0a%3c   )%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Specifying emacs fonts%0a%3c %0a%3c Emacs has a nice font scheme it calls ''Faces'' that will allow you to perform syntax markup on your files. However, setting faces can be quite a chore. You have to specify the set of keywords that will determine what face to apply. Keywords are really regular expressions that match strings in your file. There is a nifty function called @@regexp-opt@@ which you pass a list of strings containing your keywords and it returns an optimized regexp:%0a%3c %0a%3c (:source lang=lisp linenum header="regexp-opt example":)%0a%3c (regexp-opt '("if" "else" "elseif" "while" "unless" "for" "foreach" "switch" "do") t)%0a%3c %0a%3c Returns:%0a%3c %0a%3c "\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)"%0a%3c (:sourceend:)%0a%3c %0a%3c You then plug that optimized regexp into a constant for the mode:%0a%3c %0a%3c (:source lang=lisp linenum header="define keyword constants":)%0a%3c (defconst mynew-mode-font-lock-keywords-basic-syntax%0a%3c   (list%0a%3c    '("\\%3c\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)\\>" . font-lock-keyword-face)%0a%3c    '("\\(\\$\\w*\\)" . font-lock-variable-name-face))%0a%3c   "Minimal markup of language syntax and variable names")%0a%3c (:sourceend:)%0a%3c %0a%3c To use these, you need to modify the @@define-derived-mode@@ macro once again:%0a%3c %0a%3c (:source lang=lisp linenum header="add font lock info" highlight="7":)%0a%3c (define-derived-mode mynew-mode fundamental-mode%0a%3c   "MyNew"%0a%3c   "Major mode for demonstration.%0a%3c %0a%3c \\{mynew-mode-map}"%0a%3c   :group 'mynew%0a%3c   (set (make-local-variable 'font-lock-defaults) '(mynew-mode-font-lock-keywords-basic-syntax))%0a%3c   )%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Defining your own face names%0a%3c %0a%3c When I started out on this, I didn't realize this, but you need to define variables to use your face names appropriately. So, for each new face name you want:%0a%3c %0a%3c (:source lang=lisp linenum header="creating new face names":)%0a%3c (defgroup mynew-faces nil%0a%3c   "New face customization group for demo"%0a%3c   :group 'mynew%0a%3c   :group 'faces)%0a%3c %0a%3c (defvar mynew-syntax-face 'mynew-syntax-face)%0a%3c %0a%3c (defface mynew-syntax-face%0a%3c   '((t :color blue3))%0a%3c   "Face for syntax keywords"%0a%3c   :group 'mynew-faces)%0a%3c %0a%3c (defvar mynew-variable-face 'mynew-variable-face)%0a%3c %0a%3c (defface mynew-variable-face%0a%3c   '((t :color green))%0a%3c   "Face for variable names"%0a%3c   :group 'mynew-faces)%0a%3c (:sourceend:)%0a%3c %0a%3c And change the font lock keywords definition%0a%3c %0a%3c (:source lang=lisp linenum header="use new face names" highlight="3,4":)%0a%3c (defconst mynew-mode-font-lock-keywords-basic-syntax%0a%3c   (list%0a%3c    '("\\%3c\\(do\\|else\\(?:if\\)?\\|for\\(?:each\\)?\\|if\\|switch\\|unless\\|while\\)\\>" . mynew-syntax-face)%0a%3c    '("\\(\\$\\w*\\)" . mynew-variable-face))%0a%3c   "Minimal markup of language syntax and variable names")%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c !!Using [@generic-mode@]%0a%3c %0a%3c %0a136c23%0a%3c Summary:Some ways to create a major mode in emacs%0a---%0a> Summary:a short tutorial on creating custom emacs modes based on [@generic-mode@]%0a
host:1333704007=71.63.211.0
author:1333639544=tamara
diff:1333639544:1333639480:=0a1%0a> (:title Using [@generic-mode] to create custom emacs modes on the fly:)%0a
host:1333639544=71.63.211.0
author:1333639480=tamara
diff:1333639480:1333639092:=1d0%0a%3c (:title Using [@generic-mode] to create custom emacs modes on the fly:)%0a
host:1333639480=71.63.211.0
author:1333639092=tamara
diff:1333639092:1333639092:=1,27d0%0a%3c Link: [[emacs-fu: creating custom modes the easy way with generic-mode -> http://emacs-fu.blogspot.com/2010/04/creating-custom-modes-easy-way-with.html]]%0a%3c %0a%3c %0a%3c >>quote%3c%3c%0a%3c (:nolinkwikiwords:)%0a%3c Syntax highlighting is useful when editing configuration files, programs and so on, as it helps to prevent errors and makes it easier to quickly scan documents.%0a%3c %0a%3c Emacs supports syntax highlighting (font locking in emacs lingo) for many different file types. For many common cases (e.g. editing for many programming languages, org-mode), emacs' support goes much further than merely colorizing keywords, and offers all kinds of 'magic' (auto-completion, 'electricity', special key bindings, â€¦). For some other file types, at least keywords are given some different color.%0a%3c %0a%3c Still, there are files that are not recognized by emacs as having some special format; these are displayed as plain text. This may be the case for less-common configuration files, or your own specific formats.%0a%3c %0a%3c Defining a full 'mode' for such file types can be a lot of work. Fortunately, emacs offers a easier way: generic-mode. generic-mode defines a whole lot of mode of modes for common formats, but also defines the define-generic-mode macro to create your own modes. %0a%3c (:linkwikiwords:)%0a%3c >>%3c%3c%0a%3c (:Tags: emacs, emacs modes:)%0a%3c (:tags-hide emacs, emacs modes:)%0a%3c (:Posted: 2012-4-5 10:13:)%0a%3c %0a%3c %0a%3c %0a%3c >>comment%3c%3c%0a%3c This goes at the bottom of the page, hidden by comment block class%0a%3c Summary:a short tutorial on creating custom emacs modes based on [@generic-mode@]%0a%3c Parent:(Technology.)Emacs%0a%3c IncludeMe:[[Technology.Emacs]]%0a%3c Categories:[[!HowTos]]%0a%3c >>%3c%3c%0a
host:1333639092=71.63.211.0
