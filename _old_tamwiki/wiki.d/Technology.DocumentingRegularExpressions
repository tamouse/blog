version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20100101 Firefox/16.0
author=tamara
charset=ISO-8859-1
csum=add links to various language regex documentation
ctime=1351923382
host=71.63.215.130
name=Technology.DocumentingRegularExpressions
rev=3
targets=Technology.DocumentingRegularExpressions,Technology.Development,Technology.IncludeMe,Category.BestPractices
text=>>comment%3c%3c%0aSummary:Utilizing the x modifier in order to enable well-documented regular expressions%0aParent:(Technology.)Development%0aIncludeMe:[[(Technology.)Development]]%0aCategories:[[!BestPractices]]%0aTags: regex, pcre, documentation%0a(:tags-hide regex, pcre, documentation :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0aRegular Expressions (commonly referred to as 'regexes') can be highly opaque voodunesque constructions that often are difficult to decipher and thus modify when the time comes. Regexes seem to be a black art to many people, and something that takes a while to understand and master. Documenting regexes is something practically no one does, yet could be so helpful for many people.%0a[[#excerptend]]%0a%0a!! PCRE modifiers%0a%0a[[PCRE -> http://pcre.org]] (Perl Compatible Regular Expressions) has several modifiers that do various things to the action of the regex. These are the ones defined for PCRE:%0a%0a:i:make the match case insensitive%0a:m:multiline%0a:s:dot matches newlines%0a:x:ignore white spaces in specification%0a%0a!! Enter the '''x''' modifier%0a%0aThe '''x''' modifier is where we can take advantage of the regex ignoring white space between pattern elements to beautify the regex and insert comments.%0a%0a(:source lang=perl header="A simple regex to detect blank lines":)%0a$is_blank_re = qr{^\s*$};%0a(:sourceend:)%0a%0aThe above regex is quite simple, most people should understand it well enough. But for illustration, let's break this up a bit, beautify it, and add some comments:%0a%0a(:source lang=perl linenum tabwidth=4 header="Documented regex":)%0a$is_blank_re =%0a    qr{%0a       ^                    # match the beginning of the string%0a       \s*                  # match zero or more white spaces%0a       $                    # match the end of the string%0a      }x;%0a(:sourceend:)%0a%0aThis at least makes it clearer what each element of the regex ''is'' and what it ''does''. Using the regex defined is the same in either case:%0a%0a(:source lang=perl linenum tabwidth=4 header="example skipping blank lines in a file":)%0awhile ($line = %3cSTDIN>) {%0a    next if ( $line =~ m{$is_blank_re} );%0a    # process the line%0a}%0a(:sourceend:)%0a%0a!! Links for a few languages using regular expressions%0a%0a* [[PCRE -> http://pcre.org]]%0a* [[Perl -> http://perldoc.perl.org/perlre.html]]%0a* [[PHP -> http://us3.php.net/manual/en/reference.pcre.pattern.modifiers.php]]%0a* [[Ruby -> http://www.ruby-doc.org/core-1.9.3/Regexp.html]] %0a
time=1351924060
author:1351924060=tamara
csum:1351924060=add links to various language regex documentation
diff:1351924060:1351923530:=16,17c16,17%0a%3c [[PCRE -> http://pcre.org]] (Perl Compatible Regular Expressions) has several modifiers that do various things to the action of the regex. These are the ones defined for PCRE:%0a%3c %0a---%0a> PCRE has several modifiers that do various things to the action of the regex. These are the ones defined for PCRE:%0a> %0a25,26c25,28%0a%3c The '''x''' modifier is where we can take advantage of the regex ignoring white space between pattern elements to beautify the regex and insert comments.%0a%3c %0a---%0a> The last modifier is where we can take advantage of the regex ignoring white space between pattern elements to beautify the regex and insert comments.%0a> %0a> %0a> %0a50,56d51%0a%3c %0a%3c !! Links for a few languages using regular expressions%0a%3c %0a%3c * [[PCRE -> http://pcre.org]]%0a%3c * [[Perl -> http://perldoc.perl.org/perlre.html]]%0a%3c * [[PHP -> http://us3.php.net/manual/en/reference.pcre.pattern.modifiers.php]]%0a%3c * [[Ruby -> http://www.ruby-doc.org/core-1.9.3/Regexp.html]] %0a
host:1351924060=71.63.215.130
author:1351923530=tamara
csum:1351923530=expand example usage
diff:1351923530:1351923382:=46,50c46,47%0a%3c (:source lang=perl linenum tabwidth=4 header="example skipping blank lines in a file":)%0a%3c while ($line = %3cSTDIN>) {%0a%3c     next if ( $line =~ m{$is_blank_re} );%0a%3c     # process the line%0a%3c }%0a---%0a> (:source lang=perl header="example using $is_blank_re":)%0a> next if ( $line =~ m{$is_blank_re} );%0a
host:1351923530=71.63.215.130
author:1351923382=tamara
csum:1351923382=new article
diff:1351923382:1351923382:=1,48d0%0a%3c >>comment%3c%3c%0a%3c Summary:Utilizing the x modifier in order to enable well-documented regular expressions%0a%3c Parent:(Technology.)Development%0a%3c IncludeMe:[[(Technology.)Development]]%0a%3c Categories:[[!BestPractices]]%0a%3c Tags: regex, pcre, documentation%0a%3c (:tags-hide regex, pcre, documentation :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c Regular Expressions (commonly referred to as 'regexes') can be highly opaque voodunesque constructions that often are difficult to decipher and thus modify when the time comes. Regexes seem to be a black art to many people, and something that takes a while to understand and master. Documenting regexes is something practically no one does, yet could be so helpful for many people.%0a%3c [[#excerptend]]%0a%3c %0a%3c !! PCRE modifiers%0a%3c %0a%3c PCRE has several modifiers that do various things to the action of the regex. These are the ones defined for PCRE:%0a%3c %0a%3c :i:make the match case insensitive%0a%3c :m:multiline%0a%3c :s:dot matches newlines%0a%3c :x:ignore white spaces in specification%0a%3c %0a%3c !! Enter the '''x''' modifier%0a%3c %0a%3c The last modifier is where we can take advantage of the regex ignoring white space between pattern elements to beautify the regex and insert comments.%0a%3c %0a%3c %0a%3c %0a%3c (:source lang=perl header="A simple regex to detect blank lines":)%0a%3c $is_blank_re = qr{^\s*$};%0a%3c (:sourceend:)%0a%3c %0a%3c The above regex is quite simple, most people should understand it well enough. But for illustration, let's break this up a bit, beautify it, and add some comments:%0a%3c %0a%3c (:source lang=perl linenum tabwidth=4 header="Documented regex":)%0a%3c $is_blank_re =%0a%3c     qr{%0a%3c        ^                    # match the beginning of the string%0a%3c        \s*                  # match zero or more white spaces%0a%3c        $                    # match the end of the string%0a%3c       }x;%0a%3c (:sourceend:)%0a%3c %0a%3c This at least makes it clearer what each element of the regex ''is'' and what it ''does''. Using the regex defined is the same in either case:%0a%3c %0a%3c (:source lang=perl header="example using $is_blank_re":)%0a%3c next if ( $line =~ m{$is_blank_re} );%0a%3c (:sourceend:)%0a
host:1351923382=71.63.215.130
