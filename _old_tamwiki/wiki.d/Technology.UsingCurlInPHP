version=pmwiki-2.2.38 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10.5; rv:13.0) Gecko/20100101 Firefox/13.0.1
author=tamara
charset=ISO-8859-1
csum=add a summary
ctime=1288658298
host=71.63.211.0
name=Technology.UsingCurlInPHP
rev=7
targets=Technology.UsingCurlInPHP
text=[[#excerpt]]%0aThe @@[[http://us.php.net/manual/en/book.curl.php|cURL]]@@ extension to PHP is a very useful extension for retrieving web objects that you don't necessarily want to deal with directly, such as retrieving files for storage and later use.%0a[[#excerptend]]%0a%0acURL typically comes installed in many versions of PHP. Running @@phpinfo()@@ will tell you whether you've got cURL installed.%0a%0acURL has many [[http://us.php.net/manual/en/function.curl-setopt.php|options]] to it. Selecting the right options is important for using cURL effectively.%0a%0a!!An example%0a%0aRetrieving a file while following redirects:%0a%0a(:source lang=php linenum tabwidth=2:)%0a%3c?php %0a%0adefine('TEMPDIR', '/tmp/');%0adefine('IMAGEDIR', '/tmp/');%0adefine('DEBUG', true);%0a%0a$image = pull_image('Some $misc //image//',time(),"http://ttwiki/pub/skins/tarski/img/hdr/greytree.jpg");%0aecho "\$image=$image\n";%0a%0afunction pull_image($name, $date, $imguri)%0a{%0a  if (DEBUG) echo "\$name=$name, \$date=$date, \$imguri=$imguri\n";%0a  $ch = curl_init();%0a  $fn = tempnam(TEMPDIR, "img"); // TEMPDIR defined elsewhere%0a  if (DEBUG) echo "\$fn=$fn\n";%0a  $fh = fopen($fn,'w'); // file to contain page%0a  $hn = $fn . '.header';%0a  if (DEBUG) echo "\$hn=$hn\n";%0a  $hh = fopen($hn,'w'); // file to contain header%0a  $options = Array(%0a		   CURLOPT_URL => $imguri,%0a		   CURLOPT_USERAGENT => "Mozilla/5.0",%0a		   CURLOPT_FILE => $fh,%0a		   CURLOPT_HEADER => false,%0a		   CURLOPT_WRITEHEADER => $hh,%0a		   CURLOPT_FOLLOWLOCATION => TRUE,%0a		   CURLOPT_MAXREDIRS => '10'%0a		   );%0a  curl_setopt_array($ch, $options);%0a  if (curl_exec($ch) === FALSE) {%0a    die("Unable to retrieve $imgurl: ".curl_error($ch)."\n");%0a  }%0a  curl_close($ch);%0a  fclose($fh);%0a  fclose($hh);%0a  if (file_exists($fn)) {%0a    $ext = determine_extension($fn,$hn);%0a    if (false === $ext) {%0a      die("File retrieved $fn is not an image type of file\n");%0a    }%0a    $savefn = IMAGEDIR.preg_replace('/[^[:alnum:]]/','',$name)."-".date("Y-m-d",$date).".".$ext; //IMAGEDIR defined elsewhere%0a    if (DEBUG) echo "\$savefn=$savefn\n";%0a    rename($fn, $savefn);%0a    return $savefn;%0a  } else {%0a    return NULL;%0a  }%0a}%0a%0afunction determine_extension($fn, $hn)%0a{%0a  // determine the extension based on the file Content-type returned in the header%0a  $type2ext = array('image/jpeg' => 'jpg',%0a		    'image/jpg' => 'jpg',%0a		    'image/png' => 'png',%0a		    'image/gif' => 'gif');%0a		    %0a  $header=file_get_contents($hn);%0a  $header_lines = explode("\r\n",$header);%0a  if (DEBUG) echo "\$header_lines=\n".print_r($header_lines,true)."\n";%0a  $i = 0;%0a  while(! preg_match("/^HTTP.* 200 OK/",$header_lines[$i]) && $i %3c count($header_lines)) {$i++;}%0a  if (DEBUG) echo "\$i=$i, \$header_lines[$i]=$header_lines[$i]\n";%0a  if ($i >= count($header_lines)) return false; // no header returned found%0a  while(! preg_match("/^Content-type:/i",$header_lines[$i]) && $i %3c count($header_lines)) {$i++;}%0a  if (DEBUG) echo "\$i=$i, \$header_lines[$i]=$header_lines[$i]\n";%0a  if ($i >= count($header_lines)) return false; // no Content-type returned%0a  list($name,$value) = explode(": ",$header_lines[$i]);%0a  if (DEBUG) echo "\$name=$name, \$value=$value\n";%0a  $parts = explode("; ",$value);%0a  if (DEBUG) echo "\$parts=\n".print_r($parts,true)."\n";%0a  $type=$parts[0];%0a  if (DEBUG) echo "\$type=$type\n";%0a  return (isset($type2ext[$type])) ? $type2ext[$type] : false;%0a}%0a(:sourceend:)%0a%0aWhich outputs:%0a%0a(:code:)%0a$ php usingcurlex.php %0a$name=Some $misc //image//, $date=1334033959, $imguri=http://ttwiki/pub/skins/tarski/img/hdr/greytree.jpg%0a$fn=/private/tmp/imgRlsf9s%0a$hn=/private/tmp/imgRlsf9s.header%0a$header_lines=%0aArray%0a(%0a    [0] => HTTP/1.1 200 OK%0a    [1] => Set-Cookie: TRACKID=9ac675f419705b6e771624c13eab4e8e; Path=/; Version=1%0a    [2] => Content-Type: image/jpeg%0a    [3] => Accept-Ranges: bytes%0a    [4] => ETag: "1813642202"%0a    [5] => Last-Modified: Thu, 29 Mar 2012 04:13:45 GMT%0a    [6] => Content-Length: 23355%0a    [7] => Date: Tue, 10 Apr 2012 04:59:19 GMT%0a    [8] => Server: lighttpd%0a    [9] => %0a    [10] => %0a)%0a%0a$i=0, $header_lines[0]=HTTP/1.1 200 OK%0a$i=2, $header_lines[2]=Content-Type: image/jpeg%0a$name=Content-Type, $value=image/jpeg%0a$parts=%0aArray%0a(%0a    [0] => image/jpeg%0a)%0a%0a$type=image/jpeg%0a$savefn=/tmp/Somemiscimage-2012-04-09.jpg%0a$image=/tmp/Somemiscimage-2012-04-09.jpg%0a(:codeend:)%0a%0aWhat's important to note here is that the curl extension uses a file to write the retrieved data to. (If no file handle is given to curl, @@curl->exec@@ send the returned url to STDOUT (i.e., the browser). To get curl to return the result to a variable, use set @@CURLOPT_RETURNTRANSFER@@ in the curl options to @@true@@.) It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.%0a%0aIn the example above, two temporary filenames were created, one for the file contents and one for the header(s), and then opened in write mode. The file handles were passed into the curl object, options were set, and the curl run. After checking the result to make sure the curl ran correctly, the files are both closed and the curl is shut down. From then on, the file is dealt with first in it's temporary location, and finally moved to the permanent location. The header file is read to determine the type of file sent (header "Content-Type:").%0a%0a%0a(:Summary:A quick example of using the curl library functions inside PHP:)%0a(:Parent:(Technology.)PHP:)%0a(:IncludeMe:[[(Technology.)PHP]]:)%0a(:Categories:[[!Articles]]:)%0a(:Tags: php, curl:)%0a(:tags-hide php, curl :)%0a
time=1340576485
author:1340576485=tamara
csum:1340576485=add a summary
diff:1340576485:1334035880:minor=133c133%0a%3c (:Summary:A quick example of using the curl library functions inside PHP:)%0a---%0a> (:Summary:a one line description:)%0a
host:1340576485=71.63.211.0
author:1334035880=tamara
diff:1334035880:1334034962:=
host:1334035880=127.0.0.1
author:1334034962=tamara
diff:1334034962:1334034336:=128c128%0a%3c What's important to note here is that the curl extension uses a file to write the retrieved data to. (If no file handle is given to curl, @@curl->exec@@ send the returned url to STDOUT (i.e., the browser). To get curl to return the result to a variable, use set @@CURLOPT_RETURNTRANSFER@@ in the curl options to @@true@@.) It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.%0a---%0a> What's important to note here is that the curl extension uses a file to write the retrieved data to. (If no file handle is given to curl, @@curl->exec@@ send the returned url to STDOUT (i.e., the browser).) It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.%0a
host:1334034962=127.0.0.1
author:1334034336=tamara
diff:1334034336:1334034074:=128,130c128,130%0a%3c What's important to note here is that the curl extension uses a file to write the retrieved data to. (If no file handle is given to curl, @@curl->exec@@ send the returned url to STDOUT (i.e., the browser).) It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.%0a%3c %0a%3c In the example above, two temporary filenames were created, one for the file contents and one for the header(s), and then opened in write mode. The file handles were passed into the curl object, options were set, and the curl run. After checking the result to make sure the curl ran correctly, the files are both closed and the curl is shut down. From then on, the file is dealt with first in it's temporary location, and finally moved to the permanent location. The header file is read to determine the type of file sent (header "Content-Type:").%0a---%0a> What's important to note here is that the curl extension uses a file to write the retrieved data to. (If no file handle is given to curl, @@curl->exec@@ returns the contents of the file retrieved as a string.) It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.%0a> %0a> In the example above, a temporary filename was created, and then opened in write mode. The file handle was passed into the curl object, options were set, and the curl run. After checking the result to make sure the curl ran correctly, the file is closed and the curl is shut down. From then on, the file is dealt with first in it's temporary location, and finally moved to the permanent location.%0a
host:1334034336=127.0.0.1
author:1334034074=tamara
diff:1334034074:1289639817:=1c1,7%0a%3c [[#excerpt]]%0a---%0a> (:Summary:using the cURL PHP extension:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a> '''Tags:''' (:tags php, curl, source code, coding examples, web development:)%0a> %0a3,4c9%0a%3c [[#excerptend]]%0a%3c %0a---%0a> %0a14,22c19,24%0a%3c %3c?php %0a%3c %0a%3c define('TEMPDIR', '/tmp/');%0a%3c define('IMAGEDIR', '/tmp/');%0a%3c define('DEBUG', true);%0a%3c %0a%3c $image = pull_image('Some $misc //image//',time(),"http://ttwiki/pub/skins/tarski/img/hdr/greytree.jpg");%0a%3c echo "\$image=$image\n";%0a%3c %0a---%0a> /**%0a>  * Pull the image and save locally%0a>  *%0a>  * @return file_spec - APP_ROOT relative path to file retrieved%0a>  * @author Tamara Temple %3ctamara@tamaratemple.com>%0a>  **/%0a25,60c27,63%0a%3c   if (DEBUG) echo "\$name=$name, \$date=$date, \$imguri=$imguri\n";%0a%3c   $ch = curl_init();%0a%3c   $fn = tempnam(TEMPDIR, "img"); // TEMPDIR defined elsewhere%0a%3c   if (DEBUG) echo "\$fn=$fn\n";%0a%3c   $fh = fopen($fn,'w'); // file to contain page%0a%3c   $hn = $fn . '.header';%0a%3c   if (DEBUG) echo "\$hn=$hn\n";%0a%3c   $hh = fopen($hn,'w'); // file to contain header%0a%3c   $options = Array(%0a%3c 		   CURLOPT_URL => $imguri,%0a%3c 		   CURLOPT_USERAGENT => "Mozilla/5.0",%0a%3c 		   CURLOPT_FILE => $fh,%0a%3c 		   CURLOPT_HEADER => false,%0a%3c 		   CURLOPT_WRITEHEADER => $hh,%0a%3c 		   CURLOPT_FOLLOWLOCATION => TRUE,%0a%3c 		   CURLOPT_MAXREDIRS => '10'%0a%3c 		   );%0a%3c   curl_setopt_array($ch, $options);%0a%3c   if (curl_exec($ch) === FALSE) {%0a%3c     die("Unable to retrieve $imgurl: ".curl_error($ch)."\n");%0a%3c   }%0a%3c   curl_close($ch);%0a%3c   fclose($fh);%0a%3c   fclose($hh);%0a%3c   if (file_exists($fn)) {%0a%3c     $ext = determine_extension($fn,$hn);%0a%3c     if (false === $ext) {%0a%3c       die("File retrieved $fn is not an image type of file\n");%0a%3c     }%0a%3c     $savefn = IMAGEDIR.preg_replace('/[^[:alnum:]]/','',$name)."-".date("Y-m-d",$date).".".$ext; //IMAGEDIR defined elsewhere%0a%3c     if (DEBUG) echo "\$savefn=$savefn\n";%0a%3c     rename($fn, $savefn);%0a%3c     return $savefn;%0a%3c   } else {%0a%3c     return NULL;%0a%3c   }%0a---%0a> 	global $messages,$errors;%0a> 	$ch = curl_init();%0a> 	$fn = tempnam(TEMPDIR, "img");%0a> 	debug("\$fn=$fn");%0a> 	$fh = fopen($fn,'w');%0a> 	$options = Array(%0a> 		CURLOPT_URL => $imguri,%0a> 		CURLOPT_USERAGENT => "Mozilla/5.0",%0a> 		CURLOPT_FILE => $fh,%0a> 		CURLOPT_HEADER => FALSE,%0a> 		CURLOPT_FOLLOWLOCATION => TRUE,%0a> 		CURLOPT_MAXREDIRS => '10'%0a> 	);%0a> 	curl_setopt_array($ch, $options);%0a> 	if (curl_exec($ch) === FALSE) {%0a> 		$error_msg = "Unable to retrieve $imgurl: ".curl_error($ch);%0a> 		error_log($error_msg);%0a> 		$errors[] = $error_msg;%0a> 	}%0a> 	fclose($fh);%0a> 	curl_close($ch);%0a> 	if (file_exists($fn)) {%0a> 		chmod($fn,0666);%0a> 		$ext = determine_extension($fn);%0a> 		debug("\$ext=$ext");%0a> 		if ($ext == 'dat') {%0a> 			$error_msg = "File retrieved $fn is not an image type of file";%0a> 			$errors[] = $error_msg;%0a> 			error_log($error_msg);%0a> 			return NULL;%0a> 		}%0a> 		$savefn = IMAGEDIR."/".preg_replace('/\s+/','_',$name).".".date("YMd",$date).".".$ext;%0a> 		rename($fn, APP_ROOT.$savefn);%0a> 		return $savefn;%0a> 	} else {%0a> 		return NULL;%0a> 	}%0a62,88d64%0a%3c %0a%3c function determine_extension($fn, $hn)%0a%3c {%0a%3c   // determine the extension based on the file Content-type returned in the header%0a%3c   $type2ext = array('image/jpeg' => 'jpg',%0a%3c 		    'image/jpg' => 'jpg',%0a%3c 		    'image/png' => 'png',%0a%3c 		    'image/gif' => 'gif');%0a%3c 		    %0a%3c   $header=file_get_contents($hn);%0a%3c   $header_lines = explode("\r\n",$header);%0a%3c   if (DEBUG) echo "\$header_lines=\n".print_r($header_lines,true)."\n";%0a%3c   $i = 0;%0a%3c   while(! preg_match("/^HTTP.* 200 OK/",$header_lines[$i]) && $i %3c count($header_lines)) {$i++;}%0a%3c   if (DEBUG) echo "\$i=$i, \$header_lines[$i]=$header_lines[$i]\n";%0a%3c   if ($i >= count($header_lines)) return false; // no header returned found%0a%3c   while(! preg_match("/^Content-type:/i",$header_lines[$i]) && $i %3c count($header_lines)) {$i++;}%0a%3c   if (DEBUG) echo "\$i=$i, \$header_lines[$i]=$header_lines[$i]\n";%0a%3c   if ($i >= count($header_lines)) return false; // no Content-type returned%0a%3c   list($name,$value) = explode(": ",$header_lines[$i]);%0a%3c   if (DEBUG) echo "\$name=$name, \$value=$value\n";%0a%3c   $parts = explode("; ",$value);%0a%3c   if (DEBUG) echo "\$parts=\n".print_r($parts,true)."\n";%0a%3c   $type=$parts[0];%0a%3c   if (DEBUG) echo "\$type=$type\n";%0a%3c   return (isset($type2ext[$type])) ? $type2ext[$type] : false;%0a%3c }%0a91,127c67,68%0a%3c Which outputs:%0a%3c %0a%3c (:code:)%0a%3c $ php usingcurlex.php %0a%3c $name=Some $misc //image//, $date=1334033959, $imguri=http://ttwiki/pub/skins/tarski/img/hdr/greytree.jpg%0a%3c $fn=/private/tmp/imgRlsf9s%0a%3c $hn=/private/tmp/imgRlsf9s.header%0a%3c $header_lines=%0a%3c Array%0a%3c (%0a%3c     [0] => HTTP/1.1 200 OK%0a%3c     [1] => Set-Cookie: TRACKID=9ac675f419705b6e771624c13eab4e8e; Path=/; Version=1%0a%3c     [2] => Content-Type: image/jpeg%0a%3c     [3] => Accept-Ranges: bytes%0a%3c     [4] => ETag: "1813642202"%0a%3c     [5] => Last-Modified: Thu, 29 Mar 2012 04:13:45 GMT%0a%3c     [6] => Content-Length: 23355%0a%3c     [7] => Date: Tue, 10 Apr 2012 04:59:19 GMT%0a%3c     [8] => Server: lighttpd%0a%3c     [9] => %0a%3c     [10] => %0a%3c )%0a%3c %0a%3c $i=0, $header_lines[0]=HTTP/1.1 200 OK%0a%3c $i=2, $header_lines[2]=Content-Type: image/jpeg%0a%3c $name=Content-Type, $value=image/jpeg%0a%3c $parts=%0a%3c Array%0a%3c (%0a%3c     [0] => image/jpeg%0a%3c )%0a%3c %0a%3c $type=image/jpeg%0a%3c $savefn=/tmp/Somemiscimage-2012-04-09.jpg%0a%3c $image=/tmp/Somemiscimage-2012-04-09.jpg%0a%3c (:codeend:)%0a%3c %0a---%0a> [-(For the @@determine_extension()@@ function, see FindingTheMimeTypeOfAFile and WriteFunctionsInASeparateInclude)-]%0a> %0a133,138c74%0a%3c (:Summary:a one line description:)%0a%3c (:Parent:(Technology.)PHP:)%0a%3c (:IncludeMe:[[(Technology.)PHP]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: php, curl:)%0a%3c (:tags-hide php, curl :)%0a---%0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1334034074=127.0.0.1
author:1289639817=tamara
csum:1289639817=clarify curl behaviour
diff:1289639817:1288658298:minor=69c69%0a%3c What's important to note here is that the curl extension uses a file to write the retrieved data to. (If no file handle is given to curl, @@curl->exec@@ returns the contents of the file retrieved as a string.) It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.%0a---%0a> What's important to note here is that the curl extension requires a file to write the retrieved data to. It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.%0a
host:1289639817=71.63.211.0
author:1288658298=tamara
diff:1288658298:1288658298:=1,74d0%0a%3c (:Summary:using the cURL PHP extension:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c '''Tags:''' (:tags php, curl, source code, coding examples, web development:)%0a%3c %0a%3c The @@[[http://us.php.net/manual/en/book.curl.php|cURL]]@@ extension to PHP is a very useful extension for retrieving web objects that you don't necessarily want to deal with directly, such as retrieving files for storage and later use.%0a%3c %0a%3c cURL typically comes installed in many versions of PHP. Running @@phpinfo()@@ will tell you whether you've got cURL installed.%0a%3c %0a%3c cURL has many [[http://us.php.net/manual/en/function.curl-setopt.php|options]] to it. Selecting the right options is important for using cURL effectively.%0a%3c %0a%3c !!An example%0a%3c %0a%3c Retrieving a file while following redirects:%0a%3c %0a%3c (:source lang=php linenum tabwidth=2:)%0a%3c /**%0a%3c  * Pull the image and save locally%0a%3c  *%0a%3c  * @return file_spec - APP_ROOT relative path to file retrieved%0a%3c  * @author Tamara Temple %3ctamara@tamaratemple.com>%0a%3c  **/%0a%3c function pull_image($name, $date, $imguri)%0a%3c {%0a%3c 	global $messages,$errors;%0a%3c 	$ch = curl_init();%0a%3c 	$fn = tempnam(TEMPDIR, "img");%0a%3c 	debug("\$fn=$fn");%0a%3c 	$fh = fopen($fn,'w');%0a%3c 	$options = Array(%0a%3c 		CURLOPT_URL => $imguri,%0a%3c 		CURLOPT_USERAGENT => "Mozilla/5.0",%0a%3c 		CURLOPT_FILE => $fh,%0a%3c 		CURLOPT_HEADER => FALSE,%0a%3c 		CURLOPT_FOLLOWLOCATION => TRUE,%0a%3c 		CURLOPT_MAXREDIRS => '10'%0a%3c 	);%0a%3c 	curl_setopt_array($ch, $options);%0a%3c 	if (curl_exec($ch) === FALSE) {%0a%3c 		$error_msg = "Unable to retrieve $imgurl: ".curl_error($ch);%0a%3c 		error_log($error_msg);%0a%3c 		$errors[] = $error_msg;%0a%3c 	}%0a%3c 	fclose($fh);%0a%3c 	curl_close($ch);%0a%3c 	if (file_exists($fn)) {%0a%3c 		chmod($fn,0666);%0a%3c 		$ext = determine_extension($fn);%0a%3c 		debug("\$ext=$ext");%0a%3c 		if ($ext == 'dat') {%0a%3c 			$error_msg = "File retrieved $fn is not an image type of file";%0a%3c 			$errors[] = $error_msg;%0a%3c 			error_log($error_msg);%0a%3c 			return NULL;%0a%3c 		}%0a%3c 		$savefn = IMAGEDIR."/".preg_replace('/\s+/','_',$name).".".date("YMd",$date).".".$ext;%0a%3c 		rename($fn, APP_ROOT.$savefn);%0a%3c 		return $savefn;%0a%3c 	} else {%0a%3c 		return NULL;%0a%3c 	}%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c [-(For the @@determine_extension()@@ function, see FindingTheMimeTypeOfAFile and WriteFunctionsInASeparateInclude)-]%0a%3c %0a%3c What's important to note here is that the curl extension requires a file to write the retrieved data to. It is considered a best practice not to retrieve files directly into where they will reside, but to retrieve them to a temporary location, and then do whatever processing may be needed on them before moving them to the permanent location. This works similarly to how PHP handles uploaded files.%0a%3c %0a%3c In the example above, a temporary filename was created, and then opened in write mode. The file handle was passed into the curl object, options were set, and the curl run. After checking the result to make sure the curl ran correctly, the file is closed and the curl is shut down. From then on, the file is dealt with first in it's temporary location, and finally moved to the permanent location.%0a%3c %0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288658298=71.63.211.0
