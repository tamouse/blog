version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
author=ImportText
charset=ISO-8859-1
csum=fill out page vars
ctime=1320568285
host=127.0.0.1
name=Technology.GitSubmodules
rev=3
targets=Technology.Git,Technology.IncludeMe,Category.Articles
text=(:if false:)%0aSummary:a way to use code from other projects easily%0aParent:(Technology.)Git%0aIncludeMe:[[Technology.Git]]%0aCategories:[[!Articles]]%0aTags: git, tools, SCM, examples%0a(:tags-hide git, tools, SCM, examples:)%0a(:ifend:)%0a%0aThe Git Submodule facility is really Great for re-using code from%0aother projects. By modularizing the code and keeping things in%0apossibly separate repositories, you have the ability then to mix and%0amatch for your application as you see fit.%0a%0aModularization in general is a great thing usually, as well as writing%0acode that can be reused. Even if you aren't doing OOP, you can still%0awrite many good utilities so you don't have to reinvent the%0awheel. Create something with a general interface and function and take%0ait with you.%0a%0aThe submodule facility is loosely explained in the%0a[[Git Book -> http://book.git-scm.com/5_submodules.html]]%0aalthough the explanation still leaves something to desire. Here are%0athe steps I took to do this, with specific examples.%0a%0aFirst, my php common code is in a repository on http://gitorious.org%0aat:%0a%0a  https://gitorious.org/common-php-code%0a%0aThe public URL for getting the code is:%0a%0a  https://git.gitorious.org/common-php-code/common-php-code.git%0a%0aSo, first I created my super project, in this case%0a[@earthquakewatch@], initialized it and made an initial commit. I%0acreated a public repository this as well at gitorious:%0a%0a  https://gitorious.org/earthquakwatch/earthquakwatch%0a%0a(Yes, I know it's misspelled)%0a%0aThe public URL for this project is:%0a%0a  https://git.gitorious.org/earthquakwatch/earthquakwatch.git%0a%0aOkay, the structure of this project is:%0a%0a%0a  APP_ROOT/%0a  |%0a  +-css/       	       	       	-- styling stuff%0a  | |%0a  | + style.css%0a  | + images/%0a  |%0a  +-docs/			-- application documentation%0a  | +-sample-config.php	       	-- sample configuration file to customize%0a  |%0a  +-index.php  	       	       	-- application main file%0a  |%0a  +-js/		       		-- javascript stuff%0a  | +-jquery.js%0a  +-lib/       			-- libraries%0a  |%0a  +-local/			-- for local configuration%0a  |%0a  +-README%0a  |%0a  +-scripts/			-- working scripts of the application%0a  | |%0a  | +-init.inc.php%0a  |%0a  +-var/			-- data directory%0a%0aNow, I want to include the common php code underneath the [@lib@]%0adirectory, I merely add it as a submodule from the APP_ROOT directory:%0a%0a  $ git submodule add   https://git.gitorious.org/common-php-code/common-php-code.git lib/commoncode%0a%0aThis clones the common code repository as a submodule in the%0aearthquake project into the directory lib/commoncode. One thing I did%0ain addition to this to make the common code scripts I'm going to be%0ausing "first-class" scripts is to link them into the lib directory:%0a%0a  $ cd lib%0a  $ ln -s commoncode/class.Debug.php .%0a  $ ln -s commoncode/functions.inc.php .%0a%0aAnd there we have it!%0a%0a!! Cloning your project%0a%0aCloning your project (say to install it elsewhere to either work on or%0aas a prodution system) takes a couple more steps.%0a%0aAfter running the cloning process:%0a%0a  $ git clone https://git.gitorious.org/earthquakwatch/earthquakwatch.git newdir%0a%0aInitialize and update the submodules:%0a%0a  $ cd newdir%0a  $ git submodule init%0a  $ git submodule update%0a%0a!! Keeping submodules up to date%0a%0aThis is pretty straight-forward as well.%0a%0a  $ cd APP_ROOT/lib/commoncode%0a  $ git fetch master%0a%0a%0a %0a%0a
time=1334714369
author:1334714369=ImportText
diff:1334714369:1320568465:=3,5c3,6%0a%3c Parent:(Technology.)Git%0a%3c IncludeMe:[[Technology.Git]]%0a%3c Categories:[[!Articles]]%0a---%0a> Crumbs:[[Main/]] > [[ComputerStuff]] > [[SoftwareAndWebProgramming]]%0a> Parent:Git%0a> IncludeMe:[[Main.Git]]%0a> Categories:[[!ComputerStuff]]%0a116d116%0a%3c %0a
host:1334714369=127.0.0.1
author:1320568465=tamara
csum:1320568465=fill out page vars
diff:1320568465:1320568285:minor=3,6c3,6%0a%3c Crumbs:[[Main/]] > [[ComputerStuff]] > [[SoftwareAndWebProgramming]]%0a%3c Parent:Git%0a%3c IncludeMe:[[Main.Git]]%0a%3c Categories:[[!ComputerStuff]]%0a---%0a> Crumbs:[[Main/]]%0a> Parent:Main(.HomePage)%0a> IncludeMe:[[Main.HomePage]]%0a> Categories:[[!Uncategorized]]%0a
host:1320568465=71.63.211.0
author:1320568285=tamara
csum:1320568285=new page
diff:1320568285:1320568285:=1,116d0%0a%3c (:if false:)%0a%3c Summary:a way to use code from other projects easily%0a%3c Crumbs:[[Main/]]%0a%3c Parent:Main(.HomePage)%0a%3c IncludeMe:[[Main.HomePage]]%0a%3c Categories:[[!Uncategorized]]%0a%3c Tags: git, tools, SCM, examples%0a%3c (:tags-hide git, tools, SCM, examples:)%0a%3c (:ifend:)%0a%3c %0a%3c The Git Submodule facility is really Great for re-using code from%0a%3c other projects. By modularizing the code and keeping things in%0a%3c possibly separate repositories, you have the ability then to mix and%0a%3c match for your application as you see fit.%0a%3c %0a%3c Modularization in general is a great thing usually, as well as writing%0a%3c code that can be reused. Even if you aren't doing OOP, you can still%0a%3c write many good utilities so you don't have to reinvent the%0a%3c wheel. Create something with a general interface and function and take%0a%3c it with you.%0a%3c %0a%3c The submodule facility is loosely explained in the%0a%3c [[Git Book -> http://book.git-scm.com/5_submodules.html]]%0a%3c although the explanation still leaves something to desire. Here are%0a%3c the steps I took to do this, with specific examples.%0a%3c %0a%3c First, my php common code is in a repository on http://gitorious.org%0a%3c at:%0a%3c %0a%3c   https://gitorious.org/common-php-code%0a%3c %0a%3c The public URL for getting the code is:%0a%3c %0a%3c   https://git.gitorious.org/common-php-code/common-php-code.git%0a%3c %0a%3c So, first I created my super project, in this case%0a%3c [@earthquakewatch@], initialized it and made an initial commit. I%0a%3c created a public repository this as well at gitorious:%0a%3c %0a%3c   https://gitorious.org/earthquakwatch/earthquakwatch%0a%3c %0a%3c (Yes, I know it's misspelled)%0a%3c %0a%3c The public URL for this project is:%0a%3c %0a%3c   https://git.gitorious.org/earthquakwatch/earthquakwatch.git%0a%3c %0a%3c Okay, the structure of this project is:%0a%3c %0a%3c %0a%3c   APP_ROOT/%0a%3c   |%0a%3c   +-css/       	       	       	-- styling stuff%0a%3c   | |%0a%3c   | + style.css%0a%3c   | + images/%0a%3c   |%0a%3c   +-docs/			-- application documentation%0a%3c   | +-sample-config.php	       	-- sample configuration file to customize%0a%3c   |%0a%3c   +-index.php  	       	       	-- application main file%0a%3c   |%0a%3c   +-js/		       		-- javascript stuff%0a%3c   | +-jquery.js%0a%3c   +-lib/       			-- libraries%0a%3c   |%0a%3c   +-local/			-- for local configuration%0a%3c   |%0a%3c   +-README%0a%3c   |%0a%3c   +-scripts/			-- working scripts of the application%0a%3c   | |%0a%3c   | +-init.inc.php%0a%3c   |%0a%3c   +-var/			-- data directory%0a%3c %0a%3c Now, I want to include the common php code underneath the [@lib@]%0a%3c directory, I merely add it as a submodule from the APP_ROOT directory:%0a%3c %0a%3c   $ git submodule add   https://git.gitorious.org/common-php-code/common-php-code.git lib/commoncode%0a%3c %0a%3c This clones the common code repository as a submodule in the%0a%3c earthquake project into the directory lib/commoncode. One thing I did%0a%3c in addition to this to make the common code scripts I'm going to be%0a%3c using "first-class" scripts is to link them into the lib directory:%0a%3c %0a%3c   $ cd lib%0a%3c   $ ln -s commoncode/class.Debug.php .%0a%3c   $ ln -s commoncode/functions.inc.php .%0a%3c %0a%3c And there we have it!%0a%3c %0a%3c !! Cloning your project%0a%3c %0a%3c Cloning your project (say to install it elsewhere to either work on or%0a%3c as a prodution system) takes a couple more steps.%0a%3c %0a%3c After running the cloning process:%0a%3c %0a%3c   $ git clone https://git.gitorious.org/earthquakwatch/earthquakwatch.git newdir%0a%3c %0a%3c Initialize and update the submodules:%0a%3c %0a%3c   $ cd newdir%0a%3c   $ git submodule init%0a%3c   $ git submodule update%0a%3c %0a%3c !! Keeping submodules up to date%0a%3c %0a%3c This is pretty straight-forward as well.%0a%3c %0a%3c   $ cd APP_ROOT/lib/commoncode%0a%3c   $ git fetch master%0a%3c %0a%3c %0a%3c  %0a
host:1320568285=71.63.211.0
