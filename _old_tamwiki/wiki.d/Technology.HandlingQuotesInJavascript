version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
author=ImportText
charset=ISO-8859-1
csum=add section headings
ctime=1332134671
host=127.0.0.1
name=Technology.HandlingQuotesInJavascript
rev=12
targets=Technology.HandlingQuotesInJavascript,Technology.SyntaxError,Technology.JavaScript,Category.Articles,Category.HowTos
text=[[#excerpt]]%0aJavascript, like most other langages, has a variable type called @@string@@. Strings are typically delimited either by a single quote [@'@] or double quote [@"@]. If a single or double quote appears in a string, it must be somehow escaped so that Javascript handles it correctly.%0a[[#excerptend]]%0a%0a%0aThis can get tricky when mixing Javascript, HTML and PHP.%0a%0a!! Looking at some tricky data%0a%0aConsider the following test data:%0a%0a(:source lang=php -getcode linenum tabwidth=4:)%0a$testdata = array(%0a    array('title'=>"What's New",'link'=>'article/whats-new.html'),%0a    array('title'=>'Fred "Buster" Cox','link'=>'article/fred-buster-cox.html'),%0a);%0a(:sourceend:)%0a%0aThe first group's title contains a single quote, in this case acting as an apostrophe. The second group's title contains a pair of double quotes surrounding a nick name. These are handled differently in Javascript, PHP, and HTML, so all three must be considered when these are combined into one application.%0a%0a!! What we want to have happen%0a%0aThe above test data will be processed by PHP as follows:%0a%0a(:source lang=php -getcode linenum tabwidth=4:)%0aecho "%3cul>\n";%0aforeach ($testdata as $key => $value) {%0a  $title_h = htmlprotect($value['title']);%0a  $title_j = jsprotect($value['title']);%0a  $link = $value['link'];%0a  echo "%3cli>%3cspan onclick=\"insertlink('$link','$title_j')\" class=\"linkSel\">$title_h%3c/span>%3c/li>\n";%0a}%0aecho "%3c/ul>\n";%0a(:sourceend:)%0a%0aAnd the following shows the @@insertlink@@ javascript function:%0a%0a(:source lang=javascript -getcode linenum tabwidth=4:)%0afunction insertlink(l,t) {%0a  alert("Insert Link Function\n" + "title: " + t + "\n" + "link: " + l + "\n");%0a}%0a(:sourceend:)%0a%0aThe link and title from the test data will be passed through to the javascript function @@insertlink@@.%0a%0aSo, what we need to do is provide some means of protecting the quotes we need in the title entries.%0a%0a!! Protecting the strings for HTML%0a%0aFor php, this is pretty straight-forward and a function is provided for us: [[htmlentities -> http://us2.php.net/manual/en/function.htmlentities.php]]%0a%0a(:source lang=php -getcode:)%0a$title_h = htmlentities($value['title'],ENT_QUOTES,"utf-8");%0a(:sourceend:)%0a%0aFor the first title element, it produces:%0a%0a(:source lang=html4strict -getcode:)%0aWhat&#039;s New%0a(:sourceend:)%0a%0aFor the second title element, it produces:%0a%0a(:source lang=html4strict -getcode:)%0aFred &quot;Buster&quot; Cox%0a(:sourceend:)%0a%0a!! Protecting the strings for Javascript%0a%0aNeither of these strings, however, will work if passed to the javascript function @@insertlink@@. So instead, we have to encode things differently, and in this case it is by no means obvious what to do. Some discussion on the php-general mailing list shows that context of the string is quite important. Here again, the relationship between PHP, HTML and Javascript is ''so'' important. %0a%0a!!! First try, addslashes%0a%0aMy first thought was that using the PHP function [[ @@addslashes@@ -> http://us2.php.net/manual/en/function.addslashes.php]] would do the trick.%0a(:source lang=php -getcode:)%0a$esc_title = addslashes($value['title']);%0a(:sourceend:)%0a%0aThis time, the first title element is:%0a%0a(:source lang=javascript -getcode:)%0a'What\'s New'%0a(:sourceend:)%0a%0aand the second title element is:%0a%0a(:source lang=javascript -getcode:)%0a'Fred \"Buster\" Cox'%0a(:sourceend:)%0a%0aThus, what get's emitted by the php code fragment above looks like this:%0a%0a(:source lang=html4strict -getcode linenum tabwidth=4:)%0a%3cul>%0a%3cli>%3cspan onclick="insertlink('article/whats-new.html','What\'s New')" class="linkSel">What&#039;s New%3c/span>%3c/li>%0a%3cli>%3cspan onclick="insertlink('article/fred-buster-cox.html','Fred \"Buster\" Cox')" class="linkSel">Fred &quot;Buster&quot; Cox%3c/span>%3c/li>%0a%3c/ul>%0a(:sourceend:)%0a%0abut this produces errors in the second case. So something else is required.%0a%0a!!! Second try: JSON%0a%0aMy second thought was to use JSON encoding. As of PHP 5.3, the @@json_encode@@ function allows the use of specific encodings. For this application, since the title strings get wrapped by single quotes in the HTML output, we only want to encode the single quotes.%0a%0a(:source lang=javascript -getcode:)%0a$title_j = json_encode($title,JSON_HEX_APOS);%0a(:sourceend:)%0a%0abut this didn't work at all, since the value returned by @@json_encode@@ is also surrounded by quotes:%0a%0a(:source lang=html4strict -getcode:)%0a%3cul>%0a%3cli>%3cspan onclick="insertlink('article/whats-new.html','"What\u0027s New"') class="linkSel">What&#039;s New%3c/span>%3c/li>%0a%3cli>%3cspan onclick="insertlink('article/fred-buster-cox.html','"Fred \"Buster\" Cox"') class="linkSel">Fred &quot;Buster&quot; Cox%3c/span>%3c/li>%0a%3c/ul>%0a(:sourceend:)%0a%0awhich results in a Javascript error "Uncaught SyntaxError: Unexpected token ILLEGAL (repeated 2 times)".%0a%0aSo, something ''else'' is needed.%0a%0a!!! Third try, Base 64%0a%0aSo I thought, "Base64"? %0a%0aThis turns out to be a bit problematic, as javascript has no native support for base64 encoding/decoding. There are numerous resources that show how to write your own, and it turns out in Gecko and Webkit browsers, there is [[a pair of window functions available -> https://developer.mozilla.org/en/DOM/window.atob]] (once again leaving IE out in the cold). We'll try the @@atob@@ function here, using PHP to base64 encode the title data before sending it down:%0a%0a(:source lang=php -getcode:)%0a$title_j = base64_encode($value['title']);%0a(:sourceend:)%0a%0aand add this line in the @@insertlink@@ function before the @@alert@@:%0a%0a(:source lang=javascript -getcode:)%0at = window.atob(t);%0a(:sourceend:)%0a%0aWhich produces:%0a%0a(:source lang=html4strict -getcode linenum tabwidth=4:)%0a%3cul>%0a%3cli>%3cspan onclick="insertlink('article/whats-new.html','V2hhdCdzIE5ldw==')" class="linkSel">What&#039;s New%3c/span>%3c/li>%0a%3cli>%3cspan onclick="insertlink('article/fred-buster-cox.html','RnJlZCAiQnVzdGVyIiBDb3g=')" class="linkSel">Fred &quot;Buster&quot; Cox%3c/span>%3c/li>%0a%3c/ul>%0a(:sourceend:)%0a%0aClicking on the two spans in the browser produces:%0a%0a%25frame%25 Attach:whatsnewalert.png%0a%0a%25frame%25 Attach:busteralert.png%0a%0a!!! But what about Unicode?%0a%0aThis will work for standard ASCII strings, but utf-8 strings will be problematic, as it will give character out of range errors. So special encoding/decoding is needed that further deals with this, as explained on the [[btoa page -> https://developer.mozilla.org/en/DOM/window.btoa#Unicode_Strings]]. Taking that solution and reworking it for a PHP + Javascript application, we need to change the javascript protection to:%0a%0a(:source lang=php -getcode:)%0a$title_j = base64_encode(rawurlencode($value['title']));%0a(:sourceend:)%0a%0aand modify the @@insertlink@@ function to:%0a%0a(:source lang=javascript -getcode:)%0at = decodeURIComponent(window.atob(t));%0a(:sourceend:)%0a%0aIf we throw in some Unicode into the test data:%0a%0a(:source lang=php -getcode:)%0aarray('title' => 'Français ¶•ª', 'link' => 'article/special-chars.html'),%0a(:sourceend:)%0a%0aThen run the page again, the following is the result of our new piece of Unicode data:%0a%0a%25frame%25 Attach:utf8alert.png%0a%0awhich seems to work, finally. But this isn't the final answer, as it still leaves IE out. Writing one's own Base64 encode/decode functions that are Unicode-safe seems to be something available on the [[net -> http://www.webtoolkit.info/javascript-base64.html]] [[in -> http://ntt.cc/2008/01/19/base64-encoder-decoder-with-javascript.html]] [[various -> http://stackoverflow.com/questions/246801/how-can-you-encode-to-base64-using-javascript]]  [[places -> http://www.nczonline.net/blog/2009/12/08/computer-science-in-javascript-base64-encoding/]].%0a%0a!!Final Source Code%0a(:source lang=php linenum tabwidth=4:)%0a%3c?php%0aerror_reporting(-1);%0aini_set('display_errors',true);%0aini_set('display_startup_errors',true);%0a%0a$testdata =%0a  array(%0a	array('title' => "What's New", 'link' => 'article/whats-new.html'),%0a	array('title' => "Fred \"Buster\" Cox", 'link' => 'article/fred-buster-cox.html'),%0a	array('title' => 'Français ¶•ª', 'link' => 'article/special-chars.html'),%0a);%0a%0a?>%0a%3c!DOCTYPE html>%0a%3chtml>%0a%3chead>%0a%3cmeta http-equiv="Content-type" content="text/html; charset=utf-8">%0a  %3ctitle>test quoting%3c/title>%0a%3cscript type="text/javascript">%0afunction insertlink(l,t) {%0a  t = decodeURIComponent(window.atob(t));%0a  alert("Insert Link Function\n" + "Title: " + t + "\n" + "Link: " + l + "\n");%0a}%0a%3c/script>%0a%3cstyle type="text/css" media="screen">%0a  .linkSel {background-color: yellow} %0a%3c/style>  %0a  %3c/head>%0a%3cbody>%0a%3ch1>test quoting%3c/h1>%0a%0a%3cpre>%3c?php var_dump($testdata); ?>%3c/pre>%0a%0a%0a%3c?php %0a  echo "%3cul>\n";%0aforeach ($testdata as $key => $value) {%0a  $title_h = htmlentities($value['title'],ENT_QUOTES,"utf-8");%0a  if (empty($title_h)) {%0a    $title_h = $value['title']; // put it out as is?%0a  }%0a  $title_j = base64_encode(rawurlencode($value['title']));%0a  $link = $value['link'];%0a  echo "%3cli>%3cspan onclick=\"insertlink('$link','$title_j')\" class=\"linkSel\">$title_h%3c/span>%3c/li>\n";%0a}%0aecho "%3c/ul>\n";%0a?>%0a%0a%3c/body>%0a%3c/html>%0a(:sourceend:)%0a>>comment%3c%3c%0aSummary:Handling a sticky problem in Javascript %0aParent:(Technology.)JavaScript%0aCategories:[[!Articles]], [[!HowTos]]%0aTags: javascript, php, html, programming, issues, strings%0a(:tags-hide  javascript, php, html, programming, issues, strings:)%0a>>%3c%3c%0a%0a
time=1334714369
author:1334714369=ImportText
diff:1334714369:1332145365:=1d0%0a%3c [[#excerpt]]%0a3,5c2%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a---%0a> %0a240d236%0a%3c %0a
host:1334714369=127.0.0.1
author:1332145365=tamara
csum:1332145365=add section headings
diff:1332145365:1332144796:minor=5,6d4%0a%3c !! Looking at some tricky data%0a%3c %0a18,19d15%0a%3c !! What we want to have happen%0a%3c %0a45,46d40%0a%3c !! Protecting the strings for HTML%0a%3c %0a65,66d58%0a%3c !! Protecting the strings for Javascript%0a%3c %0a69,70d60%0a%3c !!! First try, addslashes%0a%3c %0a99,100d88%0a%3c !!! Second try: JSON%0a%3c %0a120,121d107%0a%3c !!! Third try, Base 64%0a%3c %0a151,152d136%0a%3c !!! But what about Unicode?%0a%3c %0a177,229d160%0a%3c !!Final Source Code%0a%3c (:source lang=php linenum tabwidth=4:)%0a%3c %3c?php%0a%3c error_reporting(-1);%0a%3c ini_set('display_errors',true);%0a%3c ini_set('display_startup_errors',true);%0a%3c %0a%3c $testdata =%0a%3c   array(%0a%3c 	array('title' => "What's New", 'link' => 'article/whats-new.html'),%0a%3c 	array('title' => "Fred \"Buster\" Cox", 'link' => 'article/fred-buster-cox.html'),%0a%3c 	array('title' => 'Français ¶•ª', 'link' => 'article/special-chars.html'),%0a%3c );%0a%3c %0a%3c ?>%0a%3c %3c!DOCTYPE html>%0a%3c %3chtml>%0a%3c %3chead>%0a%3c %3cmeta http-equiv="Content-type" content="text/html; charset=utf-8">%0a%3c   %3ctitle>test quoting%3c/title>%0a%3c %3cscript type="text/javascript">%0a%3c function insertlink(l,t) {%0a%3c   t = decodeURIComponent(window.atob(t));%0a%3c   alert("Insert Link Function\n" + "Title: " + t + "\n" + "Link: " + l + "\n");%0a%3c }%0a%3c %3c/script>%0a%3c %3cstyle type="text/css" media="screen">%0a%3c   .linkSel {background-color: yellow} %0a%3c %3c/style>  %0a%3c   %3c/head>%0a%3c %3cbody>%0a%3c %3ch1>test quoting%3c/h1>%0a%3c %0a%3c %3cpre>%3c?php var_dump($testdata); ?>%3c/pre>%0a%3c %0a%3c %0a%3c %3c?php %0a%3c   echo "%3cul>\n";%0a%3c foreach ($testdata as $key => $value) {%0a%3c   $title_h = htmlentities($value['title'],ENT_QUOTES,"utf-8");%0a%3c   if (empty($title_h)) {%0a%3c     $title_h = $value['title']; // put it out as is?%0a%3c   }%0a%3c   $title_j = base64_encode(rawurlencode($value['title']));%0a%3c   $link = $value['link'];%0a%3c   echo "%3cli>%3cspan onclick=\"insertlink('$link','$title_j')\" class=\"linkSel\">$title_h%3c/span>%3c/li>\n";%0a%3c }%0a%3c echo "%3c/ul>\n";%0a%3c ?>%0a%3c %0a%3c %3c/body>%0a%3c %3c/html>%0a%3c (:sourceend:)%0a
host:1332145365=71.63.211.0
author:1332144796=tamara
csum:1332144796=add php and html tags
diff:1332144796:1332144607:minor=165,166c165,166%0a%3c Tags: javascript, php, html, programming, issues, strings%0a%3c (:tags-hide  javascript, php, html, programming, issues, strings:)%0a---%0a> Tags: javascript, programming, issues, strings%0a> (:tags-hide  javascript, programming, issues, strings:)%0a
host:1332144796=71.63.211.0
author:1332144607=tamara
csum:1332144607=add frame wikistyle to last image
diff:1332144607:1332144563:minor=157c157%0a%3c %25frame%25 Attach:utf8alert.png%0a---%0a> Attach:utf8alert.png%0a
host:1332144607=71.63.211.0
author:1332144563=tamara
csum:1332144563=final version
diff:1332144563:1332144432:=110c110%0a%3c This turns out to be a bit problematic, as javascript has no native support for base64 encoding/decoding. There are numerous resources that show how to write your own, and it turns out in Gecko and Webkit browsers, there is [[a pair of window functions available -> https://developer.mozilla.org/en/DOM/window.atob]] (once again leaving IE out in the cold). We'll try the @@atob@@ function here, using PHP to base64 encode the title data before sending it down:%0a---%0a> This turns out to be a bit problematic, as javascript has no native support for base64 encoding/decoding. There are numerous resources that show how to write your own, and it turns out in Gecko and Webkit browsers, there is [[a pair of window functions available -> https://developer.mozilla.org/en/DOM/window.atob]] (once again leaving IE out in the cold). We'll try the @@btoa@@ function here, using PHP to base64 encode the title data before sending it down:%0a
host:1332144563=71.63.211.0
author:1332144432=tamara
diff:1332144432:1332143735:=140,159c140,143%0a%3c $title_j = base64_encode(rawurlencode($value['title']));%0a%3c (:sourceend:)%0a%3c %0a%3c and modify the @@insertlink@@ function to:%0a%3c %0a%3c (:source lang=javascript -getcode:)%0a%3c t = decodeURIComponent(window.atob(t));%0a%3c (:sourceend:)%0a%3c %0a%3c If we throw in some Unicode into the test data:%0a%3c %0a%3c (:source lang=php -getcode:)%0a%3c array('title' => 'Français ¶•ª', 'link' => 'article/special-chars.html'),%0a%3c (:sourceend:)%0a%3c %0a%3c Then run the page again, the following is the result of our new piece of Unicode data:%0a%3c %0a%3c Attach:utf8alert.png%0a%3c %0a%3c which seems to work, finally. But this isn't the final answer, as it still leaves IE out. Writing one's own Base64 encode/decode functions that are Unicode-safe seems to be something available on the [[net -> http://www.webtoolkit.info/javascript-base64.html]] [[in -> http://ntt.cc/2008/01/19/base64-encoder-decoder-with-javascript.html]] [[various -> http://stackoverflow.com/questions/246801/how-can-you-encode-to-base64-using-javascript]]  [[places -> http://www.nczonline.net/blog/2009/12/08/computer-science-in-javascript-base64-encoding/]].%0a---%0a> %0a> %0a> %0a> %0a
host:1332144432=71.63.211.0
author:1332143735=tamara
diff:1332143735:1332140521:=112,141c112,116%0a%3c (:source lang=php -getcode:)%0a%3c $title_j = base64_encode($value['title']);%0a%3c (:sourceend:)%0a%3c %0a%3c and add this line in the @@insertlink@@ function before the @@alert@@:%0a%3c %0a%3c (:source lang=javascript -getcode:)%0a%3c t = window.atob(t);%0a%3c (:sourceend:)%0a%3c %0a%3c Which produces:%0a%3c %0a%3c (:source lang=html4strict -getcode linenum tabwidth=4:)%0a%3c %3cul>%0a%3c %3cli>%3cspan onclick="insertlink('article/whats-new.html','V2hhdCdzIE5ldw==')" class="linkSel">What&#039;s New%3c/span>%3c/li>%0a%3c %3cli>%3cspan onclick="insertlink('article/fred-buster-cox.html','RnJlZCAiQnVzdGVyIiBDb3g=')" class="linkSel">Fred &quot;Buster&quot; Cox%3c/span>%3c/li>%0a%3c %3c/ul>%0a%3c (:sourceend:)%0a%3c %0a%3c Clicking on the two spans in the browser produces:%0a%3c %0a%3c %25frame%25 Attach:whatsnewalert.png%0a%3c %0a%3c %25frame%25 Attach:busteralert.png%0a%3c %0a%3c This will work for standard ASCII strings, but utf-8 strings will be problematic, as it will give character out of range errors. So special encoding/decoding is needed that further deals with this, as explained on the [[btoa page -> https://developer.mozilla.org/en/DOM/window.btoa#Unicode_Strings]]. Taking that solution and reworking it for a PHP + Javascript application, we need to change the javascript protection to:%0a%3c %0a%3c (:source lang=php -getcode:)%0a%3c %0a%3c %0a---%0a> %0a> %0a> %0a> %0a> %25frame%25Attach:alert-popup.png%0a
host:1332143735=71.63.211.0
author:1332140521=tamara
csum:1332140521=draft
diff:1332140521:1332140447:=
host:1332140521=71.63.211.0
author:1332140447=tamara
diff:1332140447:1332135793:=21,22c21,22%0a%3c   $title_h = htmlprotect($value['title']);%0a%3c   $title_j = jsprotect($value['title']);%0a---%0a>   $enc_title = htmlentities($value['title'],ENT_QUOTES,"utf-8");%0a>   $esc_title = addslashes($value['title']);%0a24c24%0a%3c   echo "%3cli>%3cspan onclick=\"insertlink('$link','$title_j')\" class=\"linkSel\">$title_h%3c/span>%3c/li>\n";%0a---%0a>   echo "%3cli>%3cspan onclick=\"insertlink('$link','$esc_title')\" class=\"linkSel\">$enc_title%3c/span>%3c/li>\n";%0a37,42c37,40%0a%3c The link and title from the test data will be passed through to the javascript function @@insertlink@@.%0a%3c %0a%3c So, what we need to do is provide some means of protecting the quotes we need in the title entries.%0a%3c %0a%3c For php, this is pretty straight-forward and a function is provided for us: [[htmlentities -> http://us2.php.net/manual/en/function.htmlentities.php]]%0a%3c %0a---%0a> So the link and title from the test data will be passed through to the javascript function @@insertlink@@.%0a> %0a> For the data to be considered safe for HTML, it must be passed through @@htmlentities@@, escaping the quotes:%0a> %0a44c42%0a%3c $title_h = htmlentities($value['title'],ENT_QUOTES,"utf-8");%0a---%0a> $enc_title = htmlentities($value['title'],ENT_QUOTES,"utf-8");%0a59,61c57,58%0a%3c Neither of these strings, however, will work if passed to the javascript function @@insertlink@@. So instead, we have to encode things differently, and in this case it is by no means obvious what to do. Some discussion on the php-general mailing list shows that context of the string is quite important. Here again, the relationship between PHP, HTML and Javascript is ''so'' important. %0a%3c %0a%3c My first thought was that using the PHP function [[ @@addslashes@@ -> http://us2.php.net/manual/en/function.addslashes.php]] would do the trick.%0a---%0a> Neither of these, however, will work if passed to the javascript function @@insertlink@@. So instead, we have to encode things differently, by escaping the quotes in the strings. Here, I'm using @@addslashes@@, a standard PHP string function.%0a> %0a69c66%0a%3c 'What\'s New'%0a---%0a> What\'s New%0a75c72%0a%3c 'Fred \"Buster\" Cox'%0a---%0a> Fred \"Buster\" Cox%0a87,114c84%0a%3c but this produces errors in the second case. So something else is required.%0a%3c %0a%3c My second thought was to use JSON encoding. As of PHP 5.3, the @@json_encode@@ function allows the use of specific encodings. For this application, since the title strings get wrapped by single quotes in the HTML output, we only want to encode the single quotes.%0a%3c %0a%3c (:source lang=javascript -getcode:)%0a%3c $title_j = json_encode($title,JSON_HEX_APOS);%0a%3c (:sourceend:)%0a%3c %0a%3c but this didn't work at all, since the value returned by @@json_encode@@ is also surrounded by quotes:%0a%3c %0a%3c (:source lang=html4strict -getcode:)%0a%3c %3cul>%0a%3c %3cli>%3cspan onclick="insertlink('article/whats-new.html','"What\u0027s New"') class="linkSel">What&#039;s New%3c/span>%3c/li>%0a%3c %3cli>%3cspan onclick="insertlink('article/fred-buster-cox.html','"Fred \"Buster\" Cox"') class="linkSel">Fred &quot;Buster&quot; Cox%3c/span>%3c/li>%0a%3c %3c/ul>%0a%3c (:sourceend:)%0a%3c %0a%3c which results in a Javascript error "Uncaught SyntaxError: Unexpected token ILLEGAL (repeated 2 times)".%0a%3c %0a%3c So, something ''else'' is needed.%0a%3c %0a%3c So I thought, "Base64"? %0a%3c %0a%3c This turns out to be a bit problematic, as javascript has no native support for base64 encoding/decoding. There are numerous resources that show how to write your own, and it turns out in Gecko and Webkit browsers, there is [[a pair of window functions available -> https://developer.mozilla.org/en/DOM/window.atob]] (once again leaving IE out in the cold). We'll try the @@btoa@@ function here, using PHP to base64 encode the title data before sending it down:%0a%3c %0a%3c %0a%3c %0a%3c %0a---%0a> and this works. When either span is clicked on, the @@insertlink@@ function runs and the alert pop-up display's correctly:%0a
host:1332140447=71.63.211.0
author:1332135793=tamara
diff:1332135793:1332134678:=5,6c5,6%0a%3c Consider the following test data:%0a%3c %0a---%0a> Consider the following:%0a> %0a9,11c9,11%0a%3c     array('title'=>"What's New",'link'=>'article/whats-new.html'),%0a%3c     array('title'=>'Fred "Buster" Cox','link'=>'article/fred-buster-cox.html'),%0a%3c );%0a---%0a>                   array('title'=>"What's New",'link'=>'article/whats-new.html'),%0a>                   array('title'=>'Fred "Buster" Cox','link'=>'article/fred-buster-cox.html'),%0a>                   );%0a14,89d13%0a%3c The first group's title contains a single quote, in this case acting as an apostrophe. The second group's title contains a pair of double quotes surrounding a nick name. These are handled differently in Javascript, PHP, and HTML, so all three must be considered when these are combined into one application.%0a%3c %0a%3c The above test data will be processed by PHP as follows:%0a%3c %0a%3c (:source lang=php -getcode linenum tabwidth=4:)%0a%3c echo "%3cul>\n";%0a%3c foreach ($testdata as $key => $value) {%0a%3c   $enc_title = htmlentities($value['title'],ENT_QUOTES,"utf-8");%0a%3c   $esc_title = addslashes($value['title']);%0a%3c   $link = $value['link'];%0a%3c   echo "%3cli>%3cspan onclick=\"insertlink('$link','$esc_title')\" class=\"linkSel\">$enc_title%3c/span>%3c/li>\n";%0a%3c }%0a%3c echo "%3c/ul>\n";%0a%3c (:sourceend:)%0a%3c %0a%3c And the following shows the @@insertlink@@ javascript function:%0a%3c %0a%3c (:source lang=javascript -getcode linenum tabwidth=4:)%0a%3c function insertlink(l,t) {%0a%3c   alert("Insert Link Function\n" + "title: " + t + "\n" + "link: " + l + "\n");%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c So the link and title from the test data will be passed through to the javascript function @@insertlink@@.%0a%3c %0a%3c For the data to be considered safe for HTML, it must be passed through @@htmlentities@@, escaping the quotes:%0a%3c %0a%3c (:source lang=php -getcode:)%0a%3c $enc_title = htmlentities($value['title'],ENT_QUOTES,"utf-8");%0a%3c (:sourceend:)%0a%3c %0a%3c For the first title element, it produces:%0a%3c %0a%3c (:source lang=html4strict -getcode:)%0a%3c What&#039;s New%0a%3c (:sourceend:)%0a%3c %0a%3c For the second title element, it produces:%0a%3c %0a%3c (:source lang=html4strict -getcode:)%0a%3c Fred &quot;Buster&quot; Cox%0a%3c (:sourceend:)%0a%3c %0a%3c Neither of these, however, will work if passed to the javascript function @@insertlink@@. So instead, we have to encode things differently, by escaping the quotes in the strings. Here, I'm using @@addslashes@@, a standard PHP string function.%0a%3c %0a%3c (:source lang=php -getcode:)%0a%3c $esc_title = addslashes($value['title']);%0a%3c (:sourceend:)%0a%3c %0a%3c This time, the first title element is:%0a%3c %0a%3c (:source lang=javascript -getcode:)%0a%3c What\'s New%0a%3c (:sourceend:)%0a%3c %0a%3c and the second title element is:%0a%3c %0a%3c (:source lang=javascript -getcode:)%0a%3c Fred \"Buster\" Cox%0a%3c (:sourceend:)%0a%3c %0a%3c Thus, what get's emitted by the php code fragment above looks like this:%0a%3c %0a%3c (:source lang=html4strict -getcode linenum tabwidth=4:)%0a%3c %3cul>%0a%3c %3cli>%3cspan onclick="insertlink('article/whats-new.html','What\'s New')" class="linkSel">What&#039;s New%3c/span>%3c/li>%0a%3c %3cli>%3cspan onclick="insertlink('article/fred-buster-cox.html','Fred \"Buster\" Cox')" class="linkSel">Fred &quot;Buster&quot; Cox%3c/span>%3c/li>%0a%3c %3c/ul>%0a%3c (:sourceend:)%0a%3c %0a%3c and this works. When either span is clicked on, the @@insertlink@@ function runs and the alert pop-up display's correctly:%0a%3c %0a%3c %25frame%25Attach:alert-popup.png%0a%3c %0a%3c %0a%3c %0a91,95c15,21%0a%3c Summary:Handling a sticky problem in Javascript %0a%3c Parent:(Technology.)JavaScript%0a%3c Categories:[[!Articles]], [[!HowTos]]%0a%3c Tags: javascript, programming, issues, strings%0a%3c (:tags-hide  javascript, programming, issues, strings:)%0a---%0a> Summary:a short description%0a> Crumbs:[[Main/]]%0a> Parent:Main(.HomePage)%0a> IncludeMe:[[Main.HomePage]]%0a> Categories:[[!Uncategorized]]%0a> Tags: templates%0a> (:tags-hide templates:)%0a
host:1332135793=71.63.211.0
author:1332134678=tamara
diff:1332134678:1332134671:=
host:1332134678=71.63.211.0
author:1332134671=tamara
diff:1332134671:1332134671:=1,22d0%0a%3c Javascript, like most other langages, has a variable type called @@string@@. Strings are typically delimited either by a single quote [@'@] or double quote [@"@]. If a single or double quote appears in a string, it must be somehow escaped so that Javascript handles it correctly.%0a%3c %0a%3c This can get tricky when mixing Javascript, HTML and PHP.%0a%3c %0a%3c Consider the following:%0a%3c %0a%3c (:source lang=php -getcode linenum tabwidth=4:)%0a%3c $testdata = array(%0a%3c                   array('title'=>"What's New",'link'=>'article/whats-new.html'),%0a%3c                   array('title'=>'Fred "Buster" Cox','link'=>'article/fred-buster-cox.html'),%0a%3c                   );%0a%3c (:sourceend:)%0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:a short description%0a%3c Crumbs:[[Main/]]%0a%3c Parent:Main(.HomePage)%0a%3c IncludeMe:[[Main.HomePage]]%0a%3c Categories:[[!Uncategorized]]%0a%3c Tags: templates%0a%3c (:tags-hide templates:)%0a%3c >>%3c%3c%0a
host:1332134671=71.63.211.0
