version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20100101 Firefox/16.0
author=tamara
charset=ISO-8859-1
csum=some additional info for updating the Gemfile
ctime=1353035087
host=71.63.215.130
name=Technology.RubyCreatingACommandLineAppGem
rev=2
targets=Technology.RubyCreatingACommandLineAppGem,Technology.Ruby,Technology.IncludeMe,Category.HowTos,Technology.RubyGems,Technology.RubyOnRails,Technology.RubyRSpec,Technology.RubyCucumber,Technology.Git
text=>>comment%3c%3c%0aSummary:Steps to create a ruby command line application as a gem%0aParent:(Technology.)Ruby%0aIncludeMe:[[(Technology.)Ruby]]%0aCategories:[[!HowTos]]%0aTags: ruby, gem, application, development%0a(:tags-hide ruby, gem, application, development :)%0a>>%3c%3c%0a[[#excerpt]]%0aAfter asking around and hunting up some information, I've come up with a set of steps that are helpful in setting up the development environment for a [[Ruby]] [[Gem -> RubyGems]] that is a single command line application.%0a[[#excerptend]]%0a%0a!! The Problem%0a%0aWhile automatically generating a [[Rails -> RubyOnRails]] application is really well documented, creating a single command line application as a Gem doesn't seem to be easy to find. I finally resorted to asking on the [[ruby-talk -> #]] mailing list, and got a couple of really fine answers. I'm going to use the [[GLI -> http://davetron5000.github.com/gli/]] method here, which is great for developing a command line app with mulitple subcommands (a la git).%0a%0a(An alternate method, @@bundle gem GEMNAME@@ is described [[here -> http://gembundler.com/rubygems.html]].)%0a%0a(At http://davetron5000.github.com/methadone/ , another method for generating a simpler sort of command line application is given as well. The steps below are similar.)%0a%0a!! The Steps%0a%0a!!! Install and prepare%0a%0a(:source lang=bash:)%0agem install gli # Install gli%0a%0agli init APP_NAME action1 action2 action3 ... # Initialize the development tree%0a%0apushd APP_NAME # make the development tree root current working directory%0a%0abundle exec bin/APP_NAME help # run the new app%0a%0arake test # test the new app%0a(:sourceend:)%0a%0a!!! Add [[rspec -> RubyRSpec]] to the project ([[cucumber -> RubyCucumber]] has already been added)%0a%0a(:source lang=bash:)%0arspec --init%0a(:sourceend:)%0a%0aIf necessary, update the @@Gemfile@@ by adding the following line:%0a%0a(:source lang=ruby:)%0agem 'rspec'%0a(:sourceend:)%0a%0aModify the @@Rakefile@@ to add the spec task:%0a%0a(:source lang=ruby:)%0arequire 'rspec/core/rake_task'%0aRSpec::Core::RakeTask.new('spec')%0a(:sourceend:)%0a%0aAdd spec tests to the rake default task, if desired.%0a%0a(:source lang=ruby:)%0atask :default => [:spec,:test,:features]%0a(:sourceend:)%0a%0a(Of course, you'll want to put this immediately under source code control, preferably via [[Git]].)%0a
time=1353045074
author:1353045074=tamara
csum:1353045074=some additional info for updating the Gemfile
diff:1353045074:1353035087:=15,20c15,20%0a%3c While automatically generating a [[Rails -> RubyOnRails]] application is really well documented, creating a single command line application as a Gem doesn't seem to be easy to find. I finally resorted to asking on the [[ruby-talk -> #]] mailing list, and got a couple of really fine answers. I'm going to use the [[GLI -> http://davetron5000.github.com/gli/]] method here, which is great for developing a command line app with mulitple subcommands (a la git).%0a%3c %0a%3c (An alternate method, @@bundle gem GEMNAME@@ is described [[here -> http://gembundler.com/rubygems.html]].)%0a%3c %0a%3c (At http://davetron5000.github.com/methadone/ , another method for generating a simpler sort of command line application is given as well. The steps below are similar.)%0a%3c %0a---%0a> While automatically generating a [[Rails -> RubyOnRails]] application is really well documented, creating a single command line application as a Gem doesn't seem to be easy to find. I finally resorted to asking on the [[ruby-talk -> #]] mailing list, and got a couple of really fine answers. I'm going to use the [[GLI -> http://davetron5000.github.com/gli/]] method here.%0a> %0a> (The alternate method, @@bundle gem GEMNAME@@ is described [[here -> http://gembundler.com/rubygems.html]].)%0a> %0a> (At http://davetron5000.github.com/methadone/ , another method for generating a simpler sort of command line application is given as well.)%0a> %0a32,34c32,34%0a%3c bundle exec bin/APP_NAME help # run the new app%0a%3c %0a%3c rake test # test the new app%0a---%0a> bundle exec bin/APP_NAME help%0a> %0a> rake test%0a41,46d40%0a%3c (:sourceend:)%0a%3c %0a%3c If necessary, update the @@Gemfile@@ by adding the following line:%0a%3c %0a%3c (:source lang=ruby:)%0a%3c gem 'rspec'%0a
host:1353045074=71.63.215.130
author:1353035087=tamara
csum:1353035087=new page
diff:1353035087:1353035087:=1,56d0%0a%3c >>comment%3c%3c%0a%3c Summary:Steps to create a ruby command line application as a gem%0a%3c Parent:(Technology.)Ruby%0a%3c IncludeMe:[[(Technology.)Ruby]]%0a%3c Categories:[[!HowTos]]%0a%3c Tags: ruby, gem, application, development%0a%3c (:tags-hide ruby, gem, application, development :)%0a%3c >>%3c%3c%0a%3c [[#excerpt]]%0a%3c After asking around and hunting up some information, I've come up with a set of steps that are helpful in setting up the development environment for a [[Ruby]] [[Gem -> RubyGems]] that is a single command line application.%0a%3c [[#excerptend]]%0a%3c %0a%3c !! The Problem%0a%3c %0a%3c While automatically generating a [[Rails -> RubyOnRails]] application is really well documented, creating a single command line application as a Gem doesn't seem to be easy to find. I finally resorted to asking on the [[ruby-talk -> #]] mailing list, and got a couple of really fine answers. I'm going to use the [[GLI -> http://davetron5000.github.com/gli/]] method here.%0a%3c %0a%3c (The alternate method, @@bundle gem GEMNAME@@ is described [[here -> http://gembundler.com/rubygems.html]].)%0a%3c %0a%3c (At http://davetron5000.github.com/methadone/ , another method for generating a simpler sort of command line application is given as well.)%0a%3c %0a%3c !! The Steps%0a%3c %0a%3c !!! Install and prepare%0a%3c %0a%3c (:source lang=bash:)%0a%3c gem install gli # Install gli%0a%3c %0a%3c gli init APP_NAME action1 action2 action3 ... # Initialize the development tree%0a%3c %0a%3c pushd APP_NAME # make the development tree root current working directory%0a%3c %0a%3c bundle exec bin/APP_NAME help%0a%3c %0a%3c rake test%0a%3c (:sourceend:)%0a%3c %0a%3c !!! Add [[rspec -> RubyRSpec]] to the project ([[cucumber -> RubyCucumber]] has already been added)%0a%3c %0a%3c (:source lang=bash:)%0a%3c rspec --init%0a%3c (:sourceend:)%0a%3c %0a%3c Modify the @@Rakefile@@ to add the spec task:%0a%3c %0a%3c (:source lang=ruby:)%0a%3c require 'rspec/core/rake_task'%0a%3c RSpec::Core::RakeTask.new('spec')%0a%3c (:sourceend:)%0a%3c %0a%3c Add spec tests to the rake default task, if desired.%0a%3c %0a%3c (:source lang=ruby:)%0a%3c task :default => [:spec,:test,:features]%0a%3c (:sourceend:)%0a%3c %0a%3c (Of course, you'll want to put this immediately under source code control, preferably via [[Git]].)%0a
host:1353035087=71.63.215.130
