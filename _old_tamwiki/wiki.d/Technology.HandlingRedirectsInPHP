version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4
author=tamara
charset=ISO-8859-1
csum=add category
ctime=1288637945
host=75.144.38.217
name=Technology.HandlingRedirectsInPHP
rev=5
targets=Technology.HandlingRedirectsInPHP,Technology.HowToSetUpForDebuggingInPHP
text=[[#excerpt]]%0aRedirects are when one script finishes up processing and then calls another. Typically this is handled via the HTTP header @@Location:@@. In PHP, headers can be set via the @@[[http://us.php.net/manual/en/function.header.php|header()]]@@ function:%0a%0a(:source lang=php linenum:)%0aheader("Location: index.php");%0a(:sourceend:)%0a[[#excerptend]]%0a%0a%0a>>important%3c%3c%0aHTTP headers must be emitted before any other output. Thus, if you're code sends error messages to the browser before it gets to the @@header("Location: ...");@@ call, that redirect will not work.%0a>>%3c%3c%0a%0a!!Perpetuating certain states with query string additions%0a%0aSometimes, it is preferrable to pass on query string options that the script uses to the redirect target script/URL. Frequently, I use this mechanism to turn on debugging (See HowToSetUpForDebuggingInPHP.) To do this, I use an associative array containing the query string parameters and values:%0a%0a(:source lang=php linenum:)%0a$additional_query_parms['debug'] = DEBUG;%0a(:sourceend:)%0a%0aThen, before emitting output or calling a redirect, add in any acculated error messages you man want to display to the user:%0a%0a(:source lang=php linenum:)%0a$additional_query_parms['errors'] = $errors;%0a(:sourceend:)%0a%0aAnd build your redirect. I have the following function to do that:%0a%0a(:source lang=php linenum tabwidth=4:)%0a/**%0a * Build a redirect path including messages, errors, and additional query data%0a *%0a * @return redirect url%0a * @author Tamara Temple %3ctamara@tamaratemple.com>%0a **/%0afunction buildredirect($u=NULL)%0a{%0a	global $errors, $messages, $additional_query_parms;%0a	%0a	$redirect = (isset($u) ? $u : DEFAULT_REDIRECT);%0a	$options = Array();%0a	if (isset($additional_query_parms) && !empty($additional_query_parms)) {%0a		$options = $additional_query_parms;%0a	}%0a	if (isset($messages) && !empty($messages)) {%0a		$options['messages'] = $messages;%0a	}%0a	if (isset($errors) && !empty($errors)) {%0a		$options['errors'] = $errors;%0a	}%0a	debug_var("\$options:",$options);%0a	if (!empty($options)) {%0a		$redirect .= "?" . http_build_query($options);%0a	}%0a	return $redirect;%0a	%0a}%0a(:sourceend:)%0a%0aIt makes use of the @@[[http://us.php.net/manual/en/function.http-build-query.php|http_build_query()]]@@ function, which does a nice job of handling necessary serializing and urlencoding.%0a%0aThe use of the array @@$additional_query_parms@@ is nice because you can accumulate the parameters throughout your script, and then in a single call build the query string and redirect url.%0a%0a!!Debugging and Redirects%0a%0a[[HowToSetUpForDebuggingInPHP|Elsewhere]] I've covered debugging in PHP. Just to reiterate a point made there, often times you don't want your redirect to happen because you will lose debugging information, or the redirect call won't go through because you've already output information to the browser. I have a little @@do_redirect()@@ function that handles this case:%0a%0a(:source lang=php linenum tabwidth=4:)%0a/**%0a * perform a redirect to the indicated url $u, applying other paramters as needed.%0a *%0a * @return none - will either redirect or exit%0a * @author Tamara Temple%0a **/%0afunction do_redirect($u=NULL)%0a{%0a	if (!isset($u)) $u = DEFAULT_REDIRECT;%0a	$u = buildredirect($u);%0a	debug("Redirect: \$u=$u");%0a	if (!DEBUG) header("Location: $u"); else exit("%3cp>%3ca href='$u'>Redirect to $u%3c/a>%3c/p>");%0a}%0a(:sourceend:)%0a%0aThis nicely handles the case where you may have emitted debugging information to the browser already (in which case, the @@header("Location:...")@@ function won't work) by offering up a link on exit that will in effect do the same thing as the redirect would have.%0a%0a(:Summary:how to handle the building and execution of redirects in PHP:)%0a(:Parent:(Technology.)PHP:)%0a(:IncludeMe:[[(Technology.)PHP]]:)%0a(:Categories:[[!Articles]], [[!HowTos]], [[!BestPractices]]:)%0a(:Tags: php, web development, debugging:)%0a(:tags-hide php, web development, debugging :)%0a
time=1352135950
author:1352135950=tamara
csum:1352135950=add category
diff:1352135950:1334714369:minor=90c90%0a%3c (:Categories:[[!Articles]], [[!HowTos]], [[!BestPractices]]:)%0a---%0a> (:Categories:[[!Articles]]:)%0a
host:1352135950=75.144.38.217
author:1334714369=ImportText
diff:1334714369:1289638487:=1c1,7%0a%3c [[#excerpt]]%0a---%0a> (:Summary:how to handle the building and execution of redirects in PHP:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a> '''Tags:''' (:tags php, source code, coding examples, best practices, debugging, web development:)%0a> %0a7,15c13,17%0a%3c [[#excerptend]]%0a%3c %0a%3c %0a%3c >>important%3c%3c%0a%3c HTTP headers must be emitted before any other output. Thus, if you're code sends error messages to the browser before it gets to the @@header("Location: ...");@@ call, that redirect will not work.%0a%3c >>%3c%3c%0a%3c %0a%3c !!Perpetuating certain states with query string additions%0a%3c %0a---%0a> %0a> '''''Note:''''' ''HTTP headers must be emitted before any other output. Thus, if you're code sends error messages to the browser before it gets to the @@header("Location: ...");@@ call, that redirect will not work.%0a> %0a> !!!Perpetuating certain states with query string additions%0a> %0a65,66c67,68%0a%3c !!Debugging and Redirects%0a%3c %0a---%0a> !!!Debugging and Redirects%0a> %0a87,92c89%0a%3c (:Summary:how to handle the building and execution of redirects in PHP:)%0a%3c (:Parent:(Technology.)PHP:)%0a%3c (:IncludeMe:[[(Technology.)PHP]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: php, web development, debugging:)%0a%3c (:tags-hide php, web development, debugging :)%0a---%0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1334714369=127.0.0.1
author:1289638487=tamara
csum:1289638487=remove -trim from source code
diff:1289638487:1288638198:minor=10c10%0a%3c (:source lang=php linenum:)%0a---%0a> (:source lang=php -trim linenum:)%0a20c20%0a%3c (:source lang=php linenum:)%0a---%0a> (:source lang=php -trim linenum:)%0a26c26%0a%3c (:source lang=php linenum:)%0a---%0a> (:source lang=php -trim linenum:)%0a32c32%0a%3c (:source lang=php linenum tabwidth=4:)%0a---%0a> (:source lang=php -trim linenum tabwidth=4:)%0a71c71%0a%3c (:source lang=php linenum tabwidth=4:)%0a---%0a> (:source lang=php -trim linenum tabwidth=4:)%0a
host:1289638487=71.63.211.0
author:1288638198=tamara
diff:1288638198:1288637945:=39c39%0a%3c function buildredirect($u=NULL)%0a---%0a> function buildredirect($u)%0a43c43%0a%3c 	$redirect = (isset($u) ? $u : DEFAULT_REDIRECT);%0a---%0a> 	$redirect = $u;%0a
host:1288638198=71.63.211.0
author:1288637945=tamara
diff:1288637945:1288637945:=1,89d0%0a%3c (:Summary:how to handle the building and execution of redirects in PHP:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c '''Tags:''' (:tags php, source code, coding examples, best practices, debugging, web development:)%0a%3c %0a%3c Redirects are when one script finishes up processing and then calls another. Typically this is handled via the HTTP header @@Location:@@. In PHP, headers can be set via the @@[[http://us.php.net/manual/en/function.header.php|header()]]@@ function:%0a%3c %0a%3c (:source lang=php -trim linenum:)%0a%3c header("Location: index.php");%0a%3c (:sourceend:)%0a%3c %0a%3c '''''Note:''''' ''HTTP headers must be emitted before any other output. Thus, if you're code sends error messages to the browser before it gets to the @@header("Location: ...");@@ call, that redirect will not work.%0a%3c %0a%3c !!!Perpetuating certain states with query string additions%0a%3c %0a%3c Sometimes, it is preferrable to pass on query string options that the script uses to the redirect target script/URL. Frequently, I use this mechanism to turn on debugging (See HowToSetUpForDebuggingInPHP.) To do this, I use an associative array containing the query string parameters and values:%0a%3c %0a%3c (:source lang=php -trim linenum:)%0a%3c $additional_query_parms['debug'] = DEBUG;%0a%3c (:sourceend:)%0a%3c %0a%3c Then, before emitting output or calling a redirect, add in any acculated error messages you man want to display to the user:%0a%3c %0a%3c (:source lang=php -trim linenum:)%0a%3c $additional_query_parms['errors'] = $errors;%0a%3c (:sourceend:)%0a%3c %0a%3c And build your redirect. I have the following function to do that:%0a%3c %0a%3c (:source lang=php -trim linenum tabwidth=4:)%0a%3c /**%0a%3c  * Build a redirect path including messages, errors, and additional query data%0a%3c  *%0a%3c  * @return redirect url%0a%3c  * @author Tamara Temple %3ctamara@tamaratemple.com>%0a%3c  **/%0a%3c function buildredirect($u)%0a%3c {%0a%3c 	global $errors, $messages, $additional_query_parms;%0a%3c 	%0a%3c 	$redirect = $u;%0a%3c 	$options = Array();%0a%3c 	if (isset($additional_query_parms) && !empty($additional_query_parms)) {%0a%3c 		$options = $additional_query_parms;%0a%3c 	}%0a%3c 	if (isset($messages) && !empty($messages)) {%0a%3c 		$options['messages'] = $messages;%0a%3c 	}%0a%3c 	if (isset($errors) && !empty($errors)) {%0a%3c 		$options['errors'] = $errors;%0a%3c 	}%0a%3c 	debug_var("\$options:",$options);%0a%3c 	if (!empty($options)) {%0a%3c 		$redirect .= "?" . http_build_query($options);%0a%3c 	}%0a%3c 	return $redirect;%0a%3c 	%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c It makes use of the @@[[http://us.php.net/manual/en/function.http-build-query.php|http_build_query()]]@@ function, which does a nice job of handling necessary serializing and urlencoding.%0a%3c %0a%3c The use of the array @@$additional_query_parms@@ is nice because you can accumulate the parameters throughout your script, and then in a single call build the query string and redirect url.%0a%3c %0a%3c !!!Debugging and Redirects%0a%3c %0a%3c [[HowToSetUpForDebuggingInPHP|Elsewhere]] I've covered debugging in PHP. Just to reiterate a point made there, often times you don't want your redirect to happen because you will lose debugging information, or the redirect call won't go through because you've already output information to the browser. I have a little @@do_redirect()@@ function that handles this case:%0a%3c %0a%3c (:source lang=php -trim linenum tabwidth=4:)%0a%3c /**%0a%3c  * perform a redirect to the indicated url $u, applying other paramters as needed.%0a%3c  *%0a%3c  * @return none - will either redirect or exit%0a%3c  * @author Tamara Temple%0a%3c  **/%0a%3c function do_redirect($u=NULL)%0a%3c {%0a%3c 	if (!isset($u)) $u = DEFAULT_REDIRECT;%0a%3c 	$u = buildredirect($u);%0a%3c 	debug("Redirect: \$u=$u");%0a%3c 	if (!DEBUG) header("Location: $u"); else exit("%3cp>%3ca href='$u'>Redirect to $u%3c/a>%3c/p>");%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c This nicely handles the case where you may have emitted debugging information to the browser already (in which case, the @@header("Location:...")@@ function won't work) by offering up a link on exit that will in effect do the same thing as the redirect would have.%0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288637945=71.63.211.0
