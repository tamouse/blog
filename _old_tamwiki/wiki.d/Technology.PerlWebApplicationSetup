version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20100101 Firefox/16.0
author=tamara
charset=ISO-8859-1
csum=Page moved to Technology.PerlWebApplicationSetup from Technology.PerlWebApplicaitonSetup
ctime=1351775014
host=71.63.215.130
name=Technology.PerlWebApplicationSetup
rev=4
targets=Technology.PerlWebApplicationSetup,Technology.Perl,Technology.IncludeMe,Category.HowTos,Technology.PHP,Technology.CGI
text=>>comment%3c%3c%0aSummary:How to set up a perl web application under Debian-based distros%0aParent:(Technology.)Perl%0aIncludeMe:[[(Technology.)Perl]]%0aCategories:[[!HowTos]]%0aTags: perl, web application, web development, environments%0a(:tags-hide perl, web application, web development, environments :)%0a>>%3c%3c%0a%0a[[#excerpt]]%0aWhile setting up a [[PHP]] web application under Apache is fairly straight-forward and often requires little configuration, setting up a Perl web application is a little different.%0a[[#excerptend]]%0a%0aApache has long included the ability to run perl programs, utilizing @@mod_perl@@ and other extensions. This will look at setting up an application that uses the [[CGI]] interface to run perl programs explicitly not under the server process directly.%0a%0a!! Configuring Apache to run perl programs%0a%0aApache on Debian-based systems allows execution of cgi scripts within the special directory %3cDOCUMENTROOT>/cgi-bin, and %3cUSERDIR>/public_html/cgi-bin. These are great for one-off scripts or special tools, but is not really great for a perl-based web application.%0a%0aAssuming you want your web application to be self-contained under one directory structure, you can set up a special directory in it for perl scripts, assets, and other aspects of your application, here is one way of organizing the applicaiton:%0a%0a(:source:)%0a   APP_ROOT/%0a      scripts/  -- containing perl scripts to run the application%0a      static/   -- containing static elements of the application%0a      css/      -- style files%0a      js/       -- javascript files%0a      ...%0a(:sourceend:)%0a%0aThus, all the scripts to run the application are in the scripts folder, while all the other elements of the site in other subdirectories.%0a%0aFurther, let's say the main script of the site, which could be a dispatcher for other modules, routes, etc, in your applicaiton, is called @@routes.pl@@. Put this under the scripts/ subdirectory.%0a%0aAn entry in the apache configuration file could look like:%0a%0aMap the path [@http://%3cHOST>/myapp/@] to the directory where the app is located using the @@Alias@@ directive. Then, Set up the app directory to process clean web requests (such as [@http://%3cHOST>/myapp/@] or [@http://%3cHOST>/myapp/route/@]). Finally, set up the scripts directory to process perl scripts as cgi files.%0a%0a(:source lang=apache:)%0a    Alias /myapp/ "/home/tamara/myapp/"%0a%0a    %3cDirectory "/home/tamara/myapp/">%0a        RewriteEngine On%0a	RewriteBase /myapp%0a	RewriteRule ^$           scripts/routes.pl  [L]%0a    	RewriteCond %25{REQUEST_FILENAME} !-f%0a    	RewriteCond %25{REQUEST_FILENAME} !-d%0a    	RewriteCond %25{REQUEST_FILENAME} !-l%0a    	RewriteRule ^(.*)$ scripts/routes.pl/$1  [QSA,L]%0a    %3c/Directory>%0a%0a    %3cDirectory "/home/tamara/myapp/scripts">%0a	Options FollowSymLinks ExecCGI%0a	AddHandler cgi-script .pl%0a	AllowOverride None%0a    %3c/Directory>%0a(:sourceend:)%0a%0a%0a%25right%25 ''[-(For more information on the rewrite rules processing, see [[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html | Apache mod_rewrite documentation]].)-]''%0a%0a
time=1351834473
author:1351834473=tamara
csum:1351834473=Page moved to Technology.PerlWebApplicationSetup from Technology.PerlWebApplicaitonSetup
diff:1351834473:1351834445:=
host:1351834473=71.63.215.130
author:1351834445=tamara
diff:1351834445:1351775534:=
host:1351834445=71.63.215.130
author:1351775534=tamara
diff:1351775534:1351775014:=0a1%0a> %0a22d22%0a%3c (:source:)%0a29,30c29%0a%3c (:sourceend:)%0a%3c %0a---%0a> %0a37,39c36,37%0a%3c Map the path [@http://%3cHOST>/myapp/@] to the directory where the app is located using the @@Alias@@ directive. Then, Set up the app directory to process clean web requests (such as [@http://%3cHOST>/myapp/@] or [@http://%3cHOST>/myapp/route/@]). Finally, set up the scripts directory to process perl scripts as cgi files.%0a%3c %0a%3c (:source lang=apache:)%0a---%0a> Map the path "http://%3cHOST>/myapp/" to the directory where the app is located:%0a> %0a42c40,49%0a%3c     %3cDirectory "/home/tamara/myapp/">%0a---%0a> Set up the app directory to process clean web requests (such as [@http://%3cHOST>/myapp/@] or [@http://%3cHOST>/myapp/route/@]:%0a> %0a>     %3cDirectory "/home/tamara/myapp/scripts">%0a> 	Options FollowSymLinks ExecCGI%0a> 	AddHandler cgi-script .pl%0a> 	AllowOverride None%0a> 	Order deny,allow%0a> 	Deny from all%0a> 	Allow from 127.0.0.0/255.0.0.0 ::1/128%0a> %0a51,58d57%0a%3c %0a%3c     %3cDirectory "/home/tamara/myapp/scripts">%0a%3c 	Options FollowSymLinks ExecCGI%0a%3c 	AddHandler cgi-script .pl%0a%3c 	AllowOverride None%0a%3c     %3c/Directory>%0a%3c (:sourceend:)%0a%3c %0a
host:1351775534=71.63.215.130
author:1351775014=tamara
diff:1351775014:1351775014:=1,60d0%0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:How to set up a perl web application under Debian-based distros%0a%3c Parent:(Technology.)Perl%0a%3c IncludeMe:[[(Technology.)Perl]]%0a%3c Categories:[[!HowTos]]%0a%3c Tags: perl, web application, web development, environments%0a%3c (:tags-hide perl, web application, web development, environments :)%0a%3c >>%3c%3c%0a%3c %0a%3c [[#excerpt]]%0a%3c While setting up a [[PHP]] web application under Apache is fairly straight-forward and often requires little configuration, setting up a Perl web application is a little different.%0a%3c [[#excerptend]]%0a%3c %0a%3c Apache has long included the ability to run perl programs, utilizing @@mod_perl@@ and other extensions. This will look at setting up an application that uses the [[CGI]] interface to run perl programs explicitly not under the server process directly.%0a%3c %0a%3c !! Configuring Apache to run perl programs%0a%3c %0a%3c Apache on Debian-based systems allows execution of cgi scripts within the special directory %3cDOCUMENTROOT>/cgi-bin, and %3cUSERDIR>/public_html/cgi-bin. These are great for one-off scripts or special tools, but is not really great for a perl-based web application.%0a%3c %0a%3c Assuming you want your web application to be self-contained under one directory structure, you can set up a special directory in it for perl scripts, assets, and other aspects of your application, here is one way of organizing the applicaiton:%0a%3c %0a%3c    APP_ROOT/%0a%3c       scripts/  -- containing perl scripts to run the application%0a%3c       static/   -- containing static elements of the application%0a%3c       css/      -- style files%0a%3c       js/       -- javascript files%0a%3c       ...%0a%3c %0a%3c Thus, all the scripts to run the application are in the scripts folder, while all the other elements of the site in other subdirectories.%0a%3c %0a%3c Further, let's say the main script of the site, which could be a dispatcher for other modules, routes, etc, in your applicaiton, is called @@routes.pl@@. Put this under the scripts/ subdirectory.%0a%3c %0a%3c An entry in the apache configuration file could look like:%0a%3c %0a%3c Map the path "http://%3cHOST>/myapp/" to the directory where the app is located:%0a%3c %0a%3c     Alias /myapp/ "/home/tamara/myapp/"%0a%3c %0a%3c Set up the app directory to process clean web requests (such as [@http://%3cHOST>/myapp/@] or [@http://%3cHOST>/myapp/route/@]:%0a%3c %0a%3c     %3cDirectory "/home/tamara/myapp/scripts">%0a%3c 	Options FollowSymLinks ExecCGI%0a%3c 	AddHandler cgi-script .pl%0a%3c 	AllowOverride None%0a%3c 	Order deny,allow%0a%3c 	Deny from all%0a%3c 	Allow from 127.0.0.0/255.0.0.0 ::1/128%0a%3c %0a%3c         RewriteEngine On%0a%3c 	RewriteBase /myapp%0a%3c 	RewriteRule ^$           scripts/routes.pl  [L]%0a%3c     	RewriteCond %25{REQUEST_FILENAME} !-f%0a%3c     	RewriteCond %25{REQUEST_FILENAME} !-d%0a%3c     	RewriteCond %25{REQUEST_FILENAME} !-l%0a%3c     	RewriteRule ^(.*)$ scripts/routes.pl/$1  [QSA,L]%0a%3c     %3c/Directory>%0a%3c %0a%3c %25right%25 ''[-(For more information on the rewrite rules processing, see [[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html | Apache mod_rewrite documentation]].)-]''%0a%3c %0a
host:1351775014=71.63.215.130
