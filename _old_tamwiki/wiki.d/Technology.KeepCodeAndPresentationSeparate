version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.162 Safari/535.19
author=ImportText
charset=ISO-8859-1
csum=add caveat about not using a template package
ctime=1288648680
host=127.0.0.1
name=Technology.KeepCodeAndPresentationSeparate
rev=4
targets=Technology.KeepCodeAndPresentationSeparate,Technology.GettingTheRootOfYourApplication
text=!!Introduction%0a%0a[[#excerpt]]%0aWhen I was first starting out writing web applications, back in the days of `ColdFusion, it was common practice to intermingle code and presentation. This made for some horrendous coding choices and made maintenance a nightmare. Yet all the examples given were of intermingled code and presentation. When PHP was new, it faired no better. PHP was originally designed to intermingle with HTML code, and many still do this.%0a[[#excerptend]]%0a%0aHere's an example:%0a%0a(:source lang=php linenum tabwidth=4:)%0a    %3cdiv id="div_duration">%0a      %3clabel for="duration">%3c?php echo get_vocab("duration");?>:%3c/label>%0a      %3cdiv class="group">%0a        %3cinput id="duration" name="duration" value="%3c?php echo $duration;?>">%0a        %3cselect id="dur_units" name="dur_units">%0a          %3c?php%0a          if( $enable_periods )%0a          {%0a            $units = array("periods", "days");%0a          }%0a          else%0a          {%0a            $units = array("minutes", "hours", "days", "weeks");%0a          }%0a%0a          while (list(,$unit) = each($units))%0a          {%0a            echo "        %3coption value=\"$unit\"";%0a            if ($dur_units == get_vocab($unit))%0a            {%0a              echo " selected=\"selected\"";%0a            }%0a            echo ">".get_vocab($unit)."%3c/option>\n";%0a          }%0a          ?>%0a        %3c/select>%0a        %3cdiv id="ad">%0a          %3cinput id="all_day" class="checkbox" name="all_day" type="checkbox" value="yes" onclick="OnAllDayClick(this)">%0a          %3clabel for="all_day">%3c?php echo get_vocab("all_day"); ?>%3c/label>%0a        %3c/div>%0a      %3c/div>%0a    %3c/div>%0a(:sourceend:)%0a%0aReally pretty ugly. Still, this was what PHP was meant to do. How to actually extract code from presentation? One good way is the use of templates. [[http://www.smarty.net|Smarty]] is one great templating system for PHP. With it, you keep all your controller, models, helpers, etc. separate from your views. The views are stored at templates, which are compiled into regular PHP code by the Smarty engine. (Under the hood, the Smarty compiled templates do intermingle presentation and PHP, but the point is it's divorced from the coder).%0a%0a!!Using Smarty%0a%0aSmart is a library that you can install on your sever pretty much anywhere, or you can include it in a directory in your application. There is little to set up to use Smarty, just a couple of directories in your application, and you're all set.%0a%0aIf you do install Smarty somewhere on your server out of the way of your application, make sure PHP can find it. You may need to add the path to the Smarty implementation to your php include path set in php.ini:%0a%0a(:source lang=php linenum:)%0ainclude_path=".:/usr/lib/php:/usr/lib/php/includes:/usr/lib/php/Smarty"%0a(:sourceend:)%0a%0a(Note the include_path begins with "." which means it will search the current working directory first for any included/required files.)%0a%0aThen, in your PHP code (preferably in a config.inc file), you set up the Smarty engine:%0a%0a(:source lang=php linenum:)%0arequire_once('Smarty.class.php');%0a%0a/**%0a * Set up Smarty%0a */%0a$smarty = new Smarty();%0a$smarty->template_dir = APP_ROOT . 'templates/';%0a$smarty->compile_dir = APP_ROOT . 'templates_c/';%0a//debug_var("\$smarty=",$smarty);%0a(:sourceend:)%0a%0a[-(''Note: For the APP_ROOT constant, see GettingTheRootOfYourApplication'')-]%0a%0aTo make Smarty emit the proper HTML codes, you first assign data for the template:%0a%0a(:source lang=php linenum:)%0a$smarty->assign('title',"This could be the title of the page");%0a$smarty->assign('rows',$rows);%0aif (!empty($messages)) $smarty->assign('messages',$messages);%0aif (!empty($errors)) $smarty->assign('errors',$errors);%0aif (!empty($additional_query_parms)) {%0a    $smarty->assign('additional_query_string,http_build_query($additional_query_parms));%0a    $smarty->assign('additional_query_parms',$additional_query_parms);%0a}%0a(:sourceend:)%0a%0aThen you tell Smarty to display the template:%0a%0a(:source lang=php linenum:)%0a$smarty->display('templatename.tpl");%0a(:sourceend:)%0a%0a!!Smarty Templates%0a%0aSmarty templates have specially designed markup that enables them to process the input and produce the proper display. Standard Smart delimiters are "{" and "}" but these can be changed. One person I know uses "%3c!--{" and "}-->" as delimiters, presumably so the temp;ates can be validated directly.%0a%0aA sample tempate looks like this:%0a%0a(:source lang=php linenum:)%0a{* index file for application *}%0a{include file="header.tpl"}%0a{include file="nav.tpl"}%0a%0a%3cdiv id="content">%0a	{include file="messages.tpl"}%0a	{include file="errors.tpl"}%0a	{if $num_comics > 0}%0a	%3cul>{foreach from=$comics item=comic}%0a		%3cli class="comicentry">%0a			%3cspan class="comictitle">{$comic.name}%3c/span>%0a			%3cspan class="comicdate">{$comic.comicdate}%3c/span>%0a			%3cbr />%0a			%3ca href="{$comic.uri}">%3cimg src="{$smarty.const.APP_URI_BASE}{$comic.filespec}" alt="{$comic.name} {$comic.comicdate}"  /> %3c/a>%0a			%3cbr />%0a			%3ca href="showcomics.php?sid={$comic.subscription_id}{if !empty($additional_query_string)}&{$additional_query_string}{/if}">Show all comics for this subscription%3c/a>%0a		%3c/li>%0a	{/foreach}%3c/ul>%0a	{else}%0a	%3ch3>No comics to display.%3c/h3>%0a	{/if}%0a%3c/div>%0a%0a{include file="footer.tpl"}%0a(:sourceend:)%0a%0aYou can see several ideas in there. First of all, notice the use of include files to set up a standard look and feel and navigation around the page.%0a%0a* header.tpl -- provides a place to put the html head preamble, set javascript libraries, stylesheets, etc.%0a* nav.tpl -- provides a means for producing standard navigation on the web page%0a* footer.tpl -- a common footer to end the page. This could include site policy links, copyright info, etc.%0a* messages.tpl and errors.tpl -- provide a standard mechanism for displaying messages and errors from the application to the client.%0a* centered in it all is a content div where you can produce your structured output%0a%0a!!Other things to notice.%0a%0aSmarty has control structures in it, so you can do things like loop over an array of values (say, perhaps database records). It also provides if-then-else constructs. There are a few other constructs that make it possible to display just about anything with Smarty, yet Smarty isn't a complicated syntax. Underneath, of course, is PHP, and you can expose Smarty to raw PHP if you desire (but hold onto that thought because you don't want to introduce code back into presentation).%0a%0a!!Not using a predefined package%0a%0aIn spite of all that said above about Smarty, PHP itself is actually a templating language. You ''can'' accomplish pretty much the same thing in straight PHP and HTML as you can in Smarty, without the overhead of a package. You can keep regular PHP files in a templates or views directory, and include subparts of the template as easily as you can in Smarty. An advantage to rolling your own templates is that you keep total control of the package and don't depend on anyone else's development for your work. Keeping your business logic and data base access separate is still important, and can be done quite handily without resorting to a special template framework.%0a%0a%0a%0a(:Summary:mixing code and presentation makes for a lot of bad code and makes it hard to maintain:)%0a(:Parent:(Technology.)Design:)%0a(:IncludeMe:[[(Technology.)Design]]:)%0a(:Categories:[[!Articles]]:)%0a(:Tags: web design:)%0a(:tags-hide web design :)%0a
time=1334714369
author:1334714369=ImportText
diff:1334714369:1289638057:=1,8c1,9%0a%3c !!Introduction%0a%3c %0a%3c [[#excerpt]]%0a%3c When I was first starting out writing web applications, back in the days of `ColdFusion, it was common practice to intermingle code and presentation. This made for some horrendous coding choices and made maintenance a nightmare. Yet all the examples given were of intermingled code and presentation. When PHP was new, it faired no better. PHP was originally designed to intermingle with HTML code, and many still do this.%0a%3c [[#excerptend]]%0a%3c %0a%3c Here's an example:%0a%3c %0a---%0a> (:Summary:mixing code and presentation makes for a lot of bad code and makes it hard to maintain:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a> '''Tags:''' (:tags php, coding examples, source code, best practices, Smarty, web development:)%0a> %0a> When I was first starting out writing web applications, back in the days of `ColdFusion, it was common practice to intermingle code and presentation. This made for some horrendous coding choices and made maintenance a nightmare. Yet all the examples given were of intermingled code and presentation. When PHP was new, it faired no better. PHP was originally designed to intermingle with HTML code, and many still do this. Here's an example:%0a> %0a46,47c47,48%0a%3c !!Using Smarty%0a%3c %0a---%0a> !!!Using Smarty%0a> %0a93,94c94,95%0a%3c !!Smarty Templates%0a%3c %0a---%0a> !!!Smarty Templates%0a> %0a134,135c135,136%0a%3c !!Other things to notice.%0a%3c %0a---%0a> !!!Other things to notice.%0a> %0a138,149c139,145%0a%3c !!Not using a predefined package%0a%3c %0a%3c In spite of all that said above about Smarty, PHP itself is actually a templating language. You ''can'' accomplish pretty much the same thing in straight PHP and HTML as you can in Smarty, without the overhead of a package. You can keep regular PHP files in a templates or views directory, and include subparts of the template as easily as you can in Smarty. An advantage to rolling your own templates is that you keep total control of the package and don't depend on anyone else's development for your work. Keeping your business logic and data base access separate is still important, and can be done quite handily without resorting to a special template framework.%0a%3c %0a%3c %0a%3c %0a%3c (:Summary:mixing code and presentation makes for a lot of bad code and makes it hard to maintain:)%0a%3c (:Parent:(Technology.)Design:)%0a%3c (:IncludeMe:[[(Technology.)Design]]:)%0a%3c (:Categories:[[!Articles]]:)%0a%3c (:Tags: web design:)%0a%3c (:tags-hide web design :)%0a---%0a> !Not using a predefined package%0a> %0a> In spite of all that said above about Smarty, PHP itself is actually a templating language. You ''can'' accomplish pretty much the same thing in straight PHP and HTML as you can in Smarty, without the overhead of a package. You can keep regular PHP files in a templates/ directory, and include subparts of the template as easily as you can in Smarty. An advantage to rolling your own templates is that you keep total control of the package and don't depend on anyone else's development for your work. Keeping your business logic and data base access separate is still important, and can be done quite handily without resorting to a special template framework.%0a> %0a> %0a> %0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1334714369=127.0.0.1
author:1289638057=tamara
csum:1289638057=add caveat about not using a template package
diff:1289638057:1288811174:=138,141d137%0a%3c %0a%3c !Not using a predefined package%0a%3c %0a%3c In spite of all that said above about Smarty, PHP itself is actually a templating language. You ''can'' accomplish pretty much the same thing in straight PHP and HTML as you can in Smarty, without the overhead of a package. You can keep regular PHP files in a templates/ directory, and include subparts of the template as easily as you can in Smarty. An advantage to rolling your own templates is that you keep total control of the package and don't depend on anyone else's development for your work. Keeping your business logic and data base access separate is still important, and can be done quite handily without resorting to a special template framework.%0a
host:1289638057=71.63.211.0
author:1288811174=tamara
csum:1288811174=add note to link to GettingTheRootOfYourApplication
diff:1288811174:1288648680:minor=72,73d71%0a%3c %0a%3c [-(''Note: For the APP_ROOT constant, see GettingTheRootOfYourApplication'')-]%0a
host:1288811174=71.63.211.0
author:1288648680=tamara
diff:1288648680:1288648680:=1,139d0%0a%3c (:Summary:mixing code and presentation makes for a lot of bad code and makes it hard to maintain:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c '''Tags:''' (:tags php, coding examples, source code, best practices, Smarty, web development:)%0a%3c %0a%3c When I was first starting out writing web applications, back in the days of `ColdFusion, it was common practice to intermingle code and presentation. This made for some horrendous coding choices and made maintenance a nightmare. Yet all the examples given were of intermingled code and presentation. When PHP was new, it faired no better. PHP was originally designed to intermingle with HTML code, and many still do this. Here's an example:%0a%3c %0a%3c (:source lang=php linenum tabwidth=4:)%0a%3c     %3cdiv id="div_duration">%0a%3c       %3clabel for="duration">%3c?php echo get_vocab("duration");?>:%3c/label>%0a%3c       %3cdiv class="group">%0a%3c         %3cinput id="duration" name="duration" value="%3c?php echo $duration;?>">%0a%3c         %3cselect id="dur_units" name="dur_units">%0a%3c           %3c?php%0a%3c           if( $enable_periods )%0a%3c           {%0a%3c             $units = array("periods", "days");%0a%3c           }%0a%3c           else%0a%3c           {%0a%3c             $units = array("minutes", "hours", "days", "weeks");%0a%3c           }%0a%3c %0a%3c           while (list(,$unit) = each($units))%0a%3c           {%0a%3c             echo "        %3coption value=\"$unit\"";%0a%3c             if ($dur_units == get_vocab($unit))%0a%3c             {%0a%3c               echo " selected=\"selected\"";%0a%3c             }%0a%3c             echo ">".get_vocab($unit)."%3c/option>\n";%0a%3c           }%0a%3c           ?>%0a%3c         %3c/select>%0a%3c         %3cdiv id="ad">%0a%3c           %3cinput id="all_day" class="checkbox" name="all_day" type="checkbox" value="yes" onclick="OnAllDayClick(this)">%0a%3c           %3clabel for="all_day">%3c?php echo get_vocab("all_day"); ?>%3c/label>%0a%3c         %3c/div>%0a%3c       %3c/div>%0a%3c     %3c/div>%0a%3c (:sourceend:)%0a%3c %0a%3c Really pretty ugly. Still, this was what PHP was meant to do. How to actually extract code from presentation? One good way is the use of templates. [[http://www.smarty.net|Smarty]] is one great templating system for PHP. With it, you keep all your controller, models, helpers, etc. separate from your views. The views are stored at templates, which are compiled into regular PHP code by the Smarty engine. (Under the hood, the Smarty compiled templates do intermingle presentation and PHP, but the point is it's divorced from the coder).%0a%3c %0a%3c !!!Using Smarty%0a%3c %0a%3c Smart is a library that you can install on your sever pretty much anywhere, or you can include it in a directory in your application. There is little to set up to use Smarty, just a couple of directories in your application, and you're all set.%0a%3c %0a%3c If you do install Smarty somewhere on your server out of the way of your application, make sure PHP can find it. You may need to add the path to the Smarty implementation to your php include path set in php.ini:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c include_path=".:/usr/lib/php:/usr/lib/php/includes:/usr/lib/php/Smarty"%0a%3c (:sourceend:)%0a%3c %0a%3c (Note the include_path begins with "." which means it will search the current working directory first for any included/required files.)%0a%3c %0a%3c Then, in your PHP code (preferably in a config.inc file), you set up the Smarty engine:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c require_once('Smarty.class.php');%0a%3c %0a%3c /**%0a%3c  * Set up Smarty%0a%3c  */%0a%3c $smarty = new Smarty();%0a%3c $smarty->template_dir = APP_ROOT . 'templates/';%0a%3c $smarty->compile_dir = APP_ROOT . 'templates_c/';%0a%3c //debug_var("\$smarty=",$smarty);%0a%3c (:sourceend:)%0a%3c %0a%3c To make Smarty emit the proper HTML codes, you first assign data for the template:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $smarty->assign('title',"This could be the title of the page");%0a%3c $smarty->assign('rows',$rows);%0a%3c if (!empty($messages)) $smarty->assign('messages',$messages);%0a%3c if (!empty($errors)) $smarty->assign('errors',$errors);%0a%3c if (!empty($additional_query_parms)) {%0a%3c     $smarty->assign('additional_query_string,http_build_query($additional_query_parms));%0a%3c     $smarty->assign('additional_query_parms',$additional_query_parms);%0a%3c }%0a%3c (:sourceend:)%0a%3c %0a%3c Then you tell Smarty to display the template:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c $smarty->display('templatename.tpl");%0a%3c (:sourceend:)%0a%3c %0a%3c !!!Smarty Templates%0a%3c %0a%3c Smarty templates have specially designed markup that enables them to process the input and produce the proper display. Standard Smart delimiters are "{" and "}" but these can be changed. One person I know uses "%3c!--{" and "}-->" as delimiters, presumably so the temp;ates can be validated directly.%0a%3c %0a%3c A sample tempate looks like this:%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c {* index file for application *}%0a%3c {include file="header.tpl"}%0a%3c {include file="nav.tpl"}%0a%3c %0a%3c %3cdiv id="content">%0a%3c 	{include file="messages.tpl"}%0a%3c 	{include file="errors.tpl"}%0a%3c 	{if $num_comics > 0}%0a%3c 	%3cul>{foreach from=$comics item=comic}%0a%3c 		%3cli class="comicentry">%0a%3c 			%3cspan class="comictitle">{$comic.name}%3c/span>%0a%3c 			%3cspan class="comicdate">{$comic.comicdate}%3c/span>%0a%3c 			%3cbr />%0a%3c 			%3ca href="{$comic.uri}">%3cimg src="{$smarty.const.APP_URI_BASE}{$comic.filespec}" alt="{$comic.name} {$comic.comicdate}"  /> %3c/a>%0a%3c 			%3cbr />%0a%3c 			%3ca href="showcomics.php?sid={$comic.subscription_id}{if !empty($additional_query_string)}&{$additional_query_string}{/if}">Show all comics for this subscription%3c/a>%0a%3c 		%3c/li>%0a%3c 	{/foreach}%3c/ul>%0a%3c 	{else}%0a%3c 	%3ch3>No comics to display.%3c/h3>%0a%3c 	{/if}%0a%3c %3c/div>%0a%3c %0a%3c {include file="footer.tpl"}%0a%3c (:sourceend:)%0a%3c %0a%3c You can see several ideas in there. First of all, notice the use of include files to set up a standard look and feel and navigation around the page.%0a%3c %0a%3c * header.tpl -- provides a place to put the html head preamble, set javascript libraries, stylesheets, etc.%0a%3c * nav.tpl -- provides a means for producing standard navigation on the web page%0a%3c * footer.tpl -- a common footer to end the page. This could include site policy links, copyright info, etc.%0a%3c * messages.tpl and errors.tpl -- provide a standard mechanism for displaying messages and errors from the application to the client.%0a%3c * centered in it all is a content div where you can produce your structured output%0a%3c %0a%3c !!!Other things to notice.%0a%3c %0a%3c Smarty has control structures in it, so you can do things like loop over an array of values (say, perhaps database records). It also provides if-then-else constructs. There are a few other constructs that make it possible to display just about anything with Smarty, yet Smarty isn't a complicated syntax. Underneath, of course, is PHP, and you can expose Smarty to raw PHP if you desire (but hold onto that thought because you don't want to introduce code back into presentation).%0a%3c %0a%3c %0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288648680=71.63.211.0
