version=pmwiki-2.2.36 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11
author=tamara
charset=ISO-8859-1
csum=move page from main
ctime=1288812676
host=71.63.211.0
name=Technology.GettingTheRootOfYourApplication
rev=5
targets=Technology.GettingTheRootOfYourApplication,Technology.PHPMagicConstants,Technology.SingleApplicationEntryPoint,Technology.PHP,Technology.IncludeMe,Category.Article,Category.HowTos
text=[[#excerpt]]%0aSometimes, you need to know the application root of your PHP application. There are a few ways to do that. I'll outline the simplest first.%0a[[#excerptend]]%0a%0a!!Setting the APP_ROOT constant from the file name%0a%0a!!!Method One: Using dirname(__FILE__)%0a%0aIf you set the application root from a file in the root directory, or a known depth from the root, you can simply use the dirname() function with the [[PHPMagicConstants|PHP Magic Constant]] __FILE__:%0a%0a(:source lang=php:)%0adefine('APP_ROOT', dirname(__FILE__).DIRECTORY_SEPARATOR);%0a(:sourcend:)%0a%0aFor files below the application's root, simply stack on another dirname (or as many as are needed):%0a%0a(:source lang=php:)%0adefine('APP_ROOT',dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR);%0a(:sourceend:)%0a%0aThis has major advantages of being portable and usable in both the server and cli environments.%0a%0aOne disadvantage is that you have to ''a priori'' know the hierarchy of the application already. If you are using the SingleApplicationEntryPoint structure, this is very easy as you can set it in the main file.%0a%0a!!!Method Two: Using a named path and examining the file paths returned by $_SERVER['SCRIPT_FILENAME']%0a%0aThis is a decidedly harder way to do this, but it does work. It requires knowledge of the base directory of your application, which could change from installation to installation, thus making a less easily portable function.%0a%0a(:source lang=php linenum:)%0a%3c?php%0a%0adefine('APPBASE','myapp');%0a%0afunction get_app_root()%0a{%0a	/**%0a	 * Get the Application Root directory path. Used for finding files and directories on the server's file system%0a	 */%0a	$script_path_arr = split('/', dirname($_SERVER['SCRIPT_FILENAME'])); /* get the elements of the path to the current script */%0a	$app_path_arr = Array();%0a	foreach ($script_path_arr as $script_path_element) {%0a		$app_path_arr[] = $script_path_element;%0a		if ($script_path_element == APPBASE) break; /* stop processing when we get to the application base dir */%0a	}%0a	return (!empty($app_path_arr) ? DIRECTORY_SEPARATOR .  join(DIRECTORY_SEPARATOR,$app_path_arr) . DIRECTORY_SEPARATOR : NULL); /* path to application root */%0a}%0a%0adefine('APP_ROOT', get_app_root());%0a?>%0a(:sourceend:)%0a%0a%0a!!Getting the URI base path to the application%0a%0aSimilarly to the file system application root, often times you want the path to the application's root as called by the client's browser. In this case, you could something similar to both the methods above:%0a%0a!!!Method One%0a%0aGather up the path name from $_SERVER['SCRIPT_NAME']%0a(:source lang=php:)%0adefine('APP_URI_BASE',isset($_SERVER['SCRIPT_NAME'] )? dirname($_SERVER['SCRIPT_NAME']).DIRECTORY_SEPARATOR : NULL;%0a(:sourceend:)%0a%0a[-''(Note: $_SERVER['SCRIPT_NAME'] will '''only''' be set when called from a server context.)''-]%0a%0aNote that this has both the same advantages and disadvantages of getting the application's root file system directory.%0a%0a!!!Method Two%0a%0aNote: APPBASE is defined as above.%0a%0a(:source lang=php linenum:)%0a%3c?php%0afunction get_uri_base()%0a{%0a	if (!isset($_SERVER['SCRIPT_NAME'])) return NULL; // if no script name, this can't be called as a URI%0a	%0a	/**%0a	 * Get the Application URI path. Used for creating URI's for elements in the application that are called through the web server%0a	 */%0a	$script_uri_path_arr = split(DIRECTORY_SEPARATOR, dirname($_SERVER['SCRIPT_NAME'])); /* get the elements of the URI path to the current script */%0a	//debug_var("\$script_uri_path_arr",$script_uri_path_arr);%0a	foreach ($script_uri_path_arr as $script_uri_path_element) {%0a		$app_uri_base_arr[] = $script_uri_path_element;%0a		if ($script_uri_path_element == APPBASE) break; /* stop processing when we get to the application base dir */%0a	}%0a	return (!empty($script_uri_path_arr) ? DIRECTORY_SEPARATOR . join(DIRECTORY_SEPARATOR,$script_uri_path_arr) : NULL);%0a}%0a%0adefine('APP_URI_BASE',get_uri_base());%0a?>%0a(:sourcend:)%0a%0a>>comment%3c%3c%0aKeep metadata at end of page%0a%0aSummary:In an application, it's often necessary to know where the root of the application is%0aParent:(Technology.)PHP%0aIncludeMe:[[Technology.PHP]]%0aCategories:[[!Article]],[[!HowTos]]%0aTags: php, how to, web development%0a(:tags-hide php, how to, web development :)%0a>>%3c%3c%0a%0a%0a%0a
time=1332312374
author:1332312374=tamara
csum:1332312374=move page from main
diff:1332312374:1332311910:=1c1,5%0a%3c [[#excerpt]]%0a---%0a> (:Summary:In an application, it's often necessary to know where the root of the appliation exists:)%0a> [[%3c%3c]]%0a> %3c%3c|SoftwareAndWebProgramming|>>\\%0a> %3c%3c|[[PHP]]|>>%0a> %0a3,6c7,9%0a%3c [[#excerptend]]%0a%3c %0a%3c !!Setting the APP_ROOT constant from the file name%0a%3c %0a---%0a> %0a> !!Setting the APP_ROOT constant from a config file%0a> %0a9,10c12,13%0a%3c If you set the application root from a file in the root directory, or a known depth from the root, you can simply use the dirname() function with the [[PHPMagicConstants|PHP Magic Constant]] __FILE__:%0a%3c %0a---%0a> If your config file is in your application root, or a known depth from the root, you can simply use the dirname() function with the [[PHPMagicConstants|PHP Magic Constant]] __FILE__:%0a> %0a15,16c18%0a%3c For files below the application's root, simply stack on another dirname (or as many as are needed):%0a%3c %0a---%0a> If your config file is one layer below the application's root, simply stack on another dirname:%0a23,24d24%0a%3c One disadvantage is that you have to ''a priori'' know the hierarchy of the application already. If you are using the SingleApplicationEntryPoint structure, this is very easy as you can set it in the main file.%0a%3c %0a66,67d65%0a%3c Note that this has both the same advantages and disadvantages of getting the application's root file system directory.%0a%3c %0a94,106c92,93%0a%3c >>comment%3c%3c%0a%3c Keep metadata at end of page%0a%3c %0a%3c Summary:In an application, it's often necessary to know where the root of the application is%0a%3c Parent:(Technology.)PHP%0a%3c IncludeMe:[[Technology.PHP]]%0a%3c Categories:[[!Article]],[[!HowTos]]%0a%3c Tags: php, how to, web development%0a%3c (:tags-hide php, how to, web development :)%0a%3c >>%3c%3c%0a%3c %0a%3c %0a%3c %0a---%0a> %0a> %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1332312374=71.63.211.0
author:1332311910=tamara
csum:1332311910=Page moved to Technology.GettingTheRootOfYourApplication from Main.GettingTheRootOfYourApplication
diff:1332311910:1289639608:=
host:1332311910=71.63.211.0
author:1289639608=tamara
csum:1289639608=add DIRECTORY_SEPARATOR to APP_ROOT defines
diff:1289639608:1288812835:minor=15c15%0a%3c define('APP_ROOT', dirname(__FILE__).DIRECTORY_SEPARATOR);%0a---%0a> define('APP_ROOT', dirname(__FILE__));%0a20c20%0a%3c define('APP_ROOT',dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR);%0a---%0a> define('APP_ROOT',dirname(dirname(__FILE__)));%0a61c61%0a%3c define('APP_URI_BASE',isset($_SERVER['SCRIPT_NAME'] )? dirname($_SERVER['SCRIPT_NAME']).DIRECTORY_SEPARATOR : NULL;%0a---%0a> define('APP_URI_BASE',isset($_SERVER['SCRIPT_NAME'] )? dirname($_SERVER['SCRIPT_NAME']) : NULL;%0a
host:1289639608=71.63.211.0
author:1288812835=tamara
csum:1288812835=prepend DIRECTORY_SEPARATOR onto result
diff:1288812835:1288812676:minor=45c45%0a%3c 	return (!empty($app_path_arr) ? DIRECTORY_SEPARATOR .  join(DIRECTORY_SEPARATOR,$app_path_arr) . DIRECTORY_SEPARATOR : NULL); /* path to application root */%0a---%0a> 	return (!empty($app_path_arr) ? join(DIRECTORY_SEPARATOR,$app_path_arr) . DIRECTORY_SEPARATOR : NULL); /* path to application root */%0a
host:1288812835=71.63.211.0
author:1288812676=tamara
csum:1288812676=new page
diff:1288812676:1288812676:=1,93d0%0a%3c (:Summary:In an application, it's often necessary to know where the root of the appliation exists:)%0a%3c [[%3c%3c]]%0a%3c %3c%3c|SoftwareAndWebProgramming|>>\\%0a%3c %3c%3c|[[PHP]]|>>%0a%3c %0a%3c Sometimes, you need to know the application root of your PHP application. There are a few ways to do that. I'll outline the simplest first.%0a%3c %0a%3c !!Setting the APP_ROOT constant from a config file%0a%3c %0a%3c !!!Method One: Using dirname(__FILE__)%0a%3c %0a%3c If your config file is in your application root, or a known depth from the root, you can simply use the dirname() function with the [[PHPMagicConstants|PHP Magic Constant]] __FILE__:%0a%3c %0a%3c (:source lang=php:)%0a%3c define('APP_ROOT', dirname(__FILE__));%0a%3c (:sourcend:)%0a%3c %0a%3c If your config file is one layer below the application's root, simply stack on another dirname:%0a%3c (:source lang=php:)%0a%3c define('APP_ROOT',dirname(dirname(__FILE__)));%0a%3c (:sourceend:)%0a%3c %0a%3c This has major advantages of being portable and usable in both the server and cli environments.%0a%3c %0a%3c !!!Method Two: Using a named path and examining the file paths returned by $_SERVER['SCRIPT_FILENAME']%0a%3c %0a%3c This is a decidedly harder way to do this, but it does work. It requires knowledge of the base directory of your application, which could change from installation to installation, thus making a less easily portable function.%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c %3c?php%0a%3c %0a%3c define('APPBASE','myapp');%0a%3c %0a%3c function get_app_root()%0a%3c {%0a%3c 	/**%0a%3c 	 * Get the Application Root directory path. Used for finding files and directories on the server's file system%0a%3c 	 */%0a%3c 	$script_path_arr = split('/', dirname($_SERVER['SCRIPT_FILENAME'])); /* get the elements of the path to the current script */%0a%3c 	$app_path_arr = Array();%0a%3c 	foreach ($script_path_arr as $script_path_element) {%0a%3c 		$app_path_arr[] = $script_path_element;%0a%3c 		if ($script_path_element == APPBASE) break; /* stop processing when we get to the application base dir */%0a%3c 	}%0a%3c 	return (!empty($app_path_arr) ? join(DIRECTORY_SEPARATOR,$app_path_arr) . DIRECTORY_SEPARATOR : NULL); /* path to application root */%0a%3c }%0a%3c %0a%3c define('APP_ROOT', get_app_root());%0a%3c ?>%0a%3c (:sourceend:)%0a%3c %0a%3c %0a%3c !!Getting the URI base path to the application%0a%3c %0a%3c Similarly to the file system application root, often times you want the path to the application's root as called by the client's browser. In this case, you could something similar to both the methods above:%0a%3c %0a%3c !!!Method One%0a%3c %0a%3c Gather up the path name from $_SERVER['SCRIPT_NAME']%0a%3c (:source lang=php:)%0a%3c define('APP_URI_BASE',isset($_SERVER['SCRIPT_NAME'] )? dirname($_SERVER['SCRIPT_NAME']) : NULL;%0a%3c (:sourceend:)%0a%3c %0a%3c [-''(Note: $_SERVER['SCRIPT_NAME'] will '''only''' be set when called from a server context.)''-]%0a%3c %0a%3c !!!Method Two%0a%3c %0a%3c Note: APPBASE is defined as above.%0a%3c %0a%3c (:source lang=php linenum:)%0a%3c %3c?php%0a%3c function get_uri_base()%0a%3c {%0a%3c 	if (!isset($_SERVER['SCRIPT_NAME'])) return NULL; // if no script name, this can't be called as a URI%0a%3c 	%0a%3c 	/**%0a%3c 	 * Get the Application URI path. Used for creating URI's for elements in the application that are called through the web server%0a%3c 	 */%0a%3c 	$script_uri_path_arr = split(DIRECTORY_SEPARATOR, dirname($_SERVER['SCRIPT_NAME'])); /* get the elements of the URI path to the current script */%0a%3c 	//debug_var("\$script_uri_path_arr",$script_uri_path_arr);%0a%3c 	foreach ($script_uri_path_arr as $script_uri_path_element) {%0a%3c 		$app_uri_base_arr[] = $script_uri_path_element;%0a%3c 		if ($script_uri_path_element == APPBASE) break; /* stop processing when we get to the application base dir */%0a%3c 	}%0a%3c 	return (!empty($script_uri_path_arr) ? DIRECTORY_SEPARATOR . join(DIRECTORY_SEPARATOR,$script_uri_path_arr) : NULL);%0a%3c }%0a%3c %0a%3c define('APP_URI_BASE',get_uri_base());%0a%3c ?>%0a%3c (:sourcend:)%0a%3c %0a%3c %0a%3c %25rframe%25 '''Categories:''' [[!ComputerStuff]]%0a
host:1288812676=71.63.211.0
