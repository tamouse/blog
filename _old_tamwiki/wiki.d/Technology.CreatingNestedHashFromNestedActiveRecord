version=pmwiki-2.2.43 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:20.0) Gecko/20100101 Firefox/20.0
author=tamara
charset=ISO-8859-1
csum=
ctime=1369276164
host=71.63.215.130
name=Technology.CreatingNestedHashFromNestedActiveRecord
rev=1
targets=Technology.CreatingNestedHashFromNestedActiveRecord,Technology.RubyOnRails,Category.HowTos,Category.Technology,Category.Ruby,Category.RubyOnRails
text=>>quote%3c%3c%0a(:linebreaks:)%0a!! [Rails] Creating nested hash from nested active record results%0aClem Rock %3clists@ruby-forum.com> 	Wed, May 22, 2013 at 9:53 AM%0aTo: rubyonrails-talk@googlegroups.com%0a%0aHello,%0a%0aI'm trying to find a very abstract and "one size fits all" for%0aconverting nested active record results to nested hashes.   It's easy,%0ato do one level deep as such:%0a%0a(:source lang=ruby:)%0aresults_to_hash = Hash[ found_categories.map{ |c| [c.id, c.title]}]%0a(:sourceend:)%0a%0aBut, when I try to add another collection to the mix, it completely%0aborks and the results_to_hash only returns an empty hash IE:%0a%0a(:source lang=ruby:)%0aresults_to_hash = Hash[ found_categories.map{ |c| [c.id, c.title, c.categories]}]%0a(:sourceend:)%0a%0aUltimately, I'd like it to be smart enough to detect if a model object%0acontains a collection (IE: [@object.class.reflect_on_all_associations@]),%0aand automatically convert those to hashes.%0a%0a%0aAny ideas?%0a%0aThanks,%0aEric%0a%0a----%0a%0agsw %3cgarysweaver@gmail.com> 	Wed, May 22, 2013 at 2:12 PM%0aTo: rubyonrails-talk@googlegroups.com%0a%0aWould this work?%0a%0a(:source lang=ruby:)%0aMyModel.last.serializable_hash methods: MyModel.reflections.keys%0a(:sourceend:)%0a%0aOr is that too much?%0a%0aLook at the options that you can pass into [@serializable_hash@].%0a%0aHowever, if you are doing this for json/etc. serialization in the controller, check out [@ActiveModel::Serializers@].%0a%0a----%0a%0agsw %3cgarysweaver@gmail.com> 	Wed, May 22, 2013 at 2:18 PM%0aTo: rubyonrails-talk@googlegroups.com%0a%0a%0aOne note about this: this can hit n+1 queries pretty hard. Unless you put include: in your associations (which I wouldn't not recommend unless it makes sense, and it probably doesn't) you have to know at query time what to include (or use joins), and what I just posted would make that difficult.%0a%0aIf you do use [@ActiveModel::Serializers@] instead and have big serialized objects, look at yodo to help you identify the value for include: in your queries to avoid n+1:%0a%0ahttps://github.com/garysweaver/yodo%0a%0aYou could also look at bullet in that regard:%0a%0ahttps://github.com/flyerhzm/bullet%0a%0a>>comment%3c%3c%0aSummary:email discussion of making a nested hash from a nested activerecord%0aParent:(Technology.)RubyOnRails%0aincludeme:(Technology.)RubyOnRails%0aCategories:[[!HowTos]], [[!Technology]], [[!Ruby]], [[!RubyOnRails]]%0aTags: ruby, rails, hashes, nesting, activerecord%0a(:tags-hide ruby, rails, hashes, nesting, activerecord:)%0a>>%3c%3c%0a
time=1369276164
author:1369276164=tamara
diff:1369276164:1369276164:=1,74d0%0a%3c >>quote%3c%3c%0a%3c (:linebreaks:)%0a%3c !! [Rails] Creating nested hash from nested active record results%0a%3c Clem Rock %3clists@ruby-forum.com> 	Wed, May 22, 2013 at 9:53 AM%0a%3c To: rubyonrails-talk@googlegroups.com%0a%3c %0a%3c Hello,%0a%3c %0a%3c I'm trying to find a very abstract and "one size fits all" for%0a%3c converting nested active record results to nested hashes.   It's easy,%0a%3c to do one level deep as such:%0a%3c %0a%3c (:source lang=ruby:)%0a%3c results_to_hash = Hash[ found_categories.map{ |c| [c.id, c.title]}]%0a%3c (:sourceend:)%0a%3c %0a%3c But, when I try to add another collection to the mix, it completely%0a%3c borks and the results_to_hash only returns an empty hash IE:%0a%3c %0a%3c (:source lang=ruby:)%0a%3c results_to_hash = Hash[ found_categories.map{ |c| [c.id, c.title, c.categories]}]%0a%3c (:sourceend:)%0a%3c %0a%3c Ultimately, I'd like it to be smart enough to detect if a model object%0a%3c contains a collection (IE: [@object.class.reflect_on_all_associations@]),%0a%3c and automatically convert those to hashes.%0a%3c %0a%3c %0a%3c Any ideas?%0a%3c %0a%3c Thanks,%0a%3c Eric%0a%3c %0a%3c ----%0a%3c %0a%3c gsw %3cgarysweaver@gmail.com> 	Wed, May 22, 2013 at 2:12 PM%0a%3c To: rubyonrails-talk@googlegroups.com%0a%3c %0a%3c Would this work?%0a%3c %0a%3c (:source lang=ruby:)%0a%3c MyModel.last.serializable_hash methods: MyModel.reflections.keys%0a%3c (:sourceend:)%0a%3c %0a%3c Or is that too much?%0a%3c %0a%3c Look at the options that you can pass into [@serializable_hash@].%0a%3c %0a%3c However, if you are doing this for json/etc. serialization in the controller, check out [@ActiveModel::Serializers@].%0a%3c %0a%3c ----%0a%3c %0a%3c gsw %3cgarysweaver@gmail.com> 	Wed, May 22, 2013 at 2:18 PM%0a%3c To: rubyonrails-talk@googlegroups.com%0a%3c %0a%3c %0a%3c One note about this: this can hit n+1 queries pretty hard. Unless you put include: in your associations (which I wouldn't not recommend unless it makes sense, and it probably doesn't) you have to know at query time what to include (or use joins), and what I just posted would make that difficult.%0a%3c %0a%3c If you do use [@ActiveModel::Serializers@] instead and have big serialized objects, look at yodo to help you identify the value for include: in your queries to avoid n+1:%0a%3c %0a%3c https://github.com/garysweaver/yodo%0a%3c %0a%3c You could also look at bullet in that regard:%0a%3c %0a%3c https://github.com/flyerhzm/bullet%0a%3c %0a%3c >>comment%3c%3c%0a%3c Summary:email discussion of making a nested hash from a nested activerecord%0a%3c Parent:(Technology.)RubyOnRails%0a%3c includeme:(Technology.)RubyOnRails%0a%3c Categories:[[!HowTos]], [[!Technology]], [[!Ruby]], [[!RubyOnRails]]%0a%3c Tags: ruby, rails, hashes, nesting, activerecord%0a%3c (:tags-hide ruby, rails, hashes, nesting, activerecord:)%0a%3c >>%3c%3c%0a
host:1369276164=71.63.215.130
